// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.21.4
// source: sf/sui/type/v1/type.proto

package pbsui

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CheckpointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checkpoint     *Checkpoint              `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Transactions   []*Transaction           `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Events         []*IndexedEvent          `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	ObjectChange   *TransactionObjectChange `protobuf:"bytes,4,opt,name=object_change,json=objectChange,proto3" json:"object_change,omitempty"`
	TxIndices      []*TxIndex               `protobuf:"bytes,5,rep,name=tx_indices,json=txIndices,proto3" json:"tx_indices,omitempty"`
	DisplayUpdates []*StoredDisplay         `protobuf:"bytes,6,rep,name=display_updates,json=displayUpdates,proto3" json:"display_updates,omitempty"`
	Packages       *IndexedPackage          `protobuf:"bytes,7,opt,name=packages,proto3" json:"packages,omitempty"`
}

func (x *CheckpointData) Reset() {
	*x = CheckpointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointData) ProtoMessage() {}

func (x *CheckpointData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointData.ProtoReflect.Descriptor instead.
func (*CheckpointData) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{0}
}

func (x *CheckpointData) GetCheckpoint() *Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *CheckpointData) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *CheckpointData) GetEvents() []*IndexedEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CheckpointData) GetObjectChange() *TransactionObjectChange {
	if x != nil {
		return x.ObjectChange
	}
	return nil
}

func (x *CheckpointData) GetTxIndices() []*TxIndex {
	if x != nil {
		return x.TxIndices
	}
	return nil
}

func (x *CheckpointData) GetDisplayUpdates() []*StoredDisplay {
	if x != nil {
		return x.DisplayUpdates
	}
	return nil
}

func (x *CheckpointData) GetPackages() *IndexedPackage {
	if x != nil {
		return x.Packages
	}
	return nil
}

type Checkpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Checkpoint's epoch ID
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Checkpoint sequence number
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Checkpoint digest (base58 encoded)
	Digest string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	// Total number of transactions committed since genesis, including those in this checkpoint.
	NetworkTotalTransactions uint64 `protobuf:"varint,4,opt,name=network_total_transactions,json=networkTotalTransactions,proto3" json:"network_total_transactions,omitempty"`
	// Digest of the previous checkpoint
	PreviousDigest *string `protobuf:"bytes,5,opt,name=previous_digest,json=previousDigest,proto3,oneof" json:"previous_digest,omitempty"`
	// The running total gas costs of all transactions included in the current epoch so far until this checkpoint.
	GasCostSummary *GasCostSummary `protobuf:"bytes,6,opt,name=gas_cost_summary,json=gasCostSummary,proto3" json:"gas_cost_summary,omitempty"`
	// Timestamp of the checkpoint - number of milliseconds from the Unix epoch
	// Checkpoint timestamps are monotonic, but not strongly monotonic - subsequent
	// checkpoints can have same timestamp if they originate from the same underlining consensus commit
	TimestampMs uint64 `protobuf:"varint,7,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	// Present only on the final checkpoint of the epoch.
	EndOfEpochData *EndOfEpochData `protobuf:"bytes,8,opt,name=end_of_epoch_data,json=endOfEpochData,proto3,oneof" json:"end_of_epoch_data,omitempty"`
	// Commitments to checkpoint state
	CheckpointCommitments []*CheckpointCommitment `protobuf:"bytes,9,rep,name=checkpoint_commitments,json=checkpointCommitments,proto3" json:"checkpoint_commitments,omitempty"`
	// Validator Signature (base64  encoded). This is a BLS signature
	ValidatorSignature []byte `protobuf:"bytes,10,opt,name=validator_signature,json=validatorSignature,proto3" json:"validator_signature,omitempty"`
	SuccessfulTxNum    uint64 `protobuf:"varint,11,opt,name=successful_tx_num,json=successfulTxNum,proto3" json:"successful_tx_num,omitempty"`
	EndOfEpoch         bool   `protobuf:"varint,12,opt,name=end_of_epoch,json=endOfEpoch,proto3" json:"end_of_epoch,omitempty"`
}

func (x *Checkpoint) Reset() {
	*x = Checkpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checkpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checkpoint) ProtoMessage() {}

func (x *Checkpoint) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checkpoint.ProtoReflect.Descriptor instead.
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{1}
}

func (x *Checkpoint) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *Checkpoint) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Checkpoint) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *Checkpoint) GetNetworkTotalTransactions() uint64 {
	if x != nil {
		return x.NetworkTotalTransactions
	}
	return 0
}

func (x *Checkpoint) GetPreviousDigest() string {
	if x != nil && x.PreviousDigest != nil {
		return *x.PreviousDigest
	}
	return ""
}

func (x *Checkpoint) GetGasCostSummary() *GasCostSummary {
	if x != nil {
		return x.GasCostSummary
	}
	return nil
}

func (x *Checkpoint) GetTimestampMs() uint64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *Checkpoint) GetEndOfEpochData() *EndOfEpochData {
	if x != nil {
		return x.EndOfEpochData
	}
	return nil
}

func (x *Checkpoint) GetCheckpointCommitments() []*CheckpointCommitment {
	if x != nil {
		return x.CheckpointCommitments
	}
	return nil
}

func (x *Checkpoint) GetValidatorSignature() []byte {
	if x != nil {
		return x.ValidatorSignature
	}
	return nil
}

func (x *Checkpoint) GetSuccessfulTxNum() uint64 {
	if x != nil {
		return x.SuccessfulTxNum
	}
	return 0
}

func (x *Checkpoint) GetEndOfEpoch() bool {
	if x != nil {
		return x.EndOfEpoch
	}
	return false
}

type GasCostSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cost of computation/execution
	ComputationCost uint64 `protobuf:"varint,1,opt,name=computation_cost,json=computationCost,proto3" json:"computation_cost,omitempty"`
	// Storage cost, it's the sum of all storage cost for all objects created or mutated.
	StorageCost uint64 `protobuf:"varint,2,opt,name=storage_cost,json=storageCost,proto3" json:"storage_cost,omitempty"`
	// The amount of storage cost refunded to the user for all objects deleted or mutated in the transaction.
	StorageRebate uint64 `protobuf:"varint,3,opt,name=storage_rebate,json=storageRebate,proto3" json:"storage_rebate,omitempty"`
	// The fee for the rebate. The portion of the storage rebate kept by the system.
	NonRefundableStorageFee uint64 `protobuf:"varint,4,opt,name=non_refundable_storage_fee,json=nonRefundableStorageFee,proto3" json:"non_refundable_storage_fee,omitempty"`
}

func (x *GasCostSummary) Reset() {
	*x = GasCostSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasCostSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasCostSummary) ProtoMessage() {}

func (x *GasCostSummary) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasCostSummary.ProtoReflect.Descriptor instead.
func (*GasCostSummary) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{2}
}

func (x *GasCostSummary) GetComputationCost() uint64 {
	if x != nil {
		return x.ComputationCost
	}
	return 0
}

func (x *GasCostSummary) GetStorageCost() uint64 {
	if x != nil {
		return x.StorageCost
	}
	return 0
}

func (x *GasCostSummary) GetStorageRebate() uint64 {
	if x != nil {
		return x.StorageRebate
	}
	return 0
}

func (x *GasCostSummary) GetNonRefundableStorageFee() uint64 {
	if x != nil {
		return x.NonRefundableStorageFee
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber           uint64                     `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Digest                   string                     `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	SenderSignedData         []*SenderSignedTransaction `protobuf:"bytes,3,rep,name=sender_signed_data,json=senderSignedData,proto3" json:"sender_signed_data,omitempty"`
	Effects                  *TransactionBlockEffects   `protobuf:"bytes,4,opt,name=effects,proto3" json:"effects,omitempty"`
	CheckpointSequenceNumber uint64                     `protobuf:"varint,5,opt,name=checkpoint_sequence_number,json=checkpointSequenceNumber,proto3" json:"checkpoint_sequence_number,omitempty"`
	TimestampMs              uint64                     `protobuf:"varint,6,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
	ObjectChanges            []*ObjectChange            `protobuf:"bytes,7,rep,name=object_changes,json=objectChanges,proto3" json:"object_changes,omitempty"`
	BalanceChange            []*BalanceChange           `protobuf:"bytes,8,rep,name=balance_change,json=balanceChange,proto3" json:"balance_change,omitempty"`
	Events                   []*Event                   `protobuf:"bytes,9,rep,name=events,proto3" json:"events,omitempty"`
	TransactionKind          *GenericTransactionKind    `protobuf:"bytes,10,opt,name=transaction_kind,json=transactionKind,proto3" json:"transaction_kind,omitempty"`
	SuccessfulTxNum          uint64                     `protobuf:"varint,11,opt,name=successful_tx_num,json=successfulTxNum,proto3" json:"successful_tx_num,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{3}
}

func (x *Transaction) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *Transaction) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *Transaction) GetSenderSignedData() []*SenderSignedTransaction {
	if x != nil {
		return x.SenderSignedData
	}
	return nil
}

func (x *Transaction) GetEffects() *TransactionBlockEffects {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *Transaction) GetCheckpointSequenceNumber() uint64 {
	if x != nil {
		return x.CheckpointSequenceNumber
	}
	return 0
}

func (x *Transaction) GetTimestampMs() uint64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

func (x *Transaction) GetObjectChanges() []*ObjectChange {
	if x != nil {
		return x.ObjectChanges
	}
	return nil
}

func (x *Transaction) GetBalanceChange() []*BalanceChange {
	if x != nil {
		return x.BalanceChange
	}
	return nil
}

func (x *Transaction) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Transaction) GetTransactionKind() *GenericTransactionKind {
	if x != nil {
		return x.TransactionKind
	}
	return nil
}

func (x *Transaction) GetSuccessfulTxNum() uint64 {
	if x != nil {
		return x.SuccessfulTxNum
	}
	return 0
}

type GenericTransactionKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*GenericTransactionKind_SystemTransaction
	//	*GenericTransactionKind_ProgrammableTransaction
	Kind isGenericTransactionKind_Kind `protobuf_oneof:"kind"`
}

func (x *GenericTransactionKind) Reset() {
	*x = GenericTransactionKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericTransactionKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericTransactionKind) ProtoMessage() {}

func (x *GenericTransactionKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericTransactionKind.ProtoReflect.Descriptor instead.
func (*GenericTransactionKind) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{4}
}

func (m *GenericTransactionKind) GetKind() isGenericTransactionKind_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *GenericTransactionKind) GetSystemTransaction() *emptypb.Empty {
	if x, ok := x.GetKind().(*GenericTransactionKind_SystemTransaction); ok {
		return x.SystemTransaction
	}
	return nil
}

func (x *GenericTransactionKind) GetProgrammableTransaction() *emptypb.Empty {
	if x, ok := x.GetKind().(*GenericTransactionKind_ProgrammableTransaction); ok {
		return x.ProgrammableTransaction
	}
	return nil
}

type isGenericTransactionKind_Kind interface {
	isGenericTransactionKind_Kind()
}

type GenericTransactionKind_SystemTransaction struct {
	SystemTransaction *emptypb.Empty `protobuf:"bytes,1,opt,name=system_transaction,json=systemTransaction,proto3,oneof"`
}

type GenericTransactionKind_ProgrammableTransaction struct {
	ProgrammableTransaction *emptypb.Empty `protobuf:"bytes,2,opt,name=programmable_transaction,json=programmableTransaction,proto3,oneof"`
}

func (*GenericTransactionKind_SystemTransaction) isGenericTransactionKind_Kind() {}

func (*GenericTransactionKind_ProgrammableTransaction) isGenericTransactionKind_Kind() {}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId         *ObjectID  `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	TransactionModule string     `protobuf:"bytes,2,opt,name=transaction_module,json=transactionModule,proto3" json:"transaction_module,omitempty"`
	Sender            string     `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Type              *StructTag `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Contents          []byte     `protobuf:"bytes,5,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{5}
}

func (x *Event) GetPackageId() *ObjectID {
	if x != nil {
		return x.PackageId
	}
	return nil
}

func (x *Event) GetTransactionModule() string {
	if x != nil {
		return x.TransactionModule
	}
	return ""
}

func (x *Event) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Event) GetType() *StructTag {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Event) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type BalanceChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Owner of the balance change
	Owner    *Owner   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	CoinType *TypeTag `protobuf:"bytes,2,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
	// / The amount indicate the balance value changes,
	// / negative amount means spending coin value and positive means receiving coin value.
	// / covnert this to i128 later on
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *BalanceChange) Reset() {
	*x = BalanceChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceChange) ProtoMessage() {}

func (x *BalanceChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceChange.ProtoReflect.Descriptor instead.
func (*BalanceChange) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{6}
}

func (x *BalanceChange) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *BalanceChange) GetCoinType() *TypeTag {
	if x != nil {
		return x.CoinType
	}
	return nil
}

func (x *BalanceChange) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type ObjectChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ObjectChange:
	//
	//	*ObjectChange_Published
	//	*ObjectChange_Transferred
	//	*ObjectChange_Mutated
	//	*ObjectChange_Deleted
	//	*ObjectChange_Wrapped
	//	*ObjectChange_Created
	ObjectChange isObjectChange_ObjectChange `protobuf_oneof:"object_change"`
}

func (x *ObjectChange) Reset() {
	*x = ObjectChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectChange) ProtoMessage() {}

func (x *ObjectChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectChange.ProtoReflect.Descriptor instead.
func (*ObjectChange) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{7}
}

func (m *ObjectChange) GetObjectChange() isObjectChange_ObjectChange {
	if m != nil {
		return m.ObjectChange
	}
	return nil
}

func (x *ObjectChange) GetPublished() *Published {
	if x, ok := x.GetObjectChange().(*ObjectChange_Published); ok {
		return x.Published
	}
	return nil
}

func (x *ObjectChange) GetTransferred() *Transferred {
	if x, ok := x.GetObjectChange().(*ObjectChange_Transferred); ok {
		return x.Transferred
	}
	return nil
}

func (x *ObjectChange) GetMutated() *Mutated {
	if x, ok := x.GetObjectChange().(*ObjectChange_Mutated); ok {
		return x.Mutated
	}
	return nil
}

func (x *ObjectChange) GetDeleted() *Deleted {
	if x, ok := x.GetObjectChange().(*ObjectChange_Deleted); ok {
		return x.Deleted
	}
	return nil
}

func (x *ObjectChange) GetWrapped() *Wrapped {
	if x, ok := x.GetObjectChange().(*ObjectChange_Wrapped); ok {
		return x.Wrapped
	}
	return nil
}

func (x *ObjectChange) GetCreated() *Created {
	if x, ok := x.GetObjectChange().(*ObjectChange_Created); ok {
		return x.Created
	}
	return nil
}

type isObjectChange_ObjectChange interface {
	isObjectChange_ObjectChange()
}

type ObjectChange_Published struct {
	Published *Published `protobuf:"bytes,1,opt,name=published,proto3,oneof"`
}

type ObjectChange_Transferred struct {
	Transferred *Transferred `protobuf:"bytes,2,opt,name=transferred,proto3,oneof"`
}

type ObjectChange_Mutated struct {
	Mutated *Mutated `protobuf:"bytes,3,opt,name=mutated,proto3,oneof"`
}

type ObjectChange_Deleted struct {
	Deleted *Deleted `protobuf:"bytes,4,opt,name=deleted,proto3,oneof"`
}

type ObjectChange_Wrapped struct {
	Wrapped *Wrapped `protobuf:"bytes,5,opt,name=wrapped,proto3,oneof"`
}

type ObjectChange_Created struct {
	Created *Created `protobuf:"bytes,6,opt,name=created,proto3,oneof"`
}

func (*ObjectChange_Published) isObjectChange_ObjectChange() {}

func (*ObjectChange_Transferred) isObjectChange_ObjectChange() {}

func (*ObjectChange_Mutated) isObjectChange_ObjectChange() {}

func (*ObjectChange_Deleted) isObjectChange_ObjectChange() {}

func (*ObjectChange_Wrapped) isObjectChange_ObjectChange() {}

func (*ObjectChange_Created) isObjectChange_ObjectChange() {}

type Published struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId *ObjectID `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	Version   uint64    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Digest    string    `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Modules   []string  `protobuf:"bytes,4,rep,name=modules,proto3" json:"modules,omitempty"`
}

func (x *Published) Reset() {
	*x = Published{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Published) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Published) ProtoMessage() {}

func (x *Published) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Published.ProtoReflect.Descriptor instead.
func (*Published) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{8}
}

func (x *Published) GetPackageId() *ObjectID {
	if x != nil {
		return x.PackageId
	}
	return nil
}

func (x *Published) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Published) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *Published) GetModules() []string {
	if x != nil {
		return x.Modules
	}
	return nil
}

type Transferred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender     string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient  *Owner     `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	ObjectType *StructTag `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	ObjectId   *ObjectID  `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Version    uint64     `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	Digest     string     `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *Transferred) Reset() {
	*x = Transferred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transferred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transferred) ProtoMessage() {}

func (x *Transferred) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transferred.ProtoReflect.Descriptor instead.
func (*Transferred) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{9}
}

func (x *Transferred) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Transferred) GetRecipient() *Owner {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *Transferred) GetObjectType() *StructTag {
	if x != nil {
		return x.ObjectType
	}
	return nil
}

func (x *Transferred) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *Transferred) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Transferred) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type Mutated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender          string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Owner           *Owner     `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	ObjectType      *StructTag `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	ObjectId        *ObjectID  `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Version         uint64     `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	PreviousVersion uint64     `protobuf:"varint,6,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty"`
	Digest          string     `protobuf:"bytes,7,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *Mutated) Reset() {
	*x = Mutated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mutated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mutated) ProtoMessage() {}

func (x *Mutated) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mutated.ProtoReflect.Descriptor instead.
func (*Mutated) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{10}
}

func (x *Mutated) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Mutated) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Mutated) GetObjectType() *StructTag {
	if x != nil {
		return x.ObjectType
	}
	return nil
}

func (x *Mutated) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *Mutated) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Mutated) GetPreviousVersion() uint64 {
	if x != nil {
		return x.PreviousVersion
	}
	return 0
}

func (x *Mutated) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type Deleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender     string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ObjectType *StructTag `protobuf:"bytes,2,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	ObjectId   *ObjectID  `protobuf:"bytes,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Version    uint64     `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Deleted) Reset() {
	*x = Deleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deleted) ProtoMessage() {}

func (x *Deleted) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deleted.ProtoReflect.Descriptor instead.
func (*Deleted) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{11}
}

func (x *Deleted) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Deleted) GetObjectType() *StructTag {
	if x != nil {
		return x.ObjectType
	}
	return nil
}

func (x *Deleted) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *Deleted) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Wrapped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender     string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ObjectType *StructTag `protobuf:"bytes,2,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	ObjectId   *ObjectID  `protobuf:"bytes,3,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Version    uint64     `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Wrapped) Reset() {
	*x = Wrapped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wrapped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wrapped) ProtoMessage() {}

func (x *Wrapped) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wrapped.ProtoReflect.Descriptor instead.
func (*Wrapped) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{12}
}

func (x *Wrapped) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Wrapped) GetObjectType() *StructTag {
	if x != nil {
		return x.ObjectType
	}
	return nil
}

func (x *Wrapped) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *Wrapped) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Created struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender     string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Owner      *Owner     `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	ObjectType *StructTag `protobuf:"bytes,3,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	ObjectId   *ObjectID  `protobuf:"bytes,4,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Version    uint64     `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	Digest     string     `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *Created) Reset() {
	*x = Created{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Created) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Created) ProtoMessage() {}

func (x *Created) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Created.ProtoReflect.Descriptor instead.
func (*Created) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{13}
}

func (x *Created) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *Created) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Created) GetObjectType() *StructTag {
	if x != nil {
		return x.ObjectType
	}
	return nil
}

func (x *Created) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *Created) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Created) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type SenderSignedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentMessage *IntentMessage `protobuf:"bytes,1,opt,name=intent_message,json=intentMessage,proto3" json:"intent_message,omitempty"`
}

func (x *SenderSignedTransaction) Reset() {
	*x = SenderSignedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SenderSignedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SenderSignedTransaction) ProtoMessage() {}

func (x *SenderSignedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SenderSignedTransaction.ProtoReflect.Descriptor instead.
func (*SenderSignedTransaction) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{14}
}

func (x *SenderSignedTransaction) GetIntentMessage() *IntentMessage {
	if x != nil {
		return x.IntentMessage
	}
	return nil
}

type IntentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intent *Intent          `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
	Value  *TransactionData `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IntentMessage) Reset() {
	*x = IntentMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentMessage) ProtoMessage() {}

func (x *IntentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentMessage.ProtoReflect.Descriptor instead.
func (*IntentMessage) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{15}
}

func (x *IntentMessage) GetIntent() *Intent {
	if x != nil {
		return x.Intent
	}
	return nil
}

func (x *IntentMessage) GetValue() *TransactionData {
	if x != nil {
		return x.Value
	}
	return nil
}

type Intent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope   *IntentScope   `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Version *IntentVersion `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	AppId   *AppId         `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *Intent) Reset() {
	*x = Intent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Intent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intent) ProtoMessage() {}

func (x *Intent) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intent.ProtoReflect.Descriptor instead.
func (*Intent) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{16}
}

func (x *Intent) GetScope() *IntentScope {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *Intent) GetVersion() *IntentVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Intent) GetAppId() *AppId {
	if x != nil {
		return x.AppId
	}
	return nil
}

type IntentVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IntentVersion:
	//
	//	*IntentVersion_V0
	IntentVersion isIntentVersion_IntentVersion `protobuf_oneof:"intent_version"`
}

func (x *IntentVersion) Reset() {
	*x = IntentVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentVersion) ProtoMessage() {}

func (x *IntentVersion) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentVersion.ProtoReflect.Descriptor instead.
func (*IntentVersion) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{17}
}

func (m *IntentVersion) GetIntentVersion() isIntentVersion_IntentVersion {
	if m != nil {
		return m.IntentVersion
	}
	return nil
}

func (x *IntentVersion) GetV0() *emptypb.Empty {
	if x, ok := x.GetIntentVersion().(*IntentVersion_V0); ok {
		return x.V0
	}
	return nil
}

type isIntentVersion_IntentVersion interface {
	isIntentVersion_IntentVersion()
}

type IntentVersion_V0 struct {
	V0 *emptypb.Empty `protobuf:"bytes,1,opt,name=v0,proto3,oneof"`
}

func (*IntentVersion_V0) isIntentVersion_IntentVersion() {}

type AppId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AppId:
	//
	//	*AppId_Sui
	//	*AppId_Narwhal
	//	*AppId_Consensus
	AppId isAppId_AppId `protobuf_oneof:"app_id"`
}

func (x *AppId) Reset() {
	*x = AppId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppId) ProtoMessage() {}

func (x *AppId) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppId.ProtoReflect.Descriptor instead.
func (*AppId) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{18}
}

func (m *AppId) GetAppId() isAppId_AppId {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (x *AppId) GetSui() *emptypb.Empty {
	if x, ok := x.GetAppId().(*AppId_Sui); ok {
		return x.Sui
	}
	return nil
}

func (x *AppId) GetNarwhal() *emptypb.Empty {
	if x, ok := x.GetAppId().(*AppId_Narwhal); ok {
		return x.Narwhal
	}
	return nil
}

func (x *AppId) GetConsensus() *emptypb.Empty {
	if x, ok := x.GetAppId().(*AppId_Consensus); ok {
		return x.Consensus
	}
	return nil
}

type isAppId_AppId interface {
	isAppId_AppId()
}

type AppId_Sui struct {
	Sui *emptypb.Empty `protobuf:"bytes,1,opt,name=sui,proto3,oneof"`
}

type AppId_Narwhal struct {
	Narwhal *emptypb.Empty `protobuf:"bytes,2,opt,name=narwhal,proto3,oneof"`
}

type AppId_Consensus struct {
	Consensus *emptypb.Empty `protobuf:"bytes,3,opt,name=consensus,proto3,oneof"`
}

func (*AppId_Sui) isAppId_AppId() {}

func (*AppId_Narwhal) isAppId_AppId() {}

func (*AppId_Consensus) isAppId_AppId() {}

type IntentScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IntentScope:
	//
	//	*IntentScope_TransactionData
	//	*IntentScope_TransactionEffects
	//	*IntentScope_CheckpointSummary
	//	*IntentScope_PersonalMessage
	//	*IntentScope_SenderSignedTransaction
	//	*IntentScope_ProofOfPossession
	//	*IntentScope_HeaderDigest
	//	*IntentScope_BridgeEventUnused
	//	*IntentScope_ConsensusBlock
	IntentScope isIntentScope_IntentScope `protobuf_oneof:"intent_scope"`
}

func (x *IntentScope) Reset() {
	*x = IntentScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntentScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentScope) ProtoMessage() {}

func (x *IntentScope) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentScope.ProtoReflect.Descriptor instead.
func (*IntentScope) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{19}
}

func (m *IntentScope) GetIntentScope() isIntentScope_IntentScope {
	if m != nil {
		return m.IntentScope
	}
	return nil
}

func (x *IntentScope) GetTransactionData() *emptypb.Empty {
	if x, ok := x.GetIntentScope().(*IntentScope_TransactionData); ok {
		return x.TransactionData
	}
	return nil
}

func (x *IntentScope) GetTransactionEffects() *emptypb.Empty {
	if x, ok := x.GetIntentScope().(*IntentScope_TransactionEffects); ok {
		return x.TransactionEffects
	}
	return nil
}

func (x *IntentScope) GetCheckpointSummary() *emptypb.Empty {
	if x, ok := x.GetIntentScope().(*IntentScope_CheckpointSummary); ok {
		return x.CheckpointSummary
	}
	return nil
}

func (x *IntentScope) GetPersonalMessage() *emptypb.Empty {
	if x, ok := x.GetIntentScope().(*IntentScope_PersonalMessage); ok {
		return x.PersonalMessage
	}
	return nil
}

func (x *IntentScope) GetSenderSignedTransaction() *emptypb.Empty {
	if x, ok := x.GetIntentScope().(*IntentScope_SenderSignedTransaction); ok {
		return x.SenderSignedTransaction
	}
	return nil
}

func (x *IntentScope) GetProofOfPossession() *emptypb.Empty {
	if x, ok := x.GetIntentScope().(*IntentScope_ProofOfPossession); ok {
		return x.ProofOfPossession
	}
	return nil
}

func (x *IntentScope) GetHeaderDigest() *emptypb.Empty {
	if x, ok := x.GetIntentScope().(*IntentScope_HeaderDigest); ok {
		return x.HeaderDigest
	}
	return nil
}

func (x *IntentScope) GetBridgeEventUnused() *emptypb.Empty {
	if x, ok := x.GetIntentScope().(*IntentScope_BridgeEventUnused); ok {
		return x.BridgeEventUnused
	}
	return nil
}

func (x *IntentScope) GetConsensusBlock() *emptypb.Empty {
	if x, ok := x.GetIntentScope().(*IntentScope_ConsensusBlock); ok {
		return x.ConsensusBlock
	}
	return nil
}

type isIntentScope_IntentScope interface {
	isIntentScope_IntentScope()
}

type IntentScope_TransactionData struct {
	// Used for a user signature on a transaction data.
	TransactionData *emptypb.Empty `protobuf:"bytes,1,opt,name=transaction_data,json=transactionData,proto3,oneof"`
}

type IntentScope_TransactionEffects struct {
	// Used for an authority signature on transaction effects.
	TransactionEffects *emptypb.Empty `protobuf:"bytes,2,opt,name=transaction_effects,json=transactionEffects,proto3,oneof"`
}

type IntentScope_CheckpointSummary struct {
	// Used for an authority signature on a checkpoint summary.
	CheckpointSummary *emptypb.Empty `protobuf:"bytes,3,opt,name=checkpoint_summary,json=checkpointSummary,proto3,oneof"`
}

type IntentScope_PersonalMessage struct {
	// Used for a user signature on a personal message.
	PersonalMessage *emptypb.Empty `protobuf:"bytes,4,opt,name=personal_message,json=personalMessage,proto3,oneof"`
}

type IntentScope_SenderSignedTransaction struct {
	// Used for an authority signature on a user signed transaction.
	SenderSignedTransaction *emptypb.Empty `protobuf:"bytes,5,opt,name=sender_signed_transaction,json=senderSignedTransaction,proto3,oneof"`
}

type IntentScope_ProofOfPossession struct {
	// Used as a signature representing an authority's proof of possession of its authority protocol key.
	ProofOfPossession *emptypb.Empty `protobuf:"bytes,6,opt,name=proof_of_possession,json=proofOfPossession,proto3,oneof"`
}

type IntentScope_HeaderDigest struct {
	// Used for narwhal authority signature on header digest.
	HeaderDigest *emptypb.Empty `protobuf:"bytes,7,opt,name=header_digest,json=headerDigest,proto3,oneof"`
}

type IntentScope_BridgeEventUnused struct {
	// for bridge purposes but it's currently not included in messages.
	BridgeEventUnused *emptypb.Empty `protobuf:"bytes,8,opt,name=bridge_event_unused,json=bridgeEventUnused,proto3,oneof"`
}

type IntentScope_ConsensusBlock struct {
	// Used for consensus authority signature on block's digest
	ConsensusBlock *emptypb.Empty `protobuf:"bytes,9,opt,name=consensus_block,json=consensusBlock,proto3,oneof"`
}

func (*IntentScope_TransactionData) isIntentScope_IntentScope() {}

func (*IntentScope_TransactionEffects) isIntentScope_IntentScope() {}

func (*IntentScope_CheckpointSummary) isIntentScope_IntentScope() {}

func (*IntentScope_PersonalMessage) isIntentScope_IntentScope() {}

func (*IntentScope_SenderSignedTransaction) isIntentScope_IntentScope() {}

func (*IntentScope_ProofOfPossession) isIntentScope_IntentScope() {}

func (*IntentScope_HeaderDigest) isIntentScope_IntentScope() {}

func (*IntentScope_BridgeEventUnused) isIntentScope_IntentScope() {}

func (*IntentScope_ConsensusBlock) isIntentScope_IntentScope() {}

type TransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TxData:
	//
	//	*TransactionData_V1
	TxData isTransactionData_TxData `protobuf_oneof:"tx_data"`
}

func (x *TransactionData) Reset() {
	*x = TransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionData) ProtoMessage() {}

func (x *TransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionData.ProtoReflect.Descriptor instead.
func (*TransactionData) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{20}
}

func (m *TransactionData) GetTxData() isTransactionData_TxData {
	if m != nil {
		return m.TxData
	}
	return nil
}

func (x *TransactionData) GetV1() *TransactionDataV1 {
	if x, ok := x.GetTxData().(*TransactionData_V1); ok {
		return x.V1
	}
	return nil
}

type isTransactionData_TxData interface {
	isTransactionData_TxData()
}

type TransactionData_V1 struct {
	V1 *TransactionDataV1 `protobuf:"bytes,1,opt,name=v1,proto3,oneof"`
}

func (*TransactionData_V1) isTransactionData_TxData() {}

type TransactionDataV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind       *TransactionKind       `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Sender     string                 `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	GasData    *GasData               `protobuf:"bytes,3,opt,name=gas_data,json=gasData,proto3" json:"gas_data,omitempty"`
	Expiration *TransactionExpiration `protobuf:"bytes,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *TransactionDataV1) Reset() {
	*x = TransactionDataV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionDataV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDataV1) ProtoMessage() {}

func (x *TransactionDataV1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDataV1.ProtoReflect.Descriptor instead.
func (*TransactionDataV1) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{21}
}

func (x *TransactionDataV1) GetKind() *TransactionKind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *TransactionDataV1) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *TransactionDataV1) GetGasData() *GasData {
	if x != nil {
		return x.GasData
	}
	return nil
}

func (x *TransactionDataV1) GetExpiration() *TransactionExpiration {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type TransactionExpiration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TxExpiration:
	//
	//	*TransactionExpiration_None
	//	*TransactionExpiration_Epoch
	TxExpiration isTransactionExpiration_TxExpiration `protobuf_oneof:"tx_expiration"`
}

func (x *TransactionExpiration) Reset() {
	*x = TransactionExpiration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionExpiration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionExpiration) ProtoMessage() {}

func (x *TransactionExpiration) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionExpiration.ProtoReflect.Descriptor instead.
func (*TransactionExpiration) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{22}
}

func (m *TransactionExpiration) GetTxExpiration() isTransactionExpiration_TxExpiration {
	if m != nil {
		return m.TxExpiration
	}
	return nil
}

func (x *TransactionExpiration) GetNone() *emptypb.Empty {
	if x, ok := x.GetTxExpiration().(*TransactionExpiration_None); ok {
		return x.None
	}
	return nil
}

func (x *TransactionExpiration) GetEpoch() uint64 {
	if x, ok := x.GetTxExpiration().(*TransactionExpiration_Epoch); ok {
		return x.Epoch
	}
	return 0
}

type isTransactionExpiration_TxExpiration interface {
	isTransactionExpiration_TxExpiration()
}

type TransactionExpiration_None struct {
	None *emptypb.Empty `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type TransactionExpiration_Epoch struct {
	Epoch uint64 `protobuf:"varint,2,opt,name=epoch,proto3,oneof"`
}

func (*TransactionExpiration_None) isTransactionExpiration_TxExpiration() {}

func (*TransactionExpiration_Epoch) isTransactionExpiration_TxExpiration() {}

type TransactionKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TransactionKind:
	//
	//	*TransactionKind_ProgrammableTx
	//	*TransactionKind_ChangeEpoch
	//	*TransactionKind_Genesis
	//	*TransactionKind_ConsensusCommitPrologue
	//	*TransactionKind_AuthenticatorStateUpdate
	//	*TransactionKind_EndOdEpochTransaction
	//	*TransactionKind_RandomnessStateUpdate
	//	*TransactionKind_ConsensusCommitPrologueV2
	TransactionKind isTransactionKind_TransactionKind `protobuf_oneof:"transaction_kind"`
}

func (x *TransactionKind) Reset() {
	*x = TransactionKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionKind) ProtoMessage() {}

func (x *TransactionKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionKind.ProtoReflect.Descriptor instead.
func (*TransactionKind) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{23}
}

func (m *TransactionKind) GetTransactionKind() isTransactionKind_TransactionKind {
	if m != nil {
		return m.TransactionKind
	}
	return nil
}

func (x *TransactionKind) GetProgrammableTx() *ProgrammableTransaction {
	if x, ok := x.GetTransactionKind().(*TransactionKind_ProgrammableTx); ok {
		return x.ProgrammableTx
	}
	return nil
}

func (x *TransactionKind) GetChangeEpoch() *ChangeEpoch {
	if x, ok := x.GetTransactionKind().(*TransactionKind_ChangeEpoch); ok {
		return x.ChangeEpoch
	}
	return nil
}

func (x *TransactionKind) GetGenesis() *GenesisTransaction {
	if x, ok := x.GetTransactionKind().(*TransactionKind_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (x *TransactionKind) GetConsensusCommitPrologue() *ConsensusCommitPrologue {
	if x, ok := x.GetTransactionKind().(*TransactionKind_ConsensusCommitPrologue); ok {
		return x.ConsensusCommitPrologue
	}
	return nil
}

func (x *TransactionKind) GetAuthenticatorStateUpdate() *AuthenticatorStateUpdate {
	if x, ok := x.GetTransactionKind().(*TransactionKind_AuthenticatorStateUpdate); ok {
		return x.AuthenticatorStateUpdate
	}
	return nil
}

func (x *TransactionKind) GetEndOdEpochTransaction() *EndOfEpochTransaction {
	if x, ok := x.GetTransactionKind().(*TransactionKind_EndOdEpochTransaction); ok {
		return x.EndOdEpochTransaction
	}
	return nil
}

func (x *TransactionKind) GetRandomnessStateUpdate() *RandomnessStateUpdate {
	if x, ok := x.GetTransactionKind().(*TransactionKind_RandomnessStateUpdate); ok {
		return x.RandomnessStateUpdate
	}
	return nil
}

func (x *TransactionKind) GetConsensusCommitPrologueV2() *ConsensusCommitPrologueV2 {
	if x, ok := x.GetTransactionKind().(*TransactionKind_ConsensusCommitPrologueV2); ok {
		return x.ConsensusCommitPrologueV2
	}
	return nil
}

type isTransactionKind_TransactionKind interface {
	isTransactionKind_TransactionKind()
}

type TransactionKind_ProgrammableTx struct {
	// / A transaction that allows the interleaving of native commands and Move calls
	ProgrammableTx *ProgrammableTransaction `protobuf:"bytes,1,opt,name=programmable_tx,json=programmableTx,proto3,oneof"`
}

type TransactionKind_ChangeEpoch struct {
	ChangeEpoch *ChangeEpoch `protobuf:"bytes,2,opt,name=change_epoch,json=changeEpoch,proto3,oneof"`
}

type TransactionKind_Genesis struct {
	Genesis *GenesisTransaction `protobuf:"bytes,3,opt,name=genesis,proto3,oneof"`
}

type TransactionKind_ConsensusCommitPrologue struct {
	ConsensusCommitPrologue *ConsensusCommitPrologue `protobuf:"bytes,4,opt,name=consensus_commit_prologue,json=consensusCommitPrologue,proto3,oneof"`
}

type TransactionKind_AuthenticatorStateUpdate struct {
	AuthenticatorStateUpdate *AuthenticatorStateUpdate `protobuf:"bytes,5,opt,name=authenticator_state_update,json=authenticatorStateUpdate,proto3,oneof"`
}

type TransactionKind_EndOdEpochTransaction struct {
	// / EndOfEpochTransaction replaces ChangeEpoch with a list of transactions that are allowed to
	// / run at the end of the epoch.
	EndOdEpochTransaction *EndOfEpochTransaction `protobuf:"bytes,6,opt,name=end_od_epoch_transaction,json=endOdEpochTransaction,proto3,oneof"`
}

type TransactionKind_RandomnessStateUpdate struct {
	RandomnessStateUpdate *RandomnessStateUpdate `protobuf:"bytes,7,opt,name=randomness_state_update,json=randomnessStateUpdate,proto3,oneof"`
}

type TransactionKind_ConsensusCommitPrologueV2 struct {
	// V2 ConsensusCommitPrologue also includes the digest of the current consensus output.
	ConsensusCommitPrologueV2 *ConsensusCommitPrologueV2 `protobuf:"bytes,8,opt,name=consensus_commit_prologue_v2,json=consensusCommitPrologueV2,proto3,oneof"`
}

func (*TransactionKind_ProgrammableTx) isTransactionKind_TransactionKind() {}

func (*TransactionKind_ChangeEpoch) isTransactionKind_TransactionKind() {}

func (*TransactionKind_Genesis) isTransactionKind_TransactionKind() {}

func (*TransactionKind_ConsensusCommitPrologue) isTransactionKind_TransactionKind() {}

func (*TransactionKind_AuthenticatorStateUpdate) isTransactionKind_TransactionKind() {}

func (*TransactionKind_EndOdEpochTransaction) isTransactionKind_TransactionKind() {}

func (*TransactionKind_RandomnessStateUpdate) isTransactionKind_TransactionKind() {}

func (*TransactionKind_ConsensusCommitPrologueV2) isTransactionKind_TransactionKind() {}

type ConsensusCommitPrologueV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Epoch of the commit prologue transaction
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// / Consensus round of the commit
	Round uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	// / Unix timestamp from consensus
	CommitTimestampMs uint64 `protobuf:"varint,3,opt,name=commit_timestamp_ms,json=commitTimestampMs,proto3" json:"commit_timestamp_ms,omitempty"`
	// / Digest of consensus output
	ConsensusCommitDigest string `protobuf:"bytes,4,opt,name=consensus_commit_digest,json=consensusCommitDigest,proto3" json:"consensus_commit_digest,omitempty"`
}

func (x *ConsensusCommitPrologueV2) Reset() {
	*x = ConsensusCommitPrologueV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusCommitPrologueV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusCommitPrologueV2) ProtoMessage() {}

func (x *ConsensusCommitPrologueV2) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusCommitPrologueV2.ProtoReflect.Descriptor instead.
func (*ConsensusCommitPrologueV2) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{24}
}

func (x *ConsensusCommitPrologueV2) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ConsensusCommitPrologueV2) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *ConsensusCommitPrologueV2) GetCommitTimestampMs() uint64 {
	if x != nil {
		return x.CommitTimestampMs
	}
	return 0
}

func (x *ConsensusCommitPrologueV2) GetConsensusCommitDigest() string {
	if x != nil {
		return x.ConsensusCommitDigest
	}
	return ""
}

type RandomnessStateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Epoch of the randomness state update transaction
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// / Randomness round of the update
	RandomnessRound uint64 `protobuf:"varint,2,opt,name=randomness_round,json=randomnessRound,proto3" json:"randomness_round,omitempty"`
	// / Updated random bytes
	RandomBytes []byte `protobuf:"bytes,3,opt,name=random_bytes,json=randomBytes,proto3" json:"random_bytes,omitempty"`
	// / The initial version of the randomness object that it was shared at.
	RandomnessObjInitialSharedVersion uint64 `protobuf:"varint,4,opt,name=randomness_obj_initial_shared_version,json=randomnessObjInitialSharedVersion,proto3" json:"randomness_obj_initial_shared_version,omitempty"`
}

func (x *RandomnessStateUpdate) Reset() {
	*x = RandomnessStateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandomnessStateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandomnessStateUpdate) ProtoMessage() {}

func (x *RandomnessStateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandomnessStateUpdate.ProtoReflect.Descriptor instead.
func (*RandomnessStateUpdate) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{25}
}

func (x *RandomnessStateUpdate) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *RandomnessStateUpdate) GetRandomnessRound() uint64 {
	if x != nil {
		return x.RandomnessRound
	}
	return 0
}

func (x *RandomnessStateUpdate) GetRandomBytes() []byte {
	if x != nil {
		return x.RandomBytes
	}
	return nil
}

func (x *RandomnessStateUpdate) GetRandomnessObjInitialSharedVersion() uint64 {
	if x != nil {
		return x.RandomnessObjInitialSharedVersion
	}
	return 0
}

type EndOfEpochTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndOfEpochTransactionKind []*EndOfEpochTransactionKind `protobuf:"bytes,1,rep,name=end_of_epoch_transaction_kind,json=endOfEpochTransactionKind,proto3" json:"end_of_epoch_transaction_kind,omitempty"`
}

func (x *EndOfEpochTransaction) Reset() {
	*x = EndOfEpochTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndOfEpochTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndOfEpochTransaction) ProtoMessage() {}

func (x *EndOfEpochTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndOfEpochTransaction.ProtoReflect.Descriptor instead.
func (*EndOfEpochTransaction) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{26}
}

func (x *EndOfEpochTransaction) GetEndOfEpochTransactionKind() []*EndOfEpochTransactionKind {
	if x != nil {
		return x.EndOfEpochTransactionKind
	}
	return nil
}

type EndOfEpochTransactionKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*EndOfEpochTransactionKind_ChangeEpoch
	//	*EndOfEpochTransactionKind_AuthenticatorStateCreate
	//	*EndOfEpochTransactionKind_AuthenticatorStateExpire
	//	*EndOfEpochTransactionKind_RandomnessStateCreate
	//	*EndOfEpochTransactionKind_DenyListStateCreate
	Kind isEndOfEpochTransactionKind_Kind `protobuf_oneof:"kind"`
}

func (x *EndOfEpochTransactionKind) Reset() {
	*x = EndOfEpochTransactionKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndOfEpochTransactionKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndOfEpochTransactionKind) ProtoMessage() {}

func (x *EndOfEpochTransactionKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndOfEpochTransactionKind.ProtoReflect.Descriptor instead.
func (*EndOfEpochTransactionKind) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{27}
}

func (m *EndOfEpochTransactionKind) GetKind() isEndOfEpochTransactionKind_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *EndOfEpochTransactionKind) GetChangeEpoch() *ChangeEpoch {
	if x, ok := x.GetKind().(*EndOfEpochTransactionKind_ChangeEpoch); ok {
		return x.ChangeEpoch
	}
	return nil
}

func (x *EndOfEpochTransactionKind) GetAuthenticatorStateCreate() *emptypb.Empty {
	if x, ok := x.GetKind().(*EndOfEpochTransactionKind_AuthenticatorStateCreate); ok {
		return x.AuthenticatorStateCreate
	}
	return nil
}

func (x *EndOfEpochTransactionKind) GetAuthenticatorStateExpire() *AuthenticatorStateExpire {
	if x, ok := x.GetKind().(*EndOfEpochTransactionKind_AuthenticatorStateExpire); ok {
		return x.AuthenticatorStateExpire
	}
	return nil
}

func (x *EndOfEpochTransactionKind) GetRandomnessStateCreate() *emptypb.Empty {
	if x, ok := x.GetKind().(*EndOfEpochTransactionKind_RandomnessStateCreate); ok {
		return x.RandomnessStateCreate
	}
	return nil
}

func (x *EndOfEpochTransactionKind) GetDenyListStateCreate() *emptypb.Empty {
	if x, ok := x.GetKind().(*EndOfEpochTransactionKind_DenyListStateCreate); ok {
		return x.DenyListStateCreate
	}
	return nil
}

type isEndOfEpochTransactionKind_Kind interface {
	isEndOfEpochTransactionKind_Kind()
}

type EndOfEpochTransactionKind_ChangeEpoch struct {
	ChangeEpoch *ChangeEpoch `protobuf:"bytes,1,opt,name=change_epoch,json=changeEpoch,proto3,oneof"`
}

type EndOfEpochTransactionKind_AuthenticatorStateCreate struct {
	AuthenticatorStateCreate *emptypb.Empty `protobuf:"bytes,2,opt,name=authenticator_state_create,json=authenticatorStateCreate,proto3,oneof"`
}

type EndOfEpochTransactionKind_AuthenticatorStateExpire struct {
	AuthenticatorStateExpire *AuthenticatorStateExpire `protobuf:"bytes,3,opt,name=authenticator_state_expire,json=authenticatorStateExpire,proto3,oneof"`
}

type EndOfEpochTransactionKind_RandomnessStateCreate struct {
	RandomnessStateCreate *emptypb.Empty `protobuf:"bytes,4,opt,name=randomness_state_create,json=randomnessStateCreate,proto3,oneof"`
}

type EndOfEpochTransactionKind_DenyListStateCreate struct {
	DenyListStateCreate *emptypb.Empty `protobuf:"bytes,5,opt,name=deny_list_state_create,json=denyListStateCreate,proto3,oneof"`
}

func (*EndOfEpochTransactionKind_ChangeEpoch) isEndOfEpochTransactionKind_Kind() {}

func (*EndOfEpochTransactionKind_AuthenticatorStateCreate) isEndOfEpochTransactionKind_Kind() {}

func (*EndOfEpochTransactionKind_AuthenticatorStateExpire) isEndOfEpochTransactionKind_Kind() {}

func (*EndOfEpochTransactionKind_RandomnessStateCreate) isEndOfEpochTransactionKind_Kind() {}

func (*EndOfEpochTransactionKind_DenyListStateCreate) isEndOfEpochTransactionKind_Kind() {}

type AuthenticatorStateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Epoch of the authenticator state update transaction
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// / Consensus round of the authenticator state update
	Round uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	// / newly active jwks
	NewActiveJwks []*ActiveJwk `protobuf:"bytes,3,rep,name=new_active_jwks,json=newActiveJwks,proto3" json:"new_active_jwks,omitempty"`
	// / The initial version of the authenticator object that it was shared at.
	AuthenticatorObjInitialSharedVersion uint64 `protobuf:"varint,4,opt,name=authenticator_obj_initial_shared_version,json=authenticatorObjInitialSharedVersion,proto3" json:"authenticator_obj_initial_shared_version,omitempty"`
}

func (x *AuthenticatorStateUpdate) Reset() {
	*x = AuthenticatorStateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatorStateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatorStateUpdate) ProtoMessage() {}

func (x *AuthenticatorStateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatorStateUpdate.ProtoReflect.Descriptor instead.
func (*AuthenticatorStateUpdate) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{28}
}

func (x *AuthenticatorStateUpdate) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *AuthenticatorStateUpdate) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *AuthenticatorStateUpdate) GetNewActiveJwks() []*ActiveJwk {
	if x != nil {
		return x.NewActiveJwks
	}
	return nil
}

func (x *AuthenticatorStateUpdate) GetAuthenticatorObjInitialSharedVersion() uint64 {
	if x != nil {
		return x.AuthenticatorObjInitialSharedVersion
	}
	return 0
}

type ActiveJwk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JwkId *JwkId `protobuf:"bytes,1,opt,name=jwk_id,json=jwkId,proto3" json:"jwk_id,omitempty"`
	Jwk   *JWK   `protobuf:"bytes,2,opt,name=jwk,proto3" json:"jwk,omitempty"`
	// the most recent epoch in which the jwk was validated
	Epoch uint64 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (x *ActiveJwk) Reset() {
	*x = ActiveJwk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveJwk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveJwk) ProtoMessage() {}

func (x *ActiveJwk) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveJwk.ProtoReflect.Descriptor instead.
func (*ActiveJwk) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{29}
}

func (x *ActiveJwk) GetJwkId() *JwkId {
	if x != nil {
		return x.JwkId
	}
	return nil
}

func (x *ActiveJwk) GetJwk() *JWK {
	if x != nil {
		return x.Jwk
	}
	return nil
}

func (x *ActiveJwk) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

type JwkId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / iss string that identifies the OIDC provider.
	Iss string `protobuf:"bytes,1,opt,name=iss,proto3" json:"iss,omitempty"`
	// / kid string that identifies the JWK.
	Kid string `protobuf:"bytes,2,opt,name=kid,proto3" json:"kid,omitempty"`
}

func (x *JwkId) Reset() {
	*x = JwkId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwkId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwkId) ProtoMessage() {}

func (x *JwkId) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwkId.ProtoReflect.Descriptor instead.
func (*JwkId) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{30}
}

func (x *JwkId) GetIss() string {
	if x != nil {
		return x.Iss
	}
	return ""
}

func (x *JwkId) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

type JWK struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / Key type parameter, https://datatracker.ietf.org/doc/html/rfc7517#section-4.1
	Kty string `protobuf:"bytes,1,opt,name=kty,proto3" json:"kty,omitempty"`
	// / RSA public exponent, https://datatracker.ietf.org/doc/html/rfc7517#section-9.3
	E string `protobuf:"bytes,2,opt,name=e,proto3" json:"e,omitempty"`
	// / RSA modulus, https://datatracker.ietf.org/doc/html/rfc7517#section-9.3
	N string `protobuf:"bytes,3,opt,name=n,proto3" json:"n,omitempty"`
	// / Algorithm parameter, https://datatracker.ietf.org/doc/html/rfc7517#section-4.4
	Alg string `protobuf:"bytes,4,opt,name=alg,proto3" json:"alg,omitempty"`
}

func (x *JWK) Reset() {
	*x = JWK{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWK) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWK) ProtoMessage() {}

func (x *JWK) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWK.ProtoReflect.Descriptor instead.
func (*JWK) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{31}
}

func (x *JWK) GetKty() string {
	if x != nil {
		return x.Kty
	}
	return ""
}

func (x *JWK) GetE() string {
	if x != nil {
		return x.E
	}
	return ""
}

func (x *JWK) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

func (x *JWK) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

type AuthenticatorStateExpire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / expire JWKs that have a lower epoch than this
	MinEpoch uint64 `protobuf:"varint,1,opt,name=min_epoch,json=minEpoch,proto3" json:"min_epoch,omitempty"`
	// / The initial version of the authenticator object that it was shared at.
	AuthenticatorObjInitialSharedVersion uint64 `protobuf:"varint,2,opt,name=authenticator_obj_initial_shared_version,json=authenticatorObjInitialSharedVersion,proto3" json:"authenticator_obj_initial_shared_version,omitempty"`
}

func (x *AuthenticatorStateExpire) Reset() {
	*x = AuthenticatorStateExpire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticatorStateExpire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatorStateExpire) ProtoMessage() {}

func (x *AuthenticatorStateExpire) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatorStateExpire.ProtoReflect.Descriptor instead.
func (*AuthenticatorStateExpire) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{32}
}

func (x *AuthenticatorStateExpire) GetMinEpoch() uint64 {
	if x != nil {
		return x.MinEpoch
	}
	return 0
}

func (x *AuthenticatorStateExpire) GetAuthenticatorObjInitialSharedVersion() uint64 {
	if x != nil {
		return x.AuthenticatorObjInitialSharedVersion
	}
	return 0
}

type IndexedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxSequenceNumber         uint64    `protobuf:"varint,1,opt,name=tx_sequence_number,json=txSequenceNumber,proto3" json:"tx_sequence_number,omitempty"`
	EventSequenceNumber      uint64    `protobuf:"varint,2,opt,name=event_sequence_number,json=eventSequenceNumber,proto3" json:"event_sequence_number,omitempty"`
	CheckpointSequenceNumber uint64    `protobuf:"varint,3,opt,name=checkpoint_sequence_number,json=checkpointSequenceNumber,proto3" json:"checkpoint_sequence_number,omitempty"`
	TransactionDigest        string    `protobuf:"bytes,4,opt,name=transaction_digest,json=transactionDigest,proto3" json:"transaction_digest,omitempty"`
	Senders                  []string  `protobuf:"bytes,5,rep,name=senders,proto3" json:"senders,omitempty"`
	Package                  *ObjectID `protobuf:"bytes,6,opt,name=package,proto3" json:"package,omitempty"`
	Module                   string    `protobuf:"bytes,7,opt,name=module,proto3" json:"module,omitempty"`
	EventType                string    `protobuf:"bytes,8,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Bsc                      []byte    `protobuf:"bytes,9,opt,name=bsc,proto3" json:"bsc,omitempty"`
	TimestampMs              uint64    `protobuf:"varint,10,opt,name=timestamp_ms,json=timestampMs,proto3" json:"timestamp_ms,omitempty"`
}

func (x *IndexedEvent) Reset() {
	*x = IndexedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexedEvent) ProtoMessage() {}

func (x *IndexedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexedEvent.ProtoReflect.Descriptor instead.
func (*IndexedEvent) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{33}
}

func (x *IndexedEvent) GetTxSequenceNumber() uint64 {
	if x != nil {
		return x.TxSequenceNumber
	}
	return 0
}

func (x *IndexedEvent) GetEventSequenceNumber() uint64 {
	if x != nil {
		return x.EventSequenceNumber
	}
	return 0
}

func (x *IndexedEvent) GetCheckpointSequenceNumber() uint64 {
	if x != nil {
		return x.CheckpointSequenceNumber
	}
	return 0
}

func (x *IndexedEvent) GetTransactionDigest() string {
	if x != nil {
		return x.TransactionDigest
	}
	return ""
}

func (x *IndexedEvent) GetSenders() []string {
	if x != nil {
		return x.Senders
	}
	return nil
}

func (x *IndexedEvent) GetPackage() *ObjectID {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *IndexedEvent) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *IndexedEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *IndexedEvent) GetBsc() []byte {
	if x != nil {
		return x.Bsc
	}
	return nil
}

func (x *IndexedEvent) GetTimestampMs() uint64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

type TxIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxSequenceNumber         uint64              `protobuf:"varint,1,opt,name=tx_sequence_number,json=txSequenceNumber,proto3" json:"tx_sequence_number,omitempty"`
	TransactionDigest        string              `protobuf:"bytes,2,opt,name=transaction_digest,json=transactionDigest,proto3" json:"transaction_digest,omitempty"`
	CheckpointSequenceNumber uint64              `protobuf:"varint,3,opt,name=checkpoint_sequence_number,json=checkpointSequenceNumber,proto3" json:"checkpoint_sequence_number,omitempty"`
	InputObjects             []*ObjectID         `protobuf:"bytes,4,rep,name=input_objects,json=inputObjects,proto3" json:"input_objects,omitempty"`
	ChangedObjects           []*ObjectID         `protobuf:"bytes,5,rep,name=changed_objects,json=changedObjects,proto3" json:"changed_objects,omitempty"`
	Payers                   []string            `protobuf:"bytes,6,rep,name=payers,proto3" json:"payers,omitempty"`
	Senders                  []string            `protobuf:"bytes,7,rep,name=senders,proto3" json:"senders,omitempty"`
	Recipients               []string            `protobuf:"bytes,8,rep,name=recipients,proto3" json:"recipients,omitempty"`
	MoveCalls                []*MoveCallOverview `protobuf:"bytes,9,rep,name=move_calls,json=moveCalls,proto3" json:"move_calls,omitempty"`
}

func (x *TxIndex) Reset() {
	*x = TxIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxIndex) ProtoMessage() {}

func (x *TxIndex) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxIndex.ProtoReflect.Descriptor instead.
func (*TxIndex) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{34}
}

func (x *TxIndex) GetTxSequenceNumber() uint64 {
	if x != nil {
		return x.TxSequenceNumber
	}
	return 0
}

func (x *TxIndex) GetTransactionDigest() string {
	if x != nil {
		return x.TransactionDigest
	}
	return ""
}

func (x *TxIndex) GetCheckpointSequenceNumber() uint64 {
	if x != nil {
		return x.CheckpointSequenceNumber
	}
	return 0
}

func (x *TxIndex) GetInputObjects() []*ObjectID {
	if x != nil {
		return x.InputObjects
	}
	return nil
}

func (x *TxIndex) GetChangedObjects() []*ObjectID {
	if x != nil {
		return x.ChangedObjects
	}
	return nil
}

func (x *TxIndex) GetPayers() []string {
	if x != nil {
		return x.Payers
	}
	return nil
}

func (x *TxIndex) GetSenders() []string {
	if x != nil {
		return x.Senders
	}
	return nil
}

func (x *TxIndex) GetRecipients() []string {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (x *TxIndex) GetMoveCalls() []*MoveCallOverview {
	if x != nil {
		return x.MoveCalls
	}
	return nil
}

type MoveCallOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The package containing the module and function.
	Package *ObjectID `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	// The specific module in the package containing the function.
	Module string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	// The function to be called.
	Function string `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *MoveCallOverview) Reset() {
	*x = MoveCallOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveCallOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveCallOverview) ProtoMessage() {}

func (x *MoveCallOverview) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveCallOverview.ProtoReflect.Descriptor instead.
func (*MoveCallOverview) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{35}
}

func (x *MoveCallOverview) GetPackage() *ObjectID {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *MoveCallOverview) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *MoveCallOverview) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

type StoredDisplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectType string `protobuf:"bytes,1,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	Id         []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Version    int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Bcs        []byte `protobuf:"bytes,4,opt,name=bcs,proto3" json:"bcs,omitempty"`
}

func (x *StoredDisplay) Reset() {
	*x = StoredDisplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoredDisplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoredDisplay) ProtoMessage() {}

func (x *StoredDisplay) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoredDisplay.ProtoReflect.Descriptor instead.
func (*StoredDisplay) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{36}
}

func (x *StoredDisplay) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *StoredDisplay) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *StoredDisplay) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *StoredDisplay) GetBcs() []byte {
	if x != nil {
		return x.Bcs
	}
	return nil
}

type TransactionObjectChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangedObjects []*IndexedObject        `protobuf:"bytes,1,rep,name=changed_objects,json=changedObjects,proto3" json:"changed_objects,omitempty"`
	DeletedObjects []*IndexedDeletedObject `protobuf:"bytes,2,rep,name=deleted_objects,json=deletedObjects,proto3" json:"deleted_objects,omitempty"`
}

func (x *TransactionObjectChange) Reset() {
	*x = TransactionObjectChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionObjectChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionObjectChange) ProtoMessage() {}

func (x *TransactionObjectChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionObjectChange.ProtoReflect.Descriptor instead.
func (*TransactionObjectChange) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{37}
}

func (x *TransactionObjectChange) GetChangedObjects() []*IndexedObject {
	if x != nil {
		return x.ChangedObjects
	}
	return nil
}

func (x *TransactionObjectChange) GetDeletedObjects() []*IndexedDeletedObject {
	if x != nil {
		return x.DeletedObjects
	}
	return nil
}

type IndexedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId                 *ObjectID  `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	ObjectVersion            uint64     `protobuf:"varint,2,opt,name=object_version,json=objectVersion,proto3" json:"object_version,omitempty"`
	ObjectDigest             string     `protobuf:"bytes,3,opt,name=object_digest,json=objectDigest,proto3" json:"object_digest,omitempty"`
	CheckpointSequenceNumber uint64     `protobuf:"varint,4,opt,name=checkpoint_sequence_number,json=checkpointSequenceNumber,proto3" json:"checkpoint_sequence_number,omitempty"`
	TxDigest                 string     `protobuf:"bytes,5,opt,name=tx_digest,json=txDigest,proto3" json:"tx_digest,omitempty"`
	OwnerType                *OwnerType `protobuf:"bytes,6,opt,name=owner_type,json=ownerType,proto3" json:"owner_type,omitempty"`
	OwnerId                  *string    `protobuf:"bytes,7,opt,name=owner_id,json=ownerId,proto3,oneof" json:"owner_id,omitempty"`
	Object                   *Object    `protobuf:"bytes,8,opt,name=object,proto3" json:"object,omitempty"`
	CoinType                 *string    `protobuf:"bytes,9,opt,name=coin_type,json=coinType,proto3,oneof" json:"coin_type,omitempty"`
	CoinBalance              *uint64    `protobuf:"varint,10,opt,name=coin_balance,json=coinBalance,proto3,oneof" json:"coin_balance,omitempty"`
}

func (x *IndexedObject) Reset() {
	*x = IndexedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexedObject) ProtoMessage() {}

func (x *IndexedObject) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexedObject.ProtoReflect.Descriptor instead.
func (*IndexedObject) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{38}
}

func (x *IndexedObject) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *IndexedObject) GetObjectVersion() uint64 {
	if x != nil {
		return x.ObjectVersion
	}
	return 0
}

func (x *IndexedObject) GetObjectDigest() string {
	if x != nil {
		return x.ObjectDigest
	}
	return ""
}

func (x *IndexedObject) GetCheckpointSequenceNumber() uint64 {
	if x != nil {
		return x.CheckpointSequenceNumber
	}
	return 0
}

func (x *IndexedObject) GetTxDigest() string {
	if x != nil {
		return x.TxDigest
	}
	return ""
}

func (x *IndexedObject) GetOwnerType() *OwnerType {
	if x != nil {
		return x.OwnerType
	}
	return nil
}

func (x *IndexedObject) GetOwnerId() string {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return ""
}

func (x *IndexedObject) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *IndexedObject) GetCoinType() string {
	if x != nil && x.CoinType != nil {
		return *x.CoinType
	}
	return ""
}

func (x *IndexedObject) GetCoinBalance() uint64 {
	if x != nil && x.CoinBalance != nil {
		return *x.CoinBalance
	}
	return 0
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The meat of the object
	Data *Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// / The owner that unlocks this object
	Owner *Owner `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// / The digest of the transaction that created or last mutated this object
	PreviousTransaction string `protobuf:"bytes,3,opt,name=previous_transaction,json=previousTransaction,proto3" json:"previous_transaction,omitempty"`
	// / The amount of SUI we would rebate if this object gets deleted.
	// / This number is re-calculated each time the object is mutated based on
	// / the present storage gas price.
	StorageRebate uint64 `protobuf:"varint,4,opt,name=storage_rebate,json=storageRebate,proto3" json:"storage_rebate,omitempty"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{39}
}

func (x *Object) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Object) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Object) GetPreviousTransaction() string {
	if x != nil {
		return x.PreviousTransaction
	}
	return ""
}

func (x *Object) GetStorageRebate() uint64 {
	if x != nil {
		return x.StorageRebate
	}
	return 0
}

type OwnerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OwnerType:
	//
	//	*OwnerType_Immutable
	//	*OwnerType_Address
	//	*OwnerType_Object
	//	*OwnerType_Shared
	OwnerType isOwnerType_OwnerType `protobuf_oneof:"owner_type"`
}

func (x *OwnerType) Reset() {
	*x = OwnerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnerType) ProtoMessage() {}

func (x *OwnerType) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnerType.ProtoReflect.Descriptor instead.
func (*OwnerType) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{40}
}

func (m *OwnerType) GetOwnerType() isOwnerType_OwnerType {
	if m != nil {
		return m.OwnerType
	}
	return nil
}

func (x *OwnerType) GetImmutable() *emptypb.Empty {
	if x, ok := x.GetOwnerType().(*OwnerType_Immutable); ok {
		return x.Immutable
	}
	return nil
}

func (x *OwnerType) GetAddress() *emptypb.Empty {
	if x, ok := x.GetOwnerType().(*OwnerType_Address); ok {
		return x.Address
	}
	return nil
}

func (x *OwnerType) GetObject() *emptypb.Empty {
	if x, ok := x.GetOwnerType().(*OwnerType_Object); ok {
		return x.Object
	}
	return nil
}

func (x *OwnerType) GetShared() *emptypb.Empty {
	if x, ok := x.GetOwnerType().(*OwnerType_Shared); ok {
		return x.Shared
	}
	return nil
}

type isOwnerType_OwnerType interface {
	isOwnerType_OwnerType()
}

type OwnerType_Immutable struct {
	Immutable *emptypb.Empty `protobuf:"bytes,1,opt,name=immutable,proto3,oneof"`
}

type OwnerType_Address struct {
	Address *emptypb.Empty `protobuf:"bytes,2,opt,name=address,proto3,oneof"`
}

type OwnerType_Object struct {
	Object *emptypb.Empty `protobuf:"bytes,3,opt,name=object,proto3,oneof"`
}

type OwnerType_Shared struct {
	Shared *emptypb.Empty `protobuf:"bytes,4,opt,name=shared,proto3,oneof"`
}

func (*OwnerType_Immutable) isOwnerType_OwnerType() {}

func (*OwnerType_Address) isOwnerType_OwnerType() {}

func (*OwnerType_Object) isOwnerType_OwnerType() {}

func (*OwnerType_Shared) isOwnerType_OwnerType() {}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*Data_Move
	//	*Data_Package
	Data isData_Data `protobuf_oneof:"data"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{41}
}

func (m *Data) GetData() isData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Data) GetMove() *MoveObject {
	if x, ok := x.GetData().(*Data_Move); ok {
		return x.Move
	}
	return nil
}

func (x *Data) GetPackage() *MovePackage {
	if x, ok := x.GetData().(*Data_Package); ok {
		return x.Package
	}
	return nil
}

type isData_Data interface {
	isData_Data()
}

type Data_Move struct {
	Move *MoveObject `protobuf:"bytes,1,opt,name=move,proto3,oneof"`
}

type Data_Package struct {
	Package *MovePackage `protobuf:"bytes,2,opt,name=package,proto3,oneof"`
}

func (*Data_Move) isData_Data() {}

func (*Data_Package) isData_Data() {}

type MoveObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// / The type of this object. Immutable
	Type *MoveObjectType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// / DEPRECATED this field is no longer used to determine whether a tx can transfer this
	// / object. Instead, it is always calculated from the objects type when loaded in execution
	HasPublicTransfer bool `protobuf:"varint,2,opt,name=has_public_transfer,json=hasPublicTransfer,proto3" json:"has_public_transfer,omitempty"`
	// / Number that increases each time a tx takes this object as a mutable input
	// / This is a lamport timestamp, not a sequentially increasing version
	Version  uint64 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Contents []byte `protobuf:"bytes,4,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *MoveObject) Reset() {
	*x = MoveObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveObject) ProtoMessage() {}

func (x *MoveObject) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveObject.ProtoReflect.Descriptor instead.
func (*MoveObject) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{42}
}

func (x *MoveObject) GetType() *MoveObjectType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MoveObject) GetHasPublicTransfer() bool {
	if x != nil {
		return x.HasPublicTransfer
	}
	return false
}

func (x *MoveObject) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MoveObject) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type MovePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *ObjectID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// / Most move packages are uniquely identified by their ID (i.e. there is only one version per
	// / ID), but the version is still stored because one package may be an upgrade of another (at a
	// / different ID), in which case its version will be one greater than the version of the
	// / upgraded package.
	// /
	// / Framework packages are an exception to this rule -- all versions of the framework packages
	// / exist at the same ID, at increasing versions.
	// /
	// / In all cases, packages are referred to by move calls using just their ID, and they are
	// / always loaded at their latest version.
	Version   uint64            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	ModuleMap map[string][]byte `protobuf:"bytes,3,rep,name=module_map,json=moduleMap,proto3" json:"module_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// / Maps struct/module to a package version where it was first defined, stored as a vector for
	// / simple serialization and deserialization.
	TypeOriginTable []*TypeOrigin `protobuf:"bytes,4,rep,name=type_origin_table,json=typeOriginTable,proto3" json:"type_origin_table,omitempty"`
	// For each dependency, maps original package ID to the info about the (upgraded) dependency
	// version that this package is using
	LinkageTable []*LinkageTablePair `protobuf:"bytes,5,rep,name=linkage_table,json=linkageTable,proto3" json:"linkage_table,omitempty"`
}

func (x *MovePackage) Reset() {
	*x = MovePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovePackage) ProtoMessage() {}

func (x *MovePackage) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovePackage.ProtoReflect.Descriptor instead.
func (*MovePackage) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{43}
}

func (x *MovePackage) GetId() *ObjectID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MovePackage) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MovePackage) GetModuleMap() map[string][]byte {
	if x != nil {
		return x.ModuleMap
	}
	return nil
}

func (x *MovePackage) GetTypeOriginTable() []*TypeOrigin {
	if x != nil {
		return x.TypeOriginTable
	}
	return nil
}

func (x *MovePackage) GetLinkageTable() []*LinkageTablePair {
	if x != nil {
		return x.LinkageTable
	}
	return nil
}

type LinkageTablePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *ObjectID    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *UpgradeInfo `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LinkageTablePair) Reset() {
	*x = LinkageTablePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkageTablePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkageTablePair) ProtoMessage() {}

func (x *LinkageTablePair) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkageTablePair.ProtoReflect.Descriptor instead.
func (*LinkageTablePair) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{44}
}

func (x *LinkageTablePair) GetKey() *ObjectID {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *LinkageTablePair) GetValue() *UpgradeInfo {
	if x != nil {
		return x.Value
	}
	return nil
}

type DynamicFieldInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *DynamicFieldName `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BcsName    []byte            `protobuf:"bytes,2,opt,name=bcs_name,json=bcsName,proto3" json:"bcs_name,omitempty"`
	Type       *DynamicFieldType `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ObjectType string            `protobuf:"bytes,4,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	ObjectId   *ObjectID         `protobuf:"bytes,5,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Version    uint64            `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	Digest     string            `protobuf:"bytes,7,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *DynamicFieldInfo) Reset() {
	*x = DynamicFieldInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicFieldInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicFieldInfo) ProtoMessage() {}

func (x *DynamicFieldInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicFieldInfo.ProtoReflect.Descriptor instead.
func (*DynamicFieldInfo) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{45}
}

func (x *DynamicFieldInfo) GetName() *DynamicFieldName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DynamicFieldInfo) GetBcsName() []byte {
	if x != nil {
		return x.BcsName
	}
	return nil
}

func (x *DynamicFieldInfo) GetType() *DynamicFieldType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DynamicFieldInfo) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *DynamicFieldInfo) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *DynamicFieldInfo) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DynamicFieldInfo) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type DynamicFieldName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *TypeTag `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value *Value   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DynamicFieldName) Reset() {
	*x = DynamicFieldName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicFieldName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicFieldName) ProtoMessage() {}

func (x *DynamicFieldName) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicFieldName.ProtoReflect.Descriptor instead.
func (*DynamicFieldName) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{46}
}

func (x *DynamicFieldName) GetType() *TypeTag {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DynamicFieldName) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type DynamicFieldType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DynamicFieldType:
	//
	//	*DynamicFieldType_DynamicField
	//	*DynamicFieldType_DynamicObject
	DynamicFieldType isDynamicFieldType_DynamicFieldType `protobuf_oneof:"dynamic_field_type"`
}

func (x *DynamicFieldType) Reset() {
	*x = DynamicFieldType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicFieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicFieldType) ProtoMessage() {}

func (x *DynamicFieldType) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicFieldType.ProtoReflect.Descriptor instead.
func (*DynamicFieldType) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{47}
}

func (m *DynamicFieldType) GetDynamicFieldType() isDynamicFieldType_DynamicFieldType {
	if m != nil {
		return m.DynamicFieldType
	}
	return nil
}

func (x *DynamicFieldType) GetDynamicField() *emptypb.Empty {
	if x, ok := x.GetDynamicFieldType().(*DynamicFieldType_DynamicField); ok {
		return x.DynamicField
	}
	return nil
}

func (x *DynamicFieldType) GetDynamicObject() *emptypb.Empty {
	if x, ok := x.GetDynamicFieldType().(*DynamicFieldType_DynamicObject); ok {
		return x.DynamicObject
	}
	return nil
}

type isDynamicFieldType_DynamicFieldType interface {
	isDynamicFieldType_DynamicFieldType()
}

type DynamicFieldType_DynamicField struct {
	DynamicField *emptypb.Empty `protobuf:"bytes,1,opt,name=dynamic_field,json=dynamicField,proto3,oneof"`
}

type DynamicFieldType_DynamicObject struct {
	DynamicObject *emptypb.Empty `protobuf:"bytes,2,opt,name=dynamic_object,json=dynamicObject,proto3,oneof"`
}

func (*DynamicFieldType_DynamicField) isDynamicFieldType_DynamicFieldType() {}

func (*DynamicFieldType_DynamicObject) isDynamicFieldType_DynamicFieldType() {}

type IndexedDeletedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId                 *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	ObjectVersion            uint64    `protobuf:"varint,2,opt,name=object_version,json=objectVersion,proto3" json:"object_version,omitempty"`
	CheckpointSequenceNumber uint64    `protobuf:"varint,3,opt,name=checkpoint_sequence_number,json=checkpointSequenceNumber,proto3" json:"checkpoint_sequence_number,omitempty"`
	TxDigest                 string    `protobuf:"bytes,4,opt,name=tx_digest,json=txDigest,proto3" json:"tx_digest,omitempty"`
}

func (x *IndexedDeletedObject) Reset() {
	*x = IndexedDeletedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexedDeletedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexedDeletedObject) ProtoMessage() {}

func (x *IndexedDeletedObject) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexedDeletedObject.ProtoReflect.Descriptor instead.
func (*IndexedDeletedObject) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{48}
}

func (x *IndexedDeletedObject) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *IndexedDeletedObject) GetObjectVersion() uint64 {
	if x != nil {
		return x.ObjectVersion
	}
	return 0
}

func (x *IndexedDeletedObject) GetCheckpointSequenceNumber() uint64 {
	if x != nil {
		return x.CheckpointSequenceNumber
	}
	return 0
}

func (x *IndexedDeletedObject) GetTxDigest() string {
	if x != nil {
		return x.TxDigest
	}
	return ""
}

type IndexedPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId                *ObjectID    `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	MovePackage              *MovePackage `protobuf:"bytes,2,opt,name=move_package,json=movePackage,proto3" json:"move_package,omitempty"`
	CheckpointSequenceNumber uint64       `protobuf:"varint,3,opt,name=checkpoint_sequence_number,json=checkpointSequenceNumber,proto3" json:"checkpoint_sequence_number,omitempty"`
}

func (x *IndexedPackage) Reset() {
	*x = IndexedPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexedPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexedPackage) ProtoMessage() {}

func (x *IndexedPackage) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexedPackage.ProtoReflect.Descriptor instead.
func (*IndexedPackage) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{49}
}

func (x *IndexedPackage) GetPackageId() *ObjectID {
	if x != nil {
		return x.PackageId
	}
	return nil
}

func (x *IndexedPackage) GetMovePackage() *MovePackage {
	if x != nil {
		return x.MovePackage
	}
	return nil
}

func (x *IndexedPackage) GetCheckpointSequenceNumber() uint64 {
	if x != nil {
		return x.CheckpointSequenceNumber
	}
	return 0
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Value_Null
	//	*Value_Bool
	//	*Value_Number
	//	*Value_String_
	//	*Value_Array
	//	*Value_Object
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{50}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetNull() *emptypb.Empty {
	if x, ok := x.GetValue().(*Value_Null); ok {
		return x.Null
	}
	return nil
}

func (x *Value) GetBool() bool {
	if x, ok := x.GetValue().(*Value_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *Value) GetNumber() string {
	if x, ok := x.GetValue().(*Value_Number); ok {
		return x.Number
	}
	return ""
}

func (x *Value) GetString_() string {
	if x, ok := x.GetValue().(*Value_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Value) GetArray() *ListOfValues {
	if x, ok := x.GetValue().(*Value_Array); ok {
		return x.Array
	}
	return nil
}

func (x *Value) GetObject() *ValueMap {
	if x, ok := x.GetValue().(*Value_Object); ok {
		return x.Object
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_Null struct {
	Null *emptypb.Empty `protobuf:"bytes,1,opt,name=null,proto3,oneof"`
}

type Value_Bool struct {
	Bool bool `protobuf:"varint,2,opt,name=bool,proto3,oneof"`
}

type Value_Number struct {
	Number string `protobuf:"bytes,3,opt,name=number,proto3,oneof"`
}

type Value_String_ struct {
	String_ string `protobuf:"bytes,4,opt,name=string,proto3,oneof"`
}

type Value_Array struct {
	Array *ListOfValues `protobuf:"bytes,5,opt,name=array,proto3,oneof"`
}

type Value_Object struct {
	Object *ValueMap `protobuf:"bytes,6,opt,name=object,proto3,oneof"`
}

func (*Value_Null) isValue_Value() {}

func (*Value_Bool) isValue_Value() {}

func (*Value_Number) isValue_Value() {}

func (*Value_String_) isValue_Value() {}

func (*Value_Array) isValue_Value() {}

func (*Value_Object) isValue_Value() {}

type ValueMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[string]*Value `protobuf:"bytes,6,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValueMap) Reset() {
	*x = ValueMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueMap) ProtoMessage() {}

func (x *ValueMap) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueMap.ProtoReflect.Descriptor instead.
func (*ValueMap) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{51}
}

func (x *ValueMap) GetMap() map[string]*Value {
	if x != nil {
		return x.Map
	}
	return nil
}

type ListOfValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Value `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListOfValues) Reset() {
	*x = ListOfValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfValues) ProtoMessage() {}

func (x *ListOfValues) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfValues.ProtoReflect.Descriptor instead.
func (*ListOfValues) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{52}
}

func (x *ListOfValues) GetList() []*Value {
	if x != nil {
		return x.List
	}
	return nil
}

type EndOfEpochData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// next_epoch_committee is `Some` if and only if the current checkpoint is
	// the last checkpoint of an epoch.
	// Therefore next_epoch_committee can be used to pick the last checkpoint of an epoch,
	// which is often useful to get epoch level summary stats like total gas cost of an epoch,
	// or the total number of transactions from genesis to the end of an epoch.
	// he committee is stored as a vector of validator pub key and stake pairs. The vector
	// should be sorted based on the Committee data structure.
	NextEpochCommittee []*NextEpochCommittee `protobuf:"bytes,1,rep,name=next_epoch_committee,json=nextEpochCommittee,proto3" json:"next_epoch_committee,omitempty"`
	// The protocol version that is in effect during the epoch that starts immediately after this checkpoint.
	NextEpochProtocolVersion uint64 `protobuf:"varint,2,opt,name=next_epoch_protocol_version,json=nextEpochProtocolVersion,proto3" json:"next_epoch_protocol_version,omitempty"`
	// Commitments to epoch specific state (e.g. live object set)
	EpochCommitments []*CheckpointCommitment `protobuf:"bytes,3,rep,name=epoch_commitments,json=epochCommitments,proto3" json:"epoch_commitments,omitempty"`
}

func (x *EndOfEpochData) Reset() {
	*x = EndOfEpochData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndOfEpochData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndOfEpochData) ProtoMessage() {}

func (x *EndOfEpochData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndOfEpochData.ProtoReflect.Descriptor instead.
func (*EndOfEpochData) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{53}
}

func (x *EndOfEpochData) GetNextEpochCommittee() []*NextEpochCommittee {
	if x != nil {
		return x.NextEpochCommittee
	}
	return nil
}

func (x *EndOfEpochData) GetNextEpochProtocolVersion() uint64 {
	if x != nil {
		return x.NextEpochProtocolVersion
	}
	return 0
}

func (x *EndOfEpochData) GetEpochCommitments() []*CheckpointCommitment {
	if x != nil {
		return x.EpochCommitments
	}
	return nil
}

type NextEpochCommittee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base64 value
	AuthorityName string `protobuf:"bytes,1,opt,name=authority_name,json=authorityName,proto3" json:"authority_name,omitempty"`
	StakeUnit     uint64 `protobuf:"varint,2,opt,name=stake_unit,json=stakeUnit,proto3" json:"stake_unit,omitempty"`
}

func (x *NextEpochCommittee) Reset() {
	*x = NextEpochCommittee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextEpochCommittee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextEpochCommittee) ProtoMessage() {}

func (x *NextEpochCommittee) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextEpochCommittee.ProtoReflect.Descriptor instead.
func (*NextEpochCommittee) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{54}
}

func (x *NextEpochCommittee) GetAuthorityName() string {
	if x != nil {
		return x.AuthorityName
	}
	return ""
}

func (x *NextEpochCommittee) GetStakeUnit() uint64 {
	if x != nil {
		return x.StakeUnit
	}
	return 0
}

type CheckpointCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CheckpointCommitment:
	//
	//	*CheckpointCommitment_ECMHLiveObjectSetDigest
	CheckpointCommitment isCheckpointCommitment_CheckpointCommitment `protobuf_oneof:"checkpoint_commitment"`
}

func (x *CheckpointCommitment) Reset() {
	*x = CheckpointCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckpointCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointCommitment) ProtoMessage() {}

func (x *CheckpointCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointCommitment.ProtoReflect.Descriptor instead.
func (*CheckpointCommitment) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{55}
}

func (m *CheckpointCommitment) GetCheckpointCommitment() isCheckpointCommitment_CheckpointCommitment {
	if m != nil {
		return m.CheckpointCommitment
	}
	return nil
}

func (x *CheckpointCommitment) GetECMHLiveObjectSetDigest() *ECMHLiveObjectSetDigest {
	if x, ok := x.GetCheckpointCommitment().(*CheckpointCommitment_ECMHLiveObjectSetDigest); ok {
		return x.ECMHLiveObjectSetDigest
	}
	return nil
}

type isCheckpointCommitment_CheckpointCommitment interface {
	isCheckpointCommitment_CheckpointCommitment()
}

type CheckpointCommitment_ECMHLiveObjectSetDigest struct {
	ECMHLiveObjectSetDigest *ECMHLiveObjectSetDigest `protobuf:"bytes,1,opt,name=ECMH_live_object_set_digest,json=ECMHLiveObjectSetDigest,proto3,oneof"`
}

func (*CheckpointCommitment_ECMHLiveObjectSetDigest) isCheckpointCommitment_CheckpointCommitment() {}

type ECMHLiveObjectSetDigest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base58 encoded
	Digest string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *ECMHLiveObjectSetDigest) Reset() {
	*x = ECMHLiveObjectSetDigest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECMHLiveObjectSetDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECMHLiveObjectSetDigest) ProtoMessage() {}

func (x *ECMHLiveObjectSetDigest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECMHLiveObjectSetDigest.ProtoReflect.Descriptor instead.
func (*ECMHLiveObjectSetDigest) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{56}
}

func (x *ECMHLiveObjectSetDigest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type TransactionBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TransactionBlockData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TransactionBlock) Reset() {
	*x = TransactionBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBlock) ProtoMessage() {}

func (x *TransactionBlock) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBlock.ProtoReflect.Descriptor instead.
func (*TransactionBlock) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{57}
}

func (x *TransactionBlock) GetData() *TransactionBlockData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TransactionBlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiTransactionBlockData:
	//
	//	*TransactionBlockData_V1
	SuiTransactionBlockData isTransactionBlockData_SuiTransactionBlockData `protobuf_oneof:"sui_transaction_block_data"`
}

func (x *TransactionBlockData) Reset() {
	*x = TransactionBlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBlockData) ProtoMessage() {}

func (x *TransactionBlockData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBlockData.ProtoReflect.Descriptor instead.
func (*TransactionBlockData) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{58}
}

func (m *TransactionBlockData) GetSuiTransactionBlockData() isTransactionBlockData_SuiTransactionBlockData {
	if m != nil {
		return m.SuiTransactionBlockData
	}
	return nil
}

func (x *TransactionBlockData) GetV1() *TransactionBlockDataV1 {
	if x, ok := x.GetSuiTransactionBlockData().(*TransactionBlockData_V1); ok {
		return x.V1
	}
	return nil
}

type isTransactionBlockData_SuiTransactionBlockData interface {
	isTransactionBlockData_SuiTransactionBlockData()
}

type TransactionBlockData_V1 struct {
	V1 *TransactionBlockDataV1 `protobuf:"bytes,1,opt,name=v1,proto3,oneof"`
}

func (*TransactionBlockData_V1) isTransactionBlockData_SuiTransactionBlockData() {}

type TransactionBlockDataV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *TransactionBlockKind `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Sender      string                `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	GasData     *GasData              `protobuf:"bytes,3,opt,name=gas_data,json=gasData,proto3" json:"gas_data,omitempty"`
}

func (x *TransactionBlockDataV1) Reset() {
	*x = TransactionBlockDataV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBlockDataV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBlockDataV1) ProtoMessage() {}

func (x *TransactionBlockDataV1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBlockDataV1.ProtoReflect.Descriptor instead.
func (*TransactionBlockDataV1) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{59}
}

func (x *TransactionBlockDataV1) GetTransaction() *TransactionBlockKind {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionBlockDataV1) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *TransactionBlockDataV1) GetGasData() *GasData {
	if x != nil {
		return x.GasData
	}
	return nil
}

type TransactionBlockKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiTransactionBlockKind:
	//
	//	*TransactionBlockKind_ChangeEpoch
	//	*TransactionBlockKind_Genesis
	//	*TransactionBlockKind_ConsensusCommitPrologue
	//	*TransactionBlockKind_ProgrammableTransaction
	SuiTransactionBlockKind isTransactionBlockKind_SuiTransactionBlockKind `protobuf_oneof:"sui_transaction_block_kind"`
}

func (x *TransactionBlockKind) Reset() {
	*x = TransactionBlockKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBlockKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBlockKind) ProtoMessage() {}

func (x *TransactionBlockKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBlockKind.ProtoReflect.Descriptor instead.
func (*TransactionBlockKind) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{60}
}

func (m *TransactionBlockKind) GetSuiTransactionBlockKind() isTransactionBlockKind_SuiTransactionBlockKind {
	if m != nil {
		return m.SuiTransactionBlockKind
	}
	return nil
}

func (x *TransactionBlockKind) GetChangeEpoch() *ChangeEpoch {
	if x, ok := x.GetSuiTransactionBlockKind().(*TransactionBlockKind_ChangeEpoch); ok {
		return x.ChangeEpoch
	}
	return nil
}

func (x *TransactionBlockKind) GetGenesis() *GenesisTransaction {
	if x, ok := x.GetSuiTransactionBlockKind().(*TransactionBlockKind_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (x *TransactionBlockKind) GetConsensusCommitPrologue() *ConsensusCommitPrologue {
	if x, ok := x.GetSuiTransactionBlockKind().(*TransactionBlockKind_ConsensusCommitPrologue); ok {
		return x.ConsensusCommitPrologue
	}
	return nil
}

func (x *TransactionBlockKind) GetProgrammableTransaction() *ProgrammableTransaction {
	if x, ok := x.GetSuiTransactionBlockKind().(*TransactionBlockKind_ProgrammableTransaction); ok {
		return x.ProgrammableTransaction
	}
	return nil
}

type isTransactionBlockKind_SuiTransactionBlockKind interface {
	isTransactionBlockKind_SuiTransactionBlockKind()
}

type TransactionBlockKind_ChangeEpoch struct {
	// A system transaction that will update epoch information on-chain.
	ChangeEpoch *ChangeEpoch `protobuf:"bytes,1,opt,name=change_epoch,json=changeEpoch,proto3,oneof"`
}

type TransactionBlockKind_Genesis struct {
	// A system transaction used for initializing the initial state of the chain.
	Genesis *GenesisTransaction `protobuf:"bytes,2,opt,name=genesis,proto3,oneof"`
}

type TransactionBlockKind_ConsensusCommitPrologue struct {
	// A system transaction marking the start of a series of transactions scheduled as part of a checkpoint
	ConsensusCommitPrologue *ConsensusCommitPrologue `protobuf:"bytes,3,opt,name=consensus_commit_prologue,json=consensusCommitPrologue,proto3,oneof"`
}

type TransactionBlockKind_ProgrammableTransaction struct {
	// A series of transactions where the results of one transaction can be used in future transactions
	ProgrammableTransaction *ProgrammableTransaction `protobuf:"bytes,4,opt,name=programmable_transaction,json=programmableTransaction,proto3,oneof"`
}

func (*TransactionBlockKind_ChangeEpoch) isTransactionBlockKind_SuiTransactionBlockKind() {}

func (*TransactionBlockKind_Genesis) isTransactionBlockKind_SuiTransactionBlockKind() {}

func (*TransactionBlockKind_ConsensusCommitPrologue) isTransactionBlockKind_SuiTransactionBlockKind() {
}

func (*TransactionBlockKind_ProgrammableTransaction) isTransactionBlockKind_SuiTransactionBlockKind() {
}

type GasData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payment []*ObjectRef `protobuf:"bytes,1,rep,name=payment,proto3" json:"payment,omitempty"`
	Owner   string       `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Price   uint64       `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Budget  uint64       `protobuf:"varint,4,opt,name=budget,proto3" json:"budget,omitempty"`
}

func (x *GasData) Reset() {
	*x = GasData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasData) ProtoMessage() {}

func (x *GasData) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasData.ProtoReflect.Descriptor instead.
func (*GasData) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{61}
}

func (x *GasData) GetPayment() []*ObjectRef {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *GasData) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GasData) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GasData) GetBudget() uint64 {
	if x != nil {
		return x.Budget
	}
	return 0
}

type ObjectRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hex code as string representing the object id
	ObjectId *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Object version.
	SequenceNumber uint64 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Base58 string representing the object digest
	Digest string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *ObjectRef) Reset() {
	*x = ObjectRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectRef) ProtoMessage() {}

func (x *ObjectRef) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectRef.ProtoReflect.Descriptor instead.
func (*ObjectRef) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{62}
}

func (x *ObjectRef) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ObjectRef) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ObjectRef) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type ChangeEpoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch                 uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	StorageCharge         uint64 `protobuf:"varint,2,opt,name=storage_charge,json=storageCharge,proto3" json:"storage_charge,omitempty"`
	ComputationCharge     uint64 `protobuf:"varint,3,opt,name=computation_charge,json=computationCharge,proto3" json:"computation_charge,omitempty"`
	StorageRebate         uint64 `protobuf:"varint,4,opt,name=storage_rebate,json=storageRebate,proto3" json:"storage_rebate,omitempty"`
	EpochStartTimestampMs uint64 `protobuf:"varint,5,opt,name=epoch_start_timestamp_ms,json=epochStartTimestampMs,proto3" json:"epoch_start_timestamp_ms,omitempty"`
}

func (x *ChangeEpoch) Reset() {
	*x = ChangeEpoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEpoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEpoch) ProtoMessage() {}

func (x *ChangeEpoch) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEpoch.ProtoReflect.Descriptor instead.
func (*ChangeEpoch) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{63}
}

func (x *ChangeEpoch) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ChangeEpoch) GetStorageCharge() uint64 {
	if x != nil {
		return x.StorageCharge
	}
	return 0
}

func (x *ChangeEpoch) GetComputationCharge() uint64 {
	if x != nil {
		return x.ComputationCharge
	}
	return 0
}

func (x *ChangeEpoch) GetStorageRebate() uint64 {
	if x != nil {
		return x.StorageRebate
	}
	return 0
}

func (x *ChangeEpoch) GetEpochStartTimestampMs() uint64 {
	if x != nil {
		return x.EpochStartTimestampMs
	}
	return 0
}

type GenesisTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*GenesisObject `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *GenesisTransaction) Reset() {
	*x = GenesisTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisTransaction) ProtoMessage() {}

func (x *GenesisTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisTransaction.ProtoReflect.Descriptor instead.
func (*GenesisTransaction) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{64}
}

func (x *GenesisTransaction) GetObjects() []*GenesisObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

type GenesisObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to GenesisObject:
	//
	//	*GenesisObject_RawObject_
	GenesisObject isGenesisObject_GenesisObject `protobuf_oneof:"genesis_object"`
}

func (x *GenesisObject) Reset() {
	*x = GenesisObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisObject) ProtoMessage() {}

func (x *GenesisObject) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisObject.ProtoReflect.Descriptor instead.
func (*GenesisObject) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{65}
}

func (m *GenesisObject) GetGenesisObject() isGenesisObject_GenesisObject {
	if m != nil {
		return m.GenesisObject
	}
	return nil
}

func (x *GenesisObject) GetRawObject() *GenesisObject_RawObject {
	if x, ok := x.GetGenesisObject().(*GenesisObject_RawObject_); ok {
		return x.RawObject
	}
	return nil
}

type isGenesisObject_GenesisObject interface {
	isGenesisObject_GenesisObject()
}

type GenesisObject_RawObject_ struct {
	RawObject *GenesisObject_RawObject `protobuf:"bytes,1,opt,name=raw_object,json=rawObject,proto3,oneof"`
}

func (*GenesisObject_RawObject_) isGenesisObject_GenesisObject() {}

type ObjectID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountAddress string `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
}

func (x *ObjectID) Reset() {
	*x = ObjectID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectID) ProtoMessage() {}

func (x *ObjectID) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectID.ProtoReflect.Descriptor instead.
func (*ObjectID) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{66}
}

func (x *ObjectID) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

type ConsensusCommitPrologue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Epoch             uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round             uint64 `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	CommitTimestampMs uint64 `protobuf:"varint,3,opt,name=commit_timestamp_ms,json=commitTimestampMs,proto3" json:"commit_timestamp_ms,omitempty"`
}

func (x *ConsensusCommitPrologue) Reset() {
	*x = ConsensusCommitPrologue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusCommitPrologue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusCommitPrologue) ProtoMessage() {}

func (x *ConsensusCommitPrologue) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusCommitPrologue.ProtoReflect.Descriptor instead.
func (*ConsensusCommitPrologue) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{67}
}

func (x *ConsensusCommitPrologue) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ConsensusCommitPrologue) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *ConsensusCommitPrologue) GetCommitTimestampMs() uint64 {
	if x != nil {
		return x.CommitTimestampMs
	}
	return 0
}

type ProgrammableTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input objects or primitive values
	Inputs []*CallArg `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// The transactions to be executed sequentially. A failure in any transaction will
	// result in the failure of the entire programmable transaction block.
	Commands []*Command `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *ProgrammableTransaction) Reset() {
	*x = ProgrammableTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgrammableTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgrammableTransaction) ProtoMessage() {}

func (x *ProgrammableTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgrammableTransaction.ProtoReflect.Descriptor instead.
func (*ProgrammableTransaction) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{68}
}

func (x *ProgrammableTransaction) GetInputs() []*CallArg {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ProgrammableTransaction) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

type CallArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CallArg:
	//
	//	*CallArg_Object
	//	*CallArg_Pure
	CallArg isCallArg_CallArg `protobuf_oneof:"call_arg"`
}

func (x *CallArg) Reset() {
	*x = CallArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallArg) ProtoMessage() {}

func (x *CallArg) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallArg.ProtoReflect.Descriptor instead.
func (*CallArg) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{69}
}

func (m *CallArg) GetCallArg() isCallArg_CallArg {
	if m != nil {
		return m.CallArg
	}
	return nil
}

func (x *CallArg) GetObject() *SuiObjectArg {
	if x, ok := x.GetCallArg().(*CallArg_Object); ok {
		return x.Object
	}
	return nil
}

func (x *CallArg) GetPure() []byte {
	if x, ok := x.GetCallArg().(*CallArg_Pure); ok {
		return x.Pure
	}
	return nil
}

type isCallArg_CallArg interface {
	isCallArg_CallArg()
}

type CallArg_Object struct {
	// Needs to become an Object Ref or Object ID, depending on object type
	Object *SuiObjectArg `protobuf:"bytes,1,opt,name=object,proto3,oneof"`
}

type CallArg_Pure struct {
	// pure value, bcs encoded
	Pure []byte `protobuf:"bytes,2,opt,name=pure,proto3,oneof"`
}

func (*CallArg_Object) isCallArg_CallArg() {}

func (*CallArg_Pure) isCallArg_CallArg() {}

type SuiObjectArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiObjectArg:
	//
	//	*SuiObjectArg_ImmOrOwnedObject
	//	*SuiObjectArg_SharedObject
	//	*SuiObjectArg_Receiving
	SuiObjectArg isSuiObjectArg_SuiObjectArg `protobuf_oneof:"sui_object_arg"`
}

func (x *SuiObjectArg) Reset() {
	*x = SuiObjectArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiObjectArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiObjectArg) ProtoMessage() {}

func (x *SuiObjectArg) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiObjectArg.ProtoReflect.Descriptor instead.
func (*SuiObjectArg) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{70}
}

func (m *SuiObjectArg) GetSuiObjectArg() isSuiObjectArg_SuiObjectArg {
	if m != nil {
		return m.SuiObjectArg
	}
	return nil
}

func (x *SuiObjectArg) GetImmOrOwnedObject() *ObjectRef {
	if x, ok := x.GetSuiObjectArg().(*SuiObjectArg_ImmOrOwnedObject); ok {
		return x.ImmOrOwnedObject
	}
	return nil
}

func (x *SuiObjectArg) GetSharedObject() *SharedObject {
	if x, ok := x.GetSuiObjectArg().(*SuiObjectArg_SharedObject); ok {
		return x.SharedObject
	}
	return nil
}

func (x *SuiObjectArg) GetReceiving() *ObjectRef {
	if x, ok := x.GetSuiObjectArg().(*SuiObjectArg_Receiving); ok {
		return x.Receiving
	}
	return nil
}

type isSuiObjectArg_SuiObjectArg interface {
	isSuiObjectArg_SuiObjectArg()
}

type SuiObjectArg_ImmOrOwnedObject struct {
	// A Move object, either immutable, or owned mutable.
	ImmOrOwnedObject *ObjectRef `protobuf:"bytes,1,opt,name=imm_or_owned_object,json=immOrOwnedObject,proto3,oneof"`
}

type SuiObjectArg_SharedObject struct {
	// A Move object that's shared.
	// SharedObject::mutable controls whether caller asks for a mutable reference to shared object.
	SharedObject *SharedObject `protobuf:"bytes,2,opt,name=shared_object,json=sharedObject,proto3,oneof"`
}

type SuiObjectArg_Receiving struct {
	Receiving *ObjectRef `protobuf:"bytes,3,opt,name=receiving,proto3,oneof"`
}

func (*SuiObjectArg_ImmOrOwnedObject) isSuiObjectArg_SuiObjectArg() {}

func (*SuiObjectArg_SharedObject) isSuiObjectArg_SuiObjectArg() {}

func (*SuiObjectArg_Receiving) isSuiObjectArg_SuiObjectArg() {}

type SharedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId             *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	InitialSharedVersion uint64    `protobuf:"varint,2,opt,name=initial_shared_version,json=initialSharedVersion,proto3" json:"initial_shared_version,omitempty"`
	Mutable              bool      `protobuf:"varint,3,opt,name=mutable,proto3" json:"mutable,omitempty"`
}

func (x *SharedObject) Reset() {
	*x = SharedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedObject) ProtoMessage() {}

func (x *SharedObject) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedObject.ProtoReflect.Descriptor instead.
func (*SharedObject) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{71}
}

func (x *SharedObject) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *SharedObject) GetInitialSharedVersion() uint64 {
	if x != nil {
		return x.InitialSharedVersion
	}
	return 0
}

func (x *SharedObject) GetMutable() bool {
	if x != nil {
		return x.Mutable
	}
	return false
}

type TypeTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TypeTag:
	//
	//	*TypeTag_Bool
	//	*TypeTag_U8
	//	*TypeTag_U64
	//	*TypeTag_U128
	//	*TypeTag_Address
	//	*TypeTag_Signer
	//	*TypeTag_Vector
	//	*TypeTag_Struct
	//	*TypeTag_U16
	//	*TypeTag_U32
	//	*TypeTag_U256
	TypeTag isTypeTag_TypeTag `protobuf_oneof:"type_tag"`
}

func (x *TypeTag) Reset() {
	*x = TypeTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeTag) ProtoMessage() {}

func (x *TypeTag) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeTag.ProtoReflect.Descriptor instead.
func (*TypeTag) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{72}
}

func (m *TypeTag) GetTypeTag() isTypeTag_TypeTag {
	if m != nil {
		return m.TypeTag
	}
	return nil
}

func (x *TypeTag) GetBool() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *TypeTag) GetU8() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U8); ok {
		return x.U8
	}
	return nil
}

func (x *TypeTag) GetU64() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U64); ok {
		return x.U64
	}
	return nil
}

func (x *TypeTag) GetU128() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U128); ok {
		return x.U128
	}
	return nil
}

func (x *TypeTag) GetAddress() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_Address); ok {
		return x.Address
	}
	return nil
}

func (x *TypeTag) GetSigner() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_Signer); ok {
		return x.Signer
	}
	return nil
}

func (x *TypeTag) GetVector() *TypeTag {
	if x, ok := x.GetTypeTag().(*TypeTag_Vector); ok {
		return x.Vector
	}
	return nil
}

func (x *TypeTag) GetStruct() *StructTag {
	if x, ok := x.GetTypeTag().(*TypeTag_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *TypeTag) GetU16() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U16); ok {
		return x.U16
	}
	return nil
}

func (x *TypeTag) GetU32() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U32); ok {
		return x.U32
	}
	return nil
}

func (x *TypeTag) GetU256() *emptypb.Empty {
	if x, ok := x.GetTypeTag().(*TypeTag_U256); ok {
		return x.U256
	}
	return nil
}

type isTypeTag_TypeTag interface {
	isTypeTag_TypeTag()
}

type TypeTag_Bool struct {
	Bool *emptypb.Empty `protobuf:"bytes,1,opt,name=bool,proto3,oneof"`
}

type TypeTag_U8 struct {
	U8 *emptypb.Empty `protobuf:"bytes,2,opt,name=u8,proto3,oneof"`
}

type TypeTag_U64 struct {
	U64 *emptypb.Empty `protobuf:"bytes,3,opt,name=u64,proto3,oneof"`
}

type TypeTag_U128 struct {
	U128 *emptypb.Empty `protobuf:"bytes,4,opt,name=u128,proto3,oneof"`
}

type TypeTag_Address struct {
	Address *emptypb.Empty `protobuf:"bytes,5,opt,name=address,proto3,oneof"`
}

type TypeTag_Signer struct {
	Signer *emptypb.Empty `protobuf:"bytes,6,opt,name=signer,proto3,oneof"`
}

type TypeTag_Vector struct {
	Vector *TypeTag `protobuf:"bytes,7,opt,name=vector,proto3,oneof"`
}

type TypeTag_Struct struct {
	Struct *StructTag `protobuf:"bytes,8,opt,name=struct,proto3,oneof"`
}

type TypeTag_U16 struct {
	U16 *emptypb.Empty `protobuf:"bytes,9,opt,name=u16,proto3,oneof"`
}

type TypeTag_U32 struct {
	U32 *emptypb.Empty `protobuf:"bytes,10,opt,name=u32,proto3,oneof"`
}

type TypeTag_U256 struct {
	U256 *emptypb.Empty `protobuf:"bytes,11,opt,name=u256,proto3,oneof"`
}

func (*TypeTag_Bool) isTypeTag_TypeTag() {}

func (*TypeTag_U8) isTypeTag_TypeTag() {}

func (*TypeTag_U64) isTypeTag_TypeTag() {}

func (*TypeTag_U128) isTypeTag_TypeTag() {}

func (*TypeTag_Address) isTypeTag_TypeTag() {}

func (*TypeTag_Signer) isTypeTag_TypeTag() {}

func (*TypeTag_Vector) isTypeTag_TypeTag() {}

func (*TypeTag_Struct) isTypeTag_TypeTag() {}

func (*TypeTag_U16) isTypeTag_TypeTag() {}

func (*TypeTag_U32) isTypeTag_TypeTag() {}

func (*TypeTag_U256) isTypeTag_TypeTag() {}

type ListOfTypeTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TypeTag `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListOfTypeTags) Reset() {
	*x = ListOfTypeTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfTypeTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfTypeTags) ProtoMessage() {}

func (x *ListOfTypeTags) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfTypeTags.ProtoReflect.Descriptor instead.
func (*ListOfTypeTags) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{73}
}

func (x *ListOfTypeTags) GetList() []*TypeTag {
	if x != nil {
		return x.List
	}
	return nil
}

type StructTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Module     string          `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	Name       string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TypeParams *ListOfTypeTags `protobuf:"bytes,4,opt,name=type_params,json=typeParams,proto3" json:"type_params,omitempty"`
}

func (x *StructTag) Reset() {
	*x = StructTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructTag) ProtoMessage() {}

func (x *StructTag) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructTag.ProtoReflect.Descriptor instead.
func (*StructTag) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{74}
}

func (x *StructTag) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *StructTag) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *StructTag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StructTag) GetTypeParams() *ListOfTypeTags {
	if x != nil {
		return x.TypeParams
	}
	return nil
}

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiCommand:
	//
	//	*Command_MoveCall
	//	*Command_TransferObjects
	//	*Command_SplitCoins
	//	*Command_MergeCoins
	//	*Command_Publish
	//	*Command_Upgrade
	//	*Command_MakeMoveVec
	SuiCommand isCommand_SuiCommand `protobuf_oneof:"sui_command"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{75}
}

func (m *Command) GetSuiCommand() isCommand_SuiCommand {
	if m != nil {
		return m.SuiCommand
	}
	return nil
}

func (x *Command) GetMoveCall() *SuiProgrammableMoveCall {
	if x, ok := x.GetSuiCommand().(*Command_MoveCall); ok {
		return x.MoveCall
	}
	return nil
}

func (x *Command) GetTransferObjects() *TransferObjectsPair {
	if x, ok := x.GetSuiCommand().(*Command_TransferObjects); ok {
		return x.TransferObjects
	}
	return nil
}

func (x *Command) GetSplitCoins() *SplitCoinsPair {
	if x, ok := x.GetSuiCommand().(*Command_SplitCoins); ok {
		return x.SplitCoins
	}
	return nil
}

func (x *Command) GetMergeCoins() *MergeCoinsPair {
	if x, ok := x.GetSuiCommand().(*Command_MergeCoins); ok {
		return x.MergeCoins
	}
	return nil
}

func (x *Command) GetPublish() *PublishCommand {
	if x, ok := x.GetSuiCommand().(*Command_Publish); ok {
		return x.Publish
	}
	return nil
}

func (x *Command) GetUpgrade() *UpgradeComand {
	if x, ok := x.GetSuiCommand().(*Command_Upgrade); ok {
		return x.Upgrade
	}
	return nil
}

func (x *Command) GetMakeMoveVec() *MakeMoveVecPair {
	if x, ok := x.GetSuiCommand().(*Command_MakeMoveVec); ok {
		return x.MakeMoveVec
	}
	return nil
}

type isCommand_SuiCommand interface {
	isCommand_SuiCommand()
}

type Command_MoveCall struct {
	// A call to either an entry or a public Move function
	MoveCall *SuiProgrammableMoveCall `protobuf:"bytes,1,opt,name=move_call,json=moveCall,proto3,oneof"`
}

type Command_TransferObjects struct {
	// `(Vec<forall T:key+store. T>, address)`
	// It sends n-objects to the specified address. These objects must have store
	// (public transfer) and either the previous owner must be an address or the object must
	// be newly created.
	TransferObjects *TransferObjectsPair `protobuf:"bytes,2,opt,name=transfer_objects,json=transferObjects,proto3,oneof"`
}

type Command_SplitCoins struct {
	// `(&mut Coin<T>, Vec<u64>)` -> `Vec<Coin<T>>`
	// It splits off some amounts into a new coins with those amounts
	SplitCoins *SplitCoinsPair `protobuf:"bytes,3,opt,name=split_coins,json=splitCoins,proto3,oneof"`
}

type Command_MergeCoins struct {
	// `(&mut Coin<T>, Vec<Coin<T>>)`
	// It merges n-coins into the first coin
	MergeCoins *MergeCoinsPair `protobuf:"bytes,4,opt,name=merge_coins,json=mergeCoins,proto3,oneof"`
}

type Command_Publish struct {
	// Publishes a Move package. It takes the package bytes and a list of the package's transitive
	// dependencies to link against on-chain.
	Publish *PublishCommand `protobuf:"bytes,5,opt,name=publish,proto3,oneof"`
}

type Command_Upgrade struct {
	// Upgrades a Move package
	Upgrade *UpgradeComand `protobuf:"bytes,6,opt,name=upgrade,proto3,oneof"`
}

type Command_MakeMoveVec struct {
	// `forall T: Vec<T> -> vector<T>`
	// Given n-values of the same type, it constructs a vector. For non objects or an empty vector,
	// the type tag must be specified.
	MakeMoveVec *MakeMoveVecPair `protobuf:"bytes,7,opt,name=make_move_vec,json=makeMoveVec,proto3,oneof"`
}

func (*Command_MoveCall) isCommand_SuiCommand() {}

func (*Command_TransferObjects) isCommand_SuiCommand() {}

func (*Command_SplitCoins) isCommand_SuiCommand() {}

func (*Command_MergeCoins) isCommand_SuiCommand() {}

func (*Command_Publish) isCommand_SuiCommand() {}

func (*Command_Upgrade) isCommand_SuiCommand() {}

func (*Command_MakeMoveVec) isCommand_SuiCommand() {}

type TransferObjectsPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One []*SuiArgument `protobuf:"bytes,1,rep,name=one,proto3" json:"one,omitempty"`
	Two *SuiArgument   `protobuf:"bytes,2,opt,name=two,proto3" json:"two,omitempty"`
}

func (x *TransferObjectsPair) Reset() {
	*x = TransferObjectsPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferObjectsPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferObjectsPair) ProtoMessage() {}

func (x *TransferObjectsPair) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferObjectsPair.ProtoReflect.Descriptor instead.
func (*TransferObjectsPair) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{76}
}

func (x *TransferObjectsPair) GetOne() []*SuiArgument {
	if x != nil {
		return x.One
	}
	return nil
}

func (x *TransferObjectsPair) GetTwo() *SuiArgument {
	if x != nil {
		return x.Two
	}
	return nil
}

type SplitCoinsPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One *SuiArgument   `protobuf:"bytes,1,opt,name=one,proto3" json:"one,omitempty"`
	Two []*SuiArgument `protobuf:"bytes,2,rep,name=two,proto3" json:"two,omitempty"`
}

func (x *SplitCoinsPair) Reset() {
	*x = SplitCoinsPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitCoinsPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitCoinsPair) ProtoMessage() {}

func (x *SplitCoinsPair) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitCoinsPair.ProtoReflect.Descriptor instead.
func (*SplitCoinsPair) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{77}
}

func (x *SplitCoinsPair) GetOne() *SuiArgument {
	if x != nil {
		return x.One
	}
	return nil
}

func (x *SplitCoinsPair) GetTwo() []*SuiArgument {
	if x != nil {
		return x.Two
	}
	return nil
}

type MergeCoinsPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One *SuiArgument   `protobuf:"bytes,1,opt,name=one,proto3" json:"one,omitempty"`
	Two []*SuiArgument `protobuf:"bytes,2,rep,name=two,proto3" json:"two,omitempty"`
}

func (x *MergeCoinsPair) Reset() {
	*x = MergeCoinsPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeCoinsPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeCoinsPair) ProtoMessage() {}

func (x *MergeCoinsPair) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeCoinsPair.ProtoReflect.Descriptor instead.
func (*MergeCoinsPair) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{78}
}

func (x *MergeCoinsPair) GetOne() *SuiArgument {
	if x != nil {
		return x.One
	}
	return nil
}

func (x *MergeCoinsPair) GetTwo() []*SuiArgument {
	if x != nil {
		return x.Two
	}
	return nil
}

type PublishCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageData [][]byte    `protobuf:"bytes,1,rep,name=package_data,json=packageData,proto3" json:"package_data,omitempty"`
	Package     []*ObjectID `protobuf:"bytes,2,rep,name=package,proto3" json:"package,omitempty"`
}

func (x *PublishCommand) Reset() {
	*x = PublishCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishCommand) ProtoMessage() {}

func (x *PublishCommand) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishCommand.ProtoReflect.Descriptor instead.
func (*PublishCommand) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{79}
}

func (x *PublishCommand) GetPackageData() [][]byte {
	if x != nil {
		return x.PackageData
	}
	return nil
}

func (x *PublishCommand) GetPackage() []*ObjectID {
	if x != nil {
		return x.Package
	}
	return nil
}

type ListOfObjects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ObjectID `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListOfObjects) Reset() {
	*x = ListOfObjects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfObjects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfObjects) ProtoMessage() {}

func (x *ListOfObjects) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfObjects.ProtoReflect.Descriptor instead.
func (*ListOfObjects) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{80}
}

func (x *ListOfObjects) GetList() []*ObjectID {
	if x != nil {
		return x.List
	}
	return nil
}

type MakeMoveVecPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One *TypeTag       `protobuf:"bytes,1,opt,name=one,proto3,oneof" json:"one,omitempty"`
	Two []*SuiArgument `protobuf:"bytes,2,rep,name=two,proto3" json:"two,omitempty"`
}

func (x *MakeMoveVecPair) Reset() {
	*x = MakeMoveVecPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeMoveVecPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeMoveVecPair) ProtoMessage() {}

func (x *MakeMoveVecPair) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeMoveVecPair.ProtoReflect.Descriptor instead.
func (*MakeMoveVecPair) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{81}
}

func (x *MakeMoveVecPair) GetOne() *TypeTag {
	if x != nil {
		return x.One
	}
	return nil
}

func (x *MakeMoveVecPair) GetTwo() []*SuiArgument {
	if x != nil {
		return x.Two
	}
	return nil
}

type UpgradeComand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One   [][]byte     `protobuf:"bytes,1,rep,name=one,proto3" json:"one,omitempty"`
	Two   []*ObjectID  `protobuf:"bytes,2,rep,name=two,proto3" json:"two,omitempty"`
	Three *ObjectID    `protobuf:"bytes,3,opt,name=three,proto3" json:"three,omitempty"`
	Four  *SuiArgument `protobuf:"bytes,4,opt,name=four,proto3" json:"four,omitempty"`
}

func (x *UpgradeComand) Reset() {
	*x = UpgradeComand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeComand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeComand) ProtoMessage() {}

func (x *UpgradeComand) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeComand.ProtoReflect.Descriptor instead.
func (*UpgradeComand) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{82}
}

func (x *UpgradeComand) GetOne() [][]byte {
	if x != nil {
		return x.One
	}
	return nil
}

func (x *UpgradeComand) GetTwo() []*ObjectID {
	if x != nil {
		return x.Two
	}
	return nil
}

func (x *UpgradeComand) GetThree() *ObjectID {
	if x != nil {
		return x.Three
	}
	return nil
}

func (x *UpgradeComand) GetFour() *SuiArgument {
	if x != nil {
		return x.Four
	}
	return nil
}

type SuiProgrammableMoveCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The package containing the module and function.
	Package *ObjectID `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	// The specific module in the package containing the function.
	Module string `protobuf:"bytes,2,opt,name=module,proto3" json:"module,omitempty"`
	// The function to be called.
	Function string `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
	// The type arguments to the function.
	TypeArguments []*TypeTag     `protobuf:"bytes,4,rep,name=type_arguments,json=typeArguments,proto3" json:"type_arguments,omitempty"`
	Arguments     []*SuiArgument `protobuf:"bytes,5,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *SuiProgrammableMoveCall) Reset() {
	*x = SuiProgrammableMoveCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiProgrammableMoveCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiProgrammableMoveCall) ProtoMessage() {}

func (x *SuiProgrammableMoveCall) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiProgrammableMoveCall.ProtoReflect.Descriptor instead.
func (*SuiProgrammableMoveCall) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{83}
}

func (x *SuiProgrammableMoveCall) GetPackage() *ObjectID {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *SuiProgrammableMoveCall) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *SuiProgrammableMoveCall) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *SuiProgrammableMoveCall) GetTypeArguments() []*TypeTag {
	if x != nil {
		return x.TypeArguments
	}
	return nil
}

func (x *SuiProgrammableMoveCall) GetArguments() []*SuiArgument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type SuiArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SuiArguments:
	//
	//	*SuiArgument_GasCoin
	//	*SuiArgument_Input
	//	*SuiArgument_Result
	//	*SuiArgument_NestedResult
	SuiArguments isSuiArgument_SuiArguments `protobuf_oneof:"sui_arguments"`
}

func (x *SuiArgument) Reset() {
	*x = SuiArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuiArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuiArgument) ProtoMessage() {}

func (x *SuiArgument) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuiArgument.ProtoReflect.Descriptor instead.
func (*SuiArgument) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{84}
}

func (m *SuiArgument) GetSuiArguments() isSuiArgument_SuiArguments {
	if m != nil {
		return m.SuiArguments
	}
	return nil
}

func (x *SuiArgument) GetGasCoin() *emptypb.Empty {
	if x, ok := x.GetSuiArguments().(*SuiArgument_GasCoin); ok {
		return x.GasCoin
	}
	return nil
}

func (x *SuiArgument) GetInput() uint32 {
	if x, ok := x.GetSuiArguments().(*SuiArgument_Input); ok {
		return x.Input
	}
	return 0
}

func (x *SuiArgument) GetResult() uint32 {
	if x, ok := x.GetSuiArguments().(*SuiArgument_Result); ok {
		return x.Result
	}
	return 0
}

func (x *SuiArgument) GetNestedResult() *PairOfU32 {
	if x, ok := x.GetSuiArguments().(*SuiArgument_NestedResult); ok {
		return x.NestedResult
	}
	return nil
}

type isSuiArgument_SuiArguments interface {
	isSuiArgument_SuiArguments()
}

type SuiArgument_GasCoin struct {
	// The gas coin. The gas coin can only be used by-ref, except for with
	// `TransferObjects`, which can use it by-value.
	GasCoin *emptypb.Empty `protobuf:"bytes,1,opt,name=gas_coin,json=gasCoin,proto3,oneof"`
}

type SuiArgument_Input struct {
	// One of the input objects or primitive values (from
	// `ProgrammableTransactionBlock` inputs)
	Input uint32 `protobuf:"varint,2,opt,name=input,proto3,oneof"`
}

type SuiArgument_Result struct {
	// The result of another transaction (from `ProgrammableTransactionBlock` transactions)
	Result uint32 `protobuf:"varint,3,opt,name=result,proto3,oneof"`
}

type SuiArgument_NestedResult struct {
	// Like a `Result` but it accesses a nested result. Currently, the only usage
	// of this is to access a value from a Move call with multiple return values.
	NestedResult *PairOfU32 `protobuf:"bytes,4,opt,name=nested_result,json=nestedResult,proto3,oneof"`
}

func (*SuiArgument_GasCoin) isSuiArgument_SuiArguments() {}

func (*SuiArgument_Input) isSuiArgument_SuiArguments() {}

func (*SuiArgument_Result) isSuiArgument_SuiArguments() {}

func (*SuiArgument_NestedResult) isSuiArgument_SuiArguments() {}

type PairOfU32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	One uint32 `protobuf:"varint,1,opt,name=one,proto3" json:"one,omitempty"`
	Two uint32 `protobuf:"varint,2,opt,name=two,proto3" json:"two,omitempty"`
}

func (x *PairOfU32) Reset() {
	*x = PairOfU32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairOfU32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairOfU32) ProtoMessage() {}

func (x *PairOfU32) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairOfU32.ProtoReflect.Descriptor instead.
func (*PairOfU32) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{85}
}

func (x *PairOfU32) GetOne() uint32 {
	if x != nil {
		return x.One
	}
	return 0
}

func (x *PairOfU32) GetTwo() uint32 {
	if x != nil {
		return x.Two
	}
	return 0
}

type TransactionBlockEffects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TransactionBlockEffects:
	//
	//	*TransactionBlockEffects_V1
	//	*TransactionBlockEffects_V2
	TransactionBlockEffects isTransactionBlockEffects_TransactionBlockEffects `protobuf_oneof:"transaction_block_effects"`
}

func (x *TransactionBlockEffects) Reset() {
	*x = TransactionBlockEffects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBlockEffects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBlockEffects) ProtoMessage() {}

func (x *TransactionBlockEffects) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBlockEffects.ProtoReflect.Descriptor instead.
func (*TransactionBlockEffects) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{86}
}

func (m *TransactionBlockEffects) GetTransactionBlockEffects() isTransactionBlockEffects_TransactionBlockEffects {
	if m != nil {
		return m.TransactionBlockEffects
	}
	return nil
}

func (x *TransactionBlockEffects) GetV1() *TransactionBlockEffectsV1 {
	if x, ok := x.GetTransactionBlockEffects().(*TransactionBlockEffects_V1); ok {
		return x.V1
	}
	return nil
}

func (x *TransactionBlockEffects) GetV2() *TransactionBlockEffectsV2 {
	if x, ok := x.GetTransactionBlockEffects().(*TransactionBlockEffects_V2); ok {
		return x.V2
	}
	return nil
}

type isTransactionBlockEffects_TransactionBlockEffects interface {
	isTransactionBlockEffects_TransactionBlockEffects()
}

type TransactionBlockEffects_V1 struct {
	V1 *TransactionBlockEffectsV1 `protobuf:"bytes,1,opt,name=v1,proto3,oneof"`
}

type TransactionBlockEffects_V2 struct {
	V2 *TransactionBlockEffectsV2 `protobuf:"bytes,2,opt,name=v2,proto3,oneof"`
}

func (*TransactionBlockEffects_V1) isTransactionBlockEffects_TransactionBlockEffects() {}

func (*TransactionBlockEffects_V2) isTransactionBlockEffects_TransactionBlockEffects() {}

type TransactionBlockEffectsV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the execution
	Status *ExecutionStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The epoch when this transaction was executed.
	ExecutedEpoch uint64 `protobuf:"varint,2,opt,name=executed_epoch,json=executedEpoch,proto3" json:"executed_epoch,omitempty"`
	// Gas cost summary of the transaction
	GasUsed *GasCostSummary `protobuf:"bytes,3,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// The version that every modified (mutated or deleted) object had before it was modified by this transaction.
	ModifiedAtVersions []*TransactionBlockEffectsModifiedAtVersions `protobuf:"bytes,4,rep,name=modified_at_versions,json=modifiedAtVersions,proto3" json:"modified_at_versions,omitempty"`
	// The object references of the shared objects used in this transaction. Empty if no shared objects were used.
	SharedObjects []*ObjectRef `protobuf:"bytes,5,rep,name=shared_objects,json=sharedObjects,proto3" json:"shared_objects,omitempty"`
	// The transaction digest
	TransactionDigest string `protobuf:"bytes,6,opt,name=transaction_digest,json=transactionDigest,proto3" json:"transaction_digest,omitempty"`
	// ObjectRef and owner of new objects created.
	Created []*OwnedObjectRef `protobuf:"bytes,7,rep,name=created,proto3" json:"created,omitempty"`
	// ObjectRef and owner of mutated objects, including gas object.
	Mutated []*OwnedObjectRef `protobuf:"bytes,8,rep,name=mutated,proto3" json:"mutated,omitempty"`
	// ObjectRef and owner of objects that are unwrapped in this transaction.
	// Unwrapped objects are objects that were wrapped into other objects in the past,
	// and just got extracted out.
	Unwrapped []*OwnedObjectRef `protobuf:"bytes,9,rep,name=unwrapped,proto3" json:"unwrapped,omitempty"`
	// Object Refs of objects now deleted (the old refs).
	Deleted []*ObjectRef `protobuf:"bytes,10,rep,name=deleted,proto3" json:"deleted,omitempty"`
	// Object refs of objects previously wrapped in other objects but now deleted.
	UnwrappedThenDeleted []*ObjectRef `protobuf:"bytes,11,rep,name=unwrapped_then_deleted,json=unwrappedThenDeleted,proto3" json:"unwrapped_then_deleted,omitempty"`
	// Object refs of objects now wrapped in other objects.
	Wrapped []*ObjectRef `protobuf:"bytes,12,rep,name=wrapped,proto3" json:"wrapped,omitempty"`
	// The updated gas object reference. Have a dedicated field for convenient access.
	// It's also included in mutated.
	GasObject *OwnedObjectRef `protobuf:"bytes,13,opt,name=gas_object,json=gasObject,proto3" json:"gas_object,omitempty"`
	// The digest of the events emitted during execution,
	// can be None if the transaction does not emit any event.
	EventsDigest *string `protobuf:"bytes,14,opt,name=events_digest,json=eventsDigest,proto3,oneof" json:"events_digest,omitempty"`
	// The set of transaction digests this transaction depends on.
	Dependencies []string `protobuf:"bytes,15,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *TransactionBlockEffectsV1) Reset() {
	*x = TransactionBlockEffectsV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBlockEffectsV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBlockEffectsV1) ProtoMessage() {}

func (x *TransactionBlockEffectsV1) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBlockEffectsV1.ProtoReflect.Descriptor instead.
func (*TransactionBlockEffectsV1) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{87}
}

func (x *TransactionBlockEffectsV1) GetStatus() *ExecutionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TransactionBlockEffectsV1) GetExecutedEpoch() uint64 {
	if x != nil {
		return x.ExecutedEpoch
	}
	return 0
}

func (x *TransactionBlockEffectsV1) GetGasUsed() *GasCostSummary {
	if x != nil {
		return x.GasUsed
	}
	return nil
}

func (x *TransactionBlockEffectsV1) GetModifiedAtVersions() []*TransactionBlockEffectsModifiedAtVersions {
	if x != nil {
		return x.ModifiedAtVersions
	}
	return nil
}

func (x *TransactionBlockEffectsV1) GetSharedObjects() []*ObjectRef {
	if x != nil {
		return x.SharedObjects
	}
	return nil
}

func (x *TransactionBlockEffectsV1) GetTransactionDigest() string {
	if x != nil {
		return x.TransactionDigest
	}
	return ""
}

func (x *TransactionBlockEffectsV1) GetCreated() []*OwnedObjectRef {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *TransactionBlockEffectsV1) GetMutated() []*OwnedObjectRef {
	if x != nil {
		return x.Mutated
	}
	return nil
}

func (x *TransactionBlockEffectsV1) GetUnwrapped() []*OwnedObjectRef {
	if x != nil {
		return x.Unwrapped
	}
	return nil
}

func (x *TransactionBlockEffectsV1) GetDeleted() []*ObjectRef {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *TransactionBlockEffectsV1) GetUnwrappedThenDeleted() []*ObjectRef {
	if x != nil {
		return x.UnwrappedThenDeleted
	}
	return nil
}

func (x *TransactionBlockEffectsV1) GetWrapped() []*ObjectRef {
	if x != nil {
		return x.Wrapped
	}
	return nil
}

func (x *TransactionBlockEffectsV1) GetGasObject() *OwnedObjectRef {
	if x != nil {
		return x.GasObject
	}
	return nil
}

func (x *TransactionBlockEffectsV1) GetEventsDigest() string {
	if x != nil && x.EventsDigest != nil {
		return *x.EventsDigest
	}
	return ""
}

func (x *TransactionBlockEffectsV1) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type TransactionBlockEffectsV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the execution
	Status *ExecutionStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The epoch when this transaction was executed.
	ExecutedEpoch uint64 `protobuf:"varint,2,opt,name=executed_epoch,json=executedEpoch,proto3" json:"executed_epoch,omitempty"`
	// Gas cost summary of the transaction
	GasUsed *GasCostSummary `protobuf:"bytes,3,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	// The transaction digest
	TransactionDigest string `protobuf:"bytes,4,opt,name=transaction_digest,json=transactionDigest,proto3" json:"transaction_digest,omitempty"`
	// / The updated gas object reference, as an index into the `changed_objects` vector.
	// / Having a dedicated field for convenient access.
	// / System transaction that don't require gas will leave this as None.
	GasObjectIndex *uint32 `protobuf:"varint,5,opt,name=gas_object_index,json=gasObjectIndex,proto3,oneof" json:"gas_object_index,omitempty"`
	// / The digest of the events emitted during execution,
	// / can be None if the transaction does not emit any event.
	EventsDigest *string `protobuf:"bytes,6,opt,name=events_digest,json=eventsDigest,proto3,oneof" json:"events_digest,omitempty"`
	// The set of transaction digests this transaction depends on.
	Dependencies []string `protobuf:"bytes,7,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// / The version number of all the written Move objects by this transaction.
	LamportVersion uint64 `protobuf:"varint,8,opt,name=lamport_version,json=lamportVersion,proto3" json:"lamport_version,omitempty"`
	// / Objects whose state are changed in the object store.
	ChangedObjects []*ChangedObjectV2 `protobuf:"bytes,9,rep,name=changed_objects,json=changedObjects,proto3" json:"changed_objects,omitempty"`
	// / Shared objects that are not mutated in this transaction. Unlike owned objects,
	// / read-only shared objects' version are not committed in the transaction,
	// / and in order for a node to catch up and execute it without consensus sequencing,
	// / the version needs to be committed in the effects.
	UnchangedSharedObjects []*UnchangedSharedObject `protobuf:"bytes,10,rep,name=unchanged_shared_objects,json=unchangedSharedObjects,proto3" json:"unchanged_shared_objects,omitempty"`
	// / Auxiliary data that are not protocol-critical, generated as part of the effects but are stored separately.
	// / Storing it separately allows us to avoid bloating the effects with data that are not critical.
	// / It also provides more flexibility on the format and type of the data.
	AuxDataDigest *string `protobuf:"bytes,11,opt,name=aux_data_digest,json=auxDataDigest,proto3,oneof" json:"aux_data_digest,omitempty"`
}

func (x *TransactionBlockEffectsV2) Reset() {
	*x = TransactionBlockEffectsV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBlockEffectsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBlockEffectsV2) ProtoMessage() {}

func (x *TransactionBlockEffectsV2) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBlockEffectsV2.ProtoReflect.Descriptor instead.
func (*TransactionBlockEffectsV2) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{88}
}

func (x *TransactionBlockEffectsV2) GetStatus() *ExecutionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *TransactionBlockEffectsV2) GetExecutedEpoch() uint64 {
	if x != nil {
		return x.ExecutedEpoch
	}
	return 0
}

func (x *TransactionBlockEffectsV2) GetGasUsed() *GasCostSummary {
	if x != nil {
		return x.GasUsed
	}
	return nil
}

func (x *TransactionBlockEffectsV2) GetTransactionDigest() string {
	if x != nil {
		return x.TransactionDigest
	}
	return ""
}

func (x *TransactionBlockEffectsV2) GetGasObjectIndex() uint32 {
	if x != nil && x.GasObjectIndex != nil {
		return *x.GasObjectIndex
	}
	return 0
}

func (x *TransactionBlockEffectsV2) GetEventsDigest() string {
	if x != nil && x.EventsDigest != nil {
		return *x.EventsDigest
	}
	return ""
}

func (x *TransactionBlockEffectsV2) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *TransactionBlockEffectsV2) GetLamportVersion() uint64 {
	if x != nil {
		return x.LamportVersion
	}
	return 0
}

func (x *TransactionBlockEffectsV2) GetChangedObjects() []*ChangedObjectV2 {
	if x != nil {
		return x.ChangedObjects
	}
	return nil
}

func (x *TransactionBlockEffectsV2) GetUnchangedSharedObjects() []*UnchangedSharedObject {
	if x != nil {
		return x.UnchangedSharedObjects
	}
	return nil
}

func (x *TransactionBlockEffectsV2) GetAuxDataDigest() string {
	if x != nil && x.AuxDataDigest != nil {
		return *x.AuxDataDigest
	}
	return ""
}

type UnchangedSharedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId *ObjectID            `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Kind     *UnchangedSharedKind `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *UnchangedSharedObject) Reset() {
	*x = UnchangedSharedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnchangedSharedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnchangedSharedObject) ProtoMessage() {}

func (x *UnchangedSharedObject) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnchangedSharedObject.ProtoReflect.Descriptor instead.
func (*UnchangedSharedObject) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{89}
}

func (x *UnchangedSharedObject) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *UnchangedSharedObject) GetKind() *UnchangedSharedKind {
	if x != nil {
		return x.Kind
	}
	return nil
}

type UnchangedSharedKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UnchangedSharedKind:
	//
	//	*UnchangedSharedKind_ReadOnlyRoot
	//	*UnchangedSharedKind_MutateDeleted
	//	*UnchangedSharedKind_ReadDeleted
	UnchangedSharedKind isUnchangedSharedKind_UnchangedSharedKind `protobuf_oneof:"unchanged_shared_kind"`
}

func (x *UnchangedSharedKind) Reset() {
	*x = UnchangedSharedKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnchangedSharedKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnchangedSharedKind) ProtoMessage() {}

func (x *UnchangedSharedKind) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnchangedSharedKind.ProtoReflect.Descriptor instead.
func (*UnchangedSharedKind) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{90}
}

func (m *UnchangedSharedKind) GetUnchangedSharedKind() isUnchangedSharedKind_UnchangedSharedKind {
	if m != nil {
		return m.UnchangedSharedKind
	}
	return nil
}

func (x *UnchangedSharedKind) GetReadOnlyRoot() *VersionDigest {
	if x, ok := x.GetUnchangedSharedKind().(*UnchangedSharedKind_ReadOnlyRoot); ok {
		return x.ReadOnlyRoot
	}
	return nil
}

func (x *UnchangedSharedKind) GetMutateDeleted() uint64 {
	if x, ok := x.GetUnchangedSharedKind().(*UnchangedSharedKind_MutateDeleted); ok {
		return x.MutateDeleted
	}
	return 0
}

func (x *UnchangedSharedKind) GetReadDeleted() uint64 {
	if x, ok := x.GetUnchangedSharedKind().(*UnchangedSharedKind_ReadDeleted); ok {
		return x.ReadDeleted
	}
	return 0
}

type isUnchangedSharedKind_UnchangedSharedKind interface {
	isUnchangedSharedKind_UnchangedSharedKind()
}

type UnchangedSharedKind_ReadOnlyRoot struct {
	// / Read-only shared objects from the input. We don't really need ObjectDigest
	// / for protocol correctness, but it will make it easier to verify untrusted read.
	ReadOnlyRoot *VersionDigest `protobuf:"bytes,1,opt,name=read_only_root,json=readOnlyRoot,proto3,oneof"`
}

type UnchangedSharedKind_MutateDeleted struct {
	// / Deleted shared objects that appear mutably/owned in the input.
	MutateDeleted uint64 `protobuf:"varint,2,opt,name=mutate_deleted,json=mutateDeleted,proto3,oneof"`
}

type UnchangedSharedKind_ReadDeleted struct {
	// / Deleted shared objects that appear as read-only in the input.
	ReadDeleted uint64 `protobuf:"varint,3,opt,name=read_deleted,json=readDeleted,proto3,oneof"`
}

func (*UnchangedSharedKind_ReadOnlyRoot) isUnchangedSharedKind_UnchangedSharedKind() {}

func (*UnchangedSharedKind_MutateDeleted) isUnchangedSharedKind_UnchangedSharedKind() {}

func (*UnchangedSharedKind_ReadDeleted) isUnchangedSharedKind_UnchangedSharedKind() {}

type ChangedObjectV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId *ObjectID            `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Effects  *EffectsObjectChange `protobuf:"bytes,2,opt,name=effects,proto3" json:"effects,omitempty"`
}

func (x *ChangedObjectV2) Reset() {
	*x = ChangedObjectV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangedObjectV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangedObjectV2) ProtoMessage() {}

func (x *ChangedObjectV2) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangedObjectV2.ProtoReflect.Descriptor instead.
func (*ChangedObjectV2) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{91}
}

func (x *ChangedObjectV2) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *ChangedObjectV2) GetEffects() *EffectsObjectChange {
	if x != nil {
		return x.Effects
	}
	return nil
}

type EffectsObjectChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// input_state and output_state are the core fields that's required by
	// the protocol as it tells how an object changes on-chain.
	// / State of the object in the store prior to this transaction.
	InputState *ObjectIn `protobuf:"bytes,1,opt,name=input_state,json=inputState,proto3" json:"input_state,omitempty"`
	// / State of the object in the store after this transaction.
	OutputState *ObjectOut `protobuf:"bytes,2,opt,name=output_state,json=outputState,proto3" json:"output_state,omitempty"`
	// / Whether this object ID is created or deleted in this transaction.
	// / This information isn't required by the protocol but is useful for providing more detailed
	// / semantics on object changes.
	IdOperation *IDOperation `protobuf:"bytes,3,opt,name=id_operation,json=idOperation,proto3" json:"id_operation,omitempty"`
}

func (x *EffectsObjectChange) Reset() {
	*x = EffectsObjectChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectsObjectChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectsObjectChange) ProtoMessage() {}

func (x *EffectsObjectChange) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectsObjectChange.ProtoReflect.Descriptor instead.
func (*EffectsObjectChange) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{92}
}

func (x *EffectsObjectChange) GetInputState() *ObjectIn {
	if x != nil {
		return x.InputState
	}
	return nil
}

func (x *EffectsObjectChange) GetOutputState() *ObjectOut {
	if x != nil {
		return x.OutputState
	}
	return nil
}

func (x *EffectsObjectChange) GetIdOperation() *IDOperation {
	if x != nil {
		return x.IdOperation
	}
	return nil
}

type IDOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to IdOperation:
	//
	//	*IDOperation_None
	//	*IDOperation_Created
	//	*IDOperation_Deleted
	IdOperation isIDOperation_IdOperation `protobuf_oneof:"id_operation"`
}

func (x *IDOperation) Reset() {
	*x = IDOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDOperation) ProtoMessage() {}

func (x *IDOperation) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDOperation.ProtoReflect.Descriptor instead.
func (*IDOperation) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{93}
}

func (m *IDOperation) GetIdOperation() isIDOperation_IdOperation {
	if m != nil {
		return m.IdOperation
	}
	return nil
}

func (x *IDOperation) GetNone() *emptypb.Empty {
	if x, ok := x.GetIdOperation().(*IDOperation_None); ok {
		return x.None
	}
	return nil
}

func (x *IDOperation) GetCreated() *emptypb.Empty {
	if x, ok := x.GetIdOperation().(*IDOperation_Created); ok {
		return x.Created
	}
	return nil
}

func (x *IDOperation) GetDeleted() *emptypb.Empty {
	if x, ok := x.GetIdOperation().(*IDOperation_Deleted); ok {
		return x.Deleted
	}
	return nil
}

type isIDOperation_IdOperation interface {
	isIDOperation_IdOperation()
}

type IDOperation_None struct {
	None *emptypb.Empty `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type IDOperation_Created struct {
	Created *emptypb.Empty `protobuf:"bytes,2,opt,name=created,proto3,oneof"`
}

type IDOperation_Deleted struct {
	Deleted *emptypb.Empty `protobuf:"bytes,3,opt,name=deleted,proto3,oneof"`
}

func (*IDOperation_None) isIDOperation_IdOperation() {}

func (*IDOperation_Created) isIDOperation_IdOperation() {}

func (*IDOperation_Deleted) isIDOperation_IdOperation() {}

type ObjectIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ObjectIn:
	//
	//	*ObjectIn_NotExist
	//	*ObjectIn_Exist
	ObjectIn isObjectIn_ObjectIn `protobuf_oneof:"object_in"`
}

func (x *ObjectIn) Reset() {
	*x = ObjectIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectIn) ProtoMessage() {}

func (x *ObjectIn) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectIn.ProtoReflect.Descriptor instead.
func (*ObjectIn) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{94}
}

func (m *ObjectIn) GetObjectIn() isObjectIn_ObjectIn {
	if m != nil {
		return m.ObjectIn
	}
	return nil
}

func (x *ObjectIn) GetNotExist() *emptypb.Empty {
	if x, ok := x.GetObjectIn().(*ObjectIn_NotExist); ok {
		return x.NotExist
	}
	return nil
}

func (x *ObjectIn) GetExist() *ObjectInExist {
	if x, ok := x.GetObjectIn().(*ObjectIn_Exist); ok {
		return x.Exist
	}
	return nil
}

type isObjectIn_ObjectIn interface {
	isObjectIn_ObjectIn()
}

type ObjectIn_NotExist struct {
	NotExist *emptypb.Empty `protobuf:"bytes,1,opt,name=not_exist,json=notExist,proto3,oneof"`
}

type ObjectIn_Exist struct {
	// / The old version, digest and owner.
	Exist *ObjectInExist `protobuf:"bytes,2,opt,name=exist,proto3,oneof"`
}

func (*ObjectIn_NotExist) isObjectIn_ObjectIn() {}

func (*ObjectIn_Exist) isObjectIn_ObjectIn() {}

type ObjectOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ObjectOut:
	//
	//	*ObjectOut_NotExist
	//	*ObjectOut_ObjectWrite
	//	*ObjectOut_PackageWrite
	ObjectOut isObjectOut_ObjectOut `protobuf_oneof:"object_out"`
}

func (x *ObjectOut) Reset() {
	*x = ObjectOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectOut) ProtoMessage() {}

func (x *ObjectOut) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectOut.ProtoReflect.Descriptor instead.
func (*ObjectOut) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{95}
}

func (m *ObjectOut) GetObjectOut() isObjectOut_ObjectOut {
	if m != nil {
		return m.ObjectOut
	}
	return nil
}

func (x *ObjectOut) GetNotExist() *emptypb.Empty {
	if x, ok := x.GetObjectOut().(*ObjectOut_NotExist); ok {
		return x.NotExist
	}
	return nil
}

func (x *ObjectOut) GetObjectWrite() *ObjectWrite {
	if x, ok := x.GetObjectOut().(*ObjectOut_ObjectWrite); ok {
		return x.ObjectWrite
	}
	return nil
}

func (x *ObjectOut) GetPackageWrite() *PackageWrite {
	if x, ok := x.GetObjectOut().(*ObjectOut_PackageWrite); ok {
		return x.PackageWrite
	}
	return nil
}

type isObjectOut_ObjectOut interface {
	isObjectOut_ObjectOut()
}

type ObjectOut_NotExist struct {
	NotExist *emptypb.Empty `protobuf:"bytes,1,opt,name=not_exist,json=notExist,proto3,oneof"`
}

type ObjectOut_ObjectWrite struct {
	// / Any written object, including all of mutated, created, unwrapped today.
	ObjectWrite *ObjectWrite `protobuf:"bytes,2,opt,name=object_write,json=objectWrite,proto3,oneof"`
}

type ObjectOut_PackageWrite struct {
	// / Packages writes need to be tracked separately with version because
	// / we don't use lamport version for package publish and upgrades.
	PackageWrite *PackageWrite `protobuf:"bytes,3,opt,name=package_write,json=packageWrite,proto3,oneof"`
}

func (*ObjectOut_NotExist) isObjectOut_ObjectOut() {}

func (*ObjectOut_ObjectWrite) isObjectOut_ObjectOut() {}

func (*ObjectOut_PackageWrite) isObjectOut_ObjectOut() {}

type ObjectWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectDigest string `protobuf:"bytes,1,opt,name=object_digest,json=objectDigest,proto3" json:"object_digest,omitempty"`
	Owner        *Owner `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *ObjectWrite) Reset() {
	*x = ObjectWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectWrite) ProtoMessage() {}

func (x *ObjectWrite) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectWrite.ProtoReflect.Descriptor instead.
func (*ObjectWrite) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{96}
}

func (x *ObjectWrite) GetObjectDigest() string {
	if x != nil {
		return x.ObjectDigest
	}
	return ""
}

func (x *ObjectWrite) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

type PackageWrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionDigest *VersionDigest `protobuf:"bytes,1,opt,name=version_digest,json=versionDigest,proto3" json:"version_digest,omitempty"`
}

func (x *PackageWrite) Reset() {
	*x = PackageWrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageWrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageWrite) ProtoMessage() {}

func (x *PackageWrite) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageWrite.ProtoReflect.Descriptor instead.
func (*PackageWrite) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{97}
}

func (x *PackageWrite) GetVersionDigest() *VersionDigest {
	if x != nil {
		return x.VersionDigest
	}
	return nil
}

type ObjectInExist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionDigest *VersionDigest `protobuf:"bytes,1,opt,name=version_digest,json=versionDigest,proto3" json:"version_digest,omitempty"`
	Owner         *Owner         `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *ObjectInExist) Reset() {
	*x = ObjectInExist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectInExist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectInExist) ProtoMessage() {}

func (x *ObjectInExist) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectInExist.ProtoReflect.Descriptor instead.
func (*ObjectInExist) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{98}
}

func (x *ObjectInExist) GetVersionDigest() *VersionDigest {
	if x != nil {
		return x.VersionDigest
	}
	return nil
}

func (x *ObjectInExist) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

type VersionDigest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber uint64 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ObjectDigest   string `protobuf:"bytes,2,opt,name=object_digest,json=objectDigest,proto3" json:"object_digest,omitempty"`
}

func (x *VersionDigest) Reset() {
	*x = VersionDigest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionDigest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionDigest) ProtoMessage() {}

func (x *VersionDigest) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionDigest.ProtoReflect.Descriptor instead.
func (*VersionDigest) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{99}
}

func (x *VersionDigest) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *VersionDigest) GetObjectDigest() string {
	if x != nil {
		return x.ObjectDigest
	}
	return ""
}

type OwnedObjectRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     *Owner     `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Reference *ObjectRef `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *OwnedObjectRef) Reset() {
	*x = OwnedObjectRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OwnedObjectRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OwnedObjectRef) ProtoMessage() {}

func (x *OwnedObjectRef) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OwnedObjectRef.ProtoReflect.Descriptor instead.
func (*OwnedObjectRef) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{100}
}

func (x *OwnedObjectRef) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *OwnedObjectRef) GetReference() *ObjectRef {
	if x != nil {
		return x.Reference
	}
	return nil
}

type Owner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Owner:
	//
	//	*Owner_AddressOwner
	//	*Owner_ObjectOwner
	//	*Owner_Shared
	//	*Owner_Immutable
	Owner isOwner_Owner `protobuf_oneof:"owner"`
}

func (x *Owner) Reset() {
	*x = Owner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Owner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Owner) ProtoMessage() {}

func (x *Owner) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Owner.ProtoReflect.Descriptor instead.
func (*Owner) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{101}
}

func (m *Owner) GetOwner() isOwner_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (x *Owner) GetAddressOwner() string {
	if x, ok := x.GetOwner().(*Owner_AddressOwner); ok {
		return x.AddressOwner
	}
	return ""
}

func (x *Owner) GetObjectOwner() string {
	if x, ok := x.GetOwner().(*Owner_ObjectOwner); ok {
		return x.ObjectOwner
	}
	return ""
}

func (x *Owner) GetShared() *Shared {
	if x, ok := x.GetOwner().(*Owner_Shared); ok {
		return x.Shared
	}
	return nil
}

func (x *Owner) GetImmutable() *emptypb.Empty {
	if x, ok := x.GetOwner().(*Owner_Immutable); ok {
		return x.Immutable
	}
	return nil
}

type isOwner_Owner interface {
	isOwner_Owner()
}

type Owner_AddressOwner struct {
	// Object is exclusively owned by a single address, and is mutable.
	AddressOwner string `protobuf:"bytes,1,opt,name=address_owner,json=addressOwner,proto3,oneof"`
}

type Owner_ObjectOwner struct {
	// Object is exclusively owned by a single object, and is mutable.
	// The object ID is converted to SuiAddress as SuiAddress is universal.
	ObjectOwner string `protobuf:"bytes,2,opt,name=object_owner,json=objectOwner,proto3,oneof"`
}

type Owner_Shared struct {
	// Object is shared, can be used by any address, and is mutable.
	Shared *Shared `protobuf:"bytes,3,opt,name=shared,proto3,oneof"`
}

type Owner_Immutable struct {
	// Object is immutable, and hence ownership doesn't matter.
	Immutable *emptypb.Empty `protobuf:"bytes,4,opt,name=immutable,proto3,oneof"`
}

func (*Owner_AddressOwner) isOwner_Owner() {}

func (*Owner_ObjectOwner) isOwner_Owner() {}

func (*Owner_Shared) isOwner_Owner() {}

func (*Owner_Immutable) isOwner_Owner() {}

type Shared struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version at which the object became shared
	InitialSharedVersion uint64 `protobuf:"varint,1,opt,name=initial_shared_version,json=initialSharedVersion,proto3" json:"initial_shared_version,omitempty"`
}

func (x *Shared) Reset() {
	*x = Shared{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shared) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shared) ProtoMessage() {}

func (x *Shared) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shared.ProtoReflect.Descriptor instead.
func (*Shared) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{102}
}

func (x *Shared) GetInitialSharedVersion() uint64 {
	if x != nil {
		return x.InitialSharedVersion
	}
	return 0
}

type ExecutionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExecutionStatus:
	//
	//	*ExecutionStatus_Success
	//	*ExecutionStatus_Failure
	ExecutionStatus isExecutionStatus_ExecutionStatus `protobuf_oneof:"execution_status"`
}

func (x *ExecutionStatus) Reset() {
	*x = ExecutionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionStatus) ProtoMessage() {}

func (x *ExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionStatus.ProtoReflect.Descriptor instead.
func (*ExecutionStatus) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{103}
}

func (m *ExecutionStatus) GetExecutionStatus() isExecutionStatus_ExecutionStatus {
	if m != nil {
		return m.ExecutionStatus
	}
	return nil
}

func (x *ExecutionStatus) GetSuccess() *emptypb.Empty {
	if x, ok := x.GetExecutionStatus().(*ExecutionStatus_Success); ok {
		return x.Success
	}
	return nil
}

func (x *ExecutionStatus) GetFailure() *Failure {
	if x, ok := x.GetExecutionStatus().(*ExecutionStatus_Failure); ok {
		return x.Failure
	}
	return nil
}

type isExecutionStatus_ExecutionStatus interface {
	isExecutionStatus_ExecutionStatus()
}

type ExecutionStatus_Success struct {
	// Gas used in the success case.
	Success *emptypb.Empty `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type ExecutionStatus_Failure struct {
	// Gas used in the failed case, and the error.
	Failure *Failure `protobuf:"bytes,2,opt,name=failure,proto3,oneof"`
}

func (*ExecutionStatus_Success) isExecutionStatus_ExecutionStatus() {}

func (*ExecutionStatus_Failure) isExecutionStatus_ExecutionStatus() {}

type Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *ExecutionFailureStatus `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// / Which command the error occurred
	CommandIndex *uint32 `protobuf:"varint,2,opt,name=command_index,json=commandIndex,proto3,oneof" json:"command_index,omitempty"`
}

func (x *Failure) Reset() {
	*x = Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Failure) ProtoMessage() {}

func (x *Failure) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Failure.ProtoReflect.Descriptor instead.
func (*Failure) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{104}
}

func (x *Failure) GetError() *ExecutionFailureStatus {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Failure) GetCommandIndex() uint32 {
	if x != nil && x.CommandIndex != nil {
		return *x.CommandIndex
	}
	return 0
}

type ExecutionFailureStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExecutionFailureStatus:
	//
	//	*ExecutionFailureStatus_InsufficientGas
	//	*ExecutionFailureStatus_InvalidGasObject
	//	*ExecutionFailureStatus_InvariantViolation
	//	*ExecutionFailureStatus_FeatureNotYetSupported
	//	*ExecutionFailureStatus_MoveObjectTooBig_
	//	*ExecutionFailureStatus_MovePackageTooBig_
	//	*ExecutionFailureStatus_CircularObjectOwnership_
	//	*ExecutionFailureStatus_InsufficientCoinBalance
	//	*ExecutionFailureStatus_CoinBalanceOverflow
	//	*ExecutionFailureStatus_PublishErrorNonZeroAddress
	//	*ExecutionFailureStatus_SuiMoveVerificationError
	//	*ExecutionFailureStatus_MovePrimitiveRuntimeError
	//	*ExecutionFailureStatus_MoveAbort_
	//	*ExecutionFailureStatus_VmVerificationOrDeserializationError
	//	*ExecutionFailureStatus_VmInvariantViolation
	//	*ExecutionFailureStatus_FunctionNotFound
	//	*ExecutionFailureStatus_ArityMismatch
	//	*ExecutionFailureStatus_TypeArityMismatch
	//	*ExecutionFailureStatus_NonEntryFunctionInvoked
	//	*ExecutionFailureStatus_CommandArgError
	//	*ExecutionFailureStatus_TypeArgumentError
	//	*ExecutionFailureStatus_UnusedValueWithoutDrop_
	//	*ExecutionFailureStatus_InvalidPublicFunctionReturnType_
	//	*ExecutionFailureStatus_InvalidTransferObject
	//	*ExecutionFailureStatus_EffectsTooLarge_
	//	*ExecutionFailureStatus_PublishUpgradeMissingDependency
	//	*ExecutionFailureStatus_PublishUpgradeDependencyDowngrade
	//	*ExecutionFailureStatus_PackageUpgradeError
	//	*ExecutionFailureStatus_WrittenObjectsTooLarge_
	//	*ExecutionFailureStatus_CertificateDenied
	//	*ExecutionFailureStatus_SuiMoveVerificationTimedout
	//	*ExecutionFailureStatus_SharedObjectOperationNotAllowed
	//	*ExecutionFailureStatus_InputObjectDeleted
	ExecutionFailureStatus isExecutionFailureStatus_ExecutionFailureStatus `protobuf_oneof:"execution_failure_status"`
}

func (x *ExecutionFailureStatus) Reset() {
	*x = ExecutionFailureStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus) ProtoMessage() {}

func (x *ExecutionFailureStatus) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105}
}

func (m *ExecutionFailureStatus) GetExecutionFailureStatus() isExecutionFailureStatus_ExecutionFailureStatus {
	if m != nil {
		return m.ExecutionFailureStatus
	}
	return nil
}

func (x *ExecutionFailureStatus) GetInsufficientGas() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_InsufficientGas); ok {
		return x.InsufficientGas
	}
	return nil
}

func (x *ExecutionFailureStatus) GetInvalidGasObject() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_InvalidGasObject); ok {
		return x.InvalidGasObject
	}
	return nil
}

func (x *ExecutionFailureStatus) GetInvariantViolation() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_InvariantViolation); ok {
		return x.InvariantViolation
	}
	return nil
}

func (x *ExecutionFailureStatus) GetFeatureNotYetSupported() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_FeatureNotYetSupported); ok {
		return x.FeatureNotYetSupported
	}
	return nil
}

func (x *ExecutionFailureStatus) GetMoveObjectTooBig() *ExecutionFailureStatus_MoveObjectTooBig {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_MoveObjectTooBig_); ok {
		return x.MoveObjectTooBig
	}
	return nil
}

func (x *ExecutionFailureStatus) GetMovePackageTooBig() *ExecutionFailureStatus_MovePackageTooBig {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_MovePackageTooBig_); ok {
		return x.MovePackageTooBig
	}
	return nil
}

func (x *ExecutionFailureStatus) GetCircularObjectOwnership() *ExecutionFailureStatus_CircularObjectOwnership {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_CircularObjectOwnership_); ok {
		return x.CircularObjectOwnership
	}
	return nil
}

func (x *ExecutionFailureStatus) GetInsufficientCoinBalance() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_InsufficientCoinBalance); ok {
		return x.InsufficientCoinBalance
	}
	return nil
}

func (x *ExecutionFailureStatus) GetCoinBalanceOverflow() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_CoinBalanceOverflow); ok {
		return x.CoinBalanceOverflow
	}
	return nil
}

func (x *ExecutionFailureStatus) GetPublishErrorNonZeroAddress() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_PublishErrorNonZeroAddress); ok {
		return x.PublishErrorNonZeroAddress
	}
	return nil
}

func (x *ExecutionFailureStatus) GetSuiMoveVerificationError() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_SuiMoveVerificationError); ok {
		return x.SuiMoveVerificationError
	}
	return nil
}

func (x *ExecutionFailureStatus) GetMovePrimitiveRuntimeError() *ExecutionFailureStatus_MoveLocationOpt {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_MovePrimitiveRuntimeError); ok {
		return x.MovePrimitiveRuntimeError
	}
	return nil
}

func (x *ExecutionFailureStatus) GetMoveAbort() *ExecutionFailureStatus_MoveAbort {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_MoveAbort_); ok {
		return x.MoveAbort
	}
	return nil
}

func (x *ExecutionFailureStatus) GetVmVerificationOrDeserializationError() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_VmVerificationOrDeserializationError); ok {
		return x.VmVerificationOrDeserializationError
	}
	return nil
}

func (x *ExecutionFailureStatus) GetVmInvariantViolation() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_VmInvariantViolation); ok {
		return x.VmInvariantViolation
	}
	return nil
}

func (x *ExecutionFailureStatus) GetFunctionNotFound() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_FunctionNotFound); ok {
		return x.FunctionNotFound
	}
	return nil
}

func (x *ExecutionFailureStatus) GetArityMismatch() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_ArityMismatch); ok {
		return x.ArityMismatch
	}
	return nil
}

func (x *ExecutionFailureStatus) GetTypeArityMismatch() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_TypeArityMismatch); ok {
		return x.TypeArityMismatch
	}
	return nil
}

func (x *ExecutionFailureStatus) GetNonEntryFunctionInvoked() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_NonEntryFunctionInvoked); ok {
		return x.NonEntryFunctionInvoked
	}
	return nil
}

func (x *ExecutionFailureStatus) GetCommandArgError() *ExecutionFailureStatus_CommandArgumentError_ {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_CommandArgError); ok {
		return x.CommandArgError
	}
	return nil
}

func (x *ExecutionFailureStatus) GetTypeArgumentError() *ExecutionFailureStatus_TypeArgumentError_ {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_TypeArgumentError); ok {
		return x.TypeArgumentError
	}
	return nil
}

func (x *ExecutionFailureStatus) GetUnusedValueWithoutDrop() *ExecutionFailureStatus_UnusedValueWithoutDrop {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_UnusedValueWithoutDrop_); ok {
		return x.UnusedValueWithoutDrop
	}
	return nil
}

func (x *ExecutionFailureStatus) GetInvalidPublicFunctionReturnType() *ExecutionFailureStatus_InvalidPublicFunctionReturnType {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_InvalidPublicFunctionReturnType_); ok {
		return x.InvalidPublicFunctionReturnType
	}
	return nil
}

func (x *ExecutionFailureStatus) GetInvalidTransferObject() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_InvalidTransferObject); ok {
		return x.InvalidTransferObject
	}
	return nil
}

func (x *ExecutionFailureStatus) GetEffectsTooLarge() *ExecutionFailureStatus_EffectsTooLarge {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_EffectsTooLarge_); ok {
		return x.EffectsTooLarge
	}
	return nil
}

func (x *ExecutionFailureStatus) GetPublishUpgradeMissingDependency() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_PublishUpgradeMissingDependency); ok {
		return x.PublishUpgradeMissingDependency
	}
	return nil
}

func (x *ExecutionFailureStatus) GetPublishUpgradeDependencyDowngrade() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_PublishUpgradeDependencyDowngrade); ok {
		return x.PublishUpgradeDependencyDowngrade
	}
	return nil
}

func (x *ExecutionFailureStatus) GetPackageUpgradeError() *ExecutionFailureStatus_PackageUpgradeError_ {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_PackageUpgradeError); ok {
		return x.PackageUpgradeError
	}
	return nil
}

func (x *ExecutionFailureStatus) GetWrittenObjectsTooLarge() *ExecutionFailureStatus_WrittenObjectsTooLarge {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_WrittenObjectsTooLarge_); ok {
		return x.WrittenObjectsTooLarge
	}
	return nil
}

func (x *ExecutionFailureStatus) GetCertificateDenied() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_CertificateDenied); ok {
		return x.CertificateDenied
	}
	return nil
}

func (x *ExecutionFailureStatus) GetSuiMoveVerificationTimedout() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_SuiMoveVerificationTimedout); ok {
		return x.SuiMoveVerificationTimedout
	}
	return nil
}

func (x *ExecutionFailureStatus) GetSharedObjectOperationNotAllowed() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_SharedObjectOperationNotAllowed); ok {
		return x.SharedObjectOperationNotAllowed
	}
	return nil
}

func (x *ExecutionFailureStatus) GetInputObjectDeleted() *emptypb.Empty {
	if x, ok := x.GetExecutionFailureStatus().(*ExecutionFailureStatus_InputObjectDeleted); ok {
		return x.InputObjectDeleted
	}
	return nil
}

type isExecutionFailureStatus_ExecutionFailureStatus interface {
	isExecutionFailureStatus_ExecutionFailureStatus()
}

type ExecutionFailureStatus_InsufficientGas struct {
	InsufficientGas *emptypb.Empty `protobuf:"bytes,1,opt,name=insufficient_gas,json=insufficientGas,proto3,oneof"`
}

type ExecutionFailureStatus_InvalidGasObject struct {
	InvalidGasObject *emptypb.Empty `protobuf:"bytes,2,opt,name=invalid_gas_object,json=invalidGasObject,proto3,oneof"`
}

type ExecutionFailureStatus_InvariantViolation struct {
	InvariantViolation *emptypb.Empty `protobuf:"bytes,3,opt,name=invariant_violation,json=invariantViolation,proto3,oneof"`
}

type ExecutionFailureStatus_FeatureNotYetSupported struct {
	FeatureNotYetSupported *emptypb.Empty `protobuf:"bytes,4,opt,name=feature_not_yet_supported,json=featureNotYetSupported,proto3,oneof"`
}

type ExecutionFailureStatus_MoveObjectTooBig_ struct {
	MoveObjectTooBig *ExecutionFailureStatus_MoveObjectTooBig `protobuf:"bytes,5,opt,name=move_object_too_big,json=moveObjectTooBig,proto3,oneof"`
}

type ExecutionFailureStatus_MovePackageTooBig_ struct {
	MovePackageTooBig *ExecutionFailureStatus_MovePackageTooBig `protobuf:"bytes,6,opt,name=move_package_too_big,json=movePackageTooBig,proto3,oneof"`
}

type ExecutionFailureStatus_CircularObjectOwnership_ struct {
	CircularObjectOwnership *ExecutionFailureStatus_CircularObjectOwnership `protobuf:"bytes,7,opt,name=circular_object_ownership,json=circularObjectOwnership,proto3,oneof"`
}

type ExecutionFailureStatus_InsufficientCoinBalance struct {
	InsufficientCoinBalance *emptypb.Empty `protobuf:"bytes,8,opt,name=insufficient_coin_balance,json=insufficientCoinBalance,proto3,oneof"`
}

type ExecutionFailureStatus_CoinBalanceOverflow struct {
	CoinBalanceOverflow *emptypb.Empty `protobuf:"bytes,9,opt,name=coin_balance_overflow,json=coinBalanceOverflow,proto3,oneof"`
}

type ExecutionFailureStatus_PublishErrorNonZeroAddress struct {
	PublishErrorNonZeroAddress *emptypb.Empty `protobuf:"bytes,10,opt,name=publish_error_non_zero_address,json=publishErrorNonZeroAddress,proto3,oneof"`
}

type ExecutionFailureStatus_SuiMoveVerificationError struct {
	SuiMoveVerificationError *emptypb.Empty `protobuf:"bytes,11,opt,name=sui_move_verification_error,json=suiMoveVerificationError,proto3,oneof"`
}

type ExecutionFailureStatus_MovePrimitiveRuntimeError struct {
	MovePrimitiveRuntimeError *ExecutionFailureStatus_MoveLocationOpt `protobuf:"bytes,12,opt,name=move_primitive_runtime_error,json=movePrimitiveRuntimeError,proto3,oneof"`
}

type ExecutionFailureStatus_MoveAbort_ struct {
	MoveAbort *ExecutionFailureStatus_MoveAbort `protobuf:"bytes,13,opt,name=move_abort,json=moveAbort,proto3,oneof"`
}

type ExecutionFailureStatus_VmVerificationOrDeserializationError struct {
	VmVerificationOrDeserializationError *emptypb.Empty `protobuf:"bytes,14,opt,name=vm_verification_or_deserialization_error,json=vmVerificationOrDeserializationError,proto3,oneof"`
}

type ExecutionFailureStatus_VmInvariantViolation struct {
	VmInvariantViolation *emptypb.Empty `protobuf:"bytes,15,opt,name=vm_invariant_violation,json=vmInvariantViolation,proto3,oneof"`
}

type ExecutionFailureStatus_FunctionNotFound struct {
	FunctionNotFound *emptypb.Empty `protobuf:"bytes,16,opt,name=function_not_found,json=functionNotFound,proto3,oneof"`
}

type ExecutionFailureStatus_ArityMismatch struct {
	ArityMismatch *emptypb.Empty `protobuf:"bytes,17,opt,name=arity_mismatch,json=arityMismatch,proto3,oneof"`
}

type ExecutionFailureStatus_TypeArityMismatch struct {
	TypeArityMismatch *emptypb.Empty `protobuf:"bytes,18,opt,name=type_arity_mismatch,json=typeArityMismatch,proto3,oneof"`
}

type ExecutionFailureStatus_NonEntryFunctionInvoked struct {
	NonEntryFunctionInvoked *emptypb.Empty `protobuf:"bytes,19,opt,name=non_entry_function_invoked,json=nonEntryFunctionInvoked,proto3,oneof"`
}

type ExecutionFailureStatus_CommandArgError struct {
	CommandArgError *ExecutionFailureStatus_CommandArgumentError_ `protobuf:"bytes,20,opt,name=command_arg_error,json=commandArgError,proto3,oneof"`
}

type ExecutionFailureStatus_TypeArgumentError struct {
	TypeArgumentError *ExecutionFailureStatus_TypeArgumentError_ `protobuf:"bytes,21,opt,name=type_argument_error,json=typeArgumentError,proto3,oneof"`
}

type ExecutionFailureStatus_UnusedValueWithoutDrop_ struct {
	UnusedValueWithoutDrop *ExecutionFailureStatus_UnusedValueWithoutDrop `protobuf:"bytes,22,opt,name=unused_value_without_drop,json=unusedValueWithoutDrop,proto3,oneof"`
}

type ExecutionFailureStatus_InvalidPublicFunctionReturnType_ struct {
	InvalidPublicFunctionReturnType *ExecutionFailureStatus_InvalidPublicFunctionReturnType `protobuf:"bytes,23,opt,name=invalid_public_function_return_type,json=invalidPublicFunctionReturnType,proto3,oneof"`
}

type ExecutionFailureStatus_InvalidTransferObject struct {
	InvalidTransferObject *emptypb.Empty `protobuf:"bytes,24,opt,name=invalid_transfer_object,json=invalidTransferObject,proto3,oneof"`
}

type ExecutionFailureStatus_EffectsTooLarge_ struct {
	EffectsTooLarge *ExecutionFailureStatus_EffectsTooLarge `protobuf:"bytes,25,opt,name=effects_too_large,json=effectsTooLarge,proto3,oneof"`
}

type ExecutionFailureStatus_PublishUpgradeMissingDependency struct {
	PublishUpgradeMissingDependency *emptypb.Empty `protobuf:"bytes,26,opt,name=publish_upgrade_missing_dependency,json=publishUpgradeMissingDependency,proto3,oneof"`
}

type ExecutionFailureStatus_PublishUpgradeDependencyDowngrade struct {
	PublishUpgradeDependencyDowngrade *emptypb.Empty `protobuf:"bytes,27,opt,name=publish_upgrade_dependency_downgrade,json=publishUpgradeDependencyDowngrade,proto3,oneof"`
}

type ExecutionFailureStatus_PackageUpgradeError struct {
	PackageUpgradeError *ExecutionFailureStatus_PackageUpgradeError_ `protobuf:"bytes,28,opt,name=package_upgrade_error,json=packageUpgradeError,proto3,oneof"`
}

type ExecutionFailureStatus_WrittenObjectsTooLarge_ struct {
	WrittenObjectsTooLarge *ExecutionFailureStatus_WrittenObjectsTooLarge `protobuf:"bytes,29,opt,name=written_objects_too_large,json=writtenObjectsTooLarge,proto3,oneof"`
}

type ExecutionFailureStatus_CertificateDenied struct {
	CertificateDenied *emptypb.Empty `protobuf:"bytes,30,opt,name=certificate_denied,json=certificateDenied,proto3,oneof"`
}

type ExecutionFailureStatus_SuiMoveVerificationTimedout struct {
	SuiMoveVerificationTimedout *emptypb.Empty `protobuf:"bytes,31,opt,name=sui_move_verification_timedout,json=suiMoveVerificationTimedout,proto3,oneof"`
}

type ExecutionFailureStatus_SharedObjectOperationNotAllowed struct {
	SharedObjectOperationNotAllowed *emptypb.Empty `protobuf:"bytes,32,opt,name=shared_object_operation_not_allowed,json=sharedObjectOperationNotAllowed,proto3,oneof"`
}

type ExecutionFailureStatus_InputObjectDeleted struct {
	InputObjectDeleted *emptypb.Empty `protobuf:"bytes,33,opt,name=Input_object_deleted,json=InputObjectDeleted,proto3,oneof"`
}

func (*ExecutionFailureStatus_InsufficientGas) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_InvalidGasObject) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_InvariantViolation) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_FeatureNotYetSupported) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_MoveObjectTooBig_) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_MovePackageTooBig_) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_CircularObjectOwnership_) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_InsufficientCoinBalance) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_CoinBalanceOverflow) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_PublishErrorNonZeroAddress) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_SuiMoveVerificationError) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_MovePrimitiveRuntimeError) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_MoveAbort_) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_VmVerificationOrDeserializationError) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_VmInvariantViolation) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_FunctionNotFound) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_ArityMismatch) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_TypeArityMismatch) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_NonEntryFunctionInvoked) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_CommandArgError) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_TypeArgumentError) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_UnusedValueWithoutDrop_) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_InvalidPublicFunctionReturnType_) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_InvalidTransferObject) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_EffectsTooLarge_) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_PublishUpgradeMissingDependency) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_PublishUpgradeDependencyDowngrade) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_PackageUpgradeError) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_WrittenObjectsTooLarge_) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_CertificateDenied) isExecutionFailureStatus_ExecutionFailureStatus() {}

func (*ExecutionFailureStatus_SuiMoveVerificationTimedout) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_SharedObjectOperationNotAllowed) isExecutionFailureStatus_ExecutionFailureStatus() {
}

func (*ExecutionFailureStatus_InputObjectDeleted) isExecutionFailureStatus_ExecutionFailureStatus() {}

type CommandArgumentError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CommandArgumentError:
	//
	//	*CommandArgumentError_TypeMismatch
	//	*CommandArgumentError_InvalidBcsBytes
	//	*CommandArgumentError_InvalidUsageOfPureArg
	//	*CommandArgumentError_InvalidArgumentToPrivateEntryFunction
	//	*CommandArgumentError_IndexOutOfBounds_
	//	*CommandArgumentError_SecondaryIndexOutOfBounds_
	//	*CommandArgumentError_InvalidResultArity_
	//	*CommandArgumentError_InvalidGasCoinUsage
	//	*CommandArgumentError_InvalidValueUsage
	//	*CommandArgumentError_InvalidObjectByValue
	//	*CommandArgumentError_InvalidObjectByMutRef
	//	*CommandArgumentError_SharedObjectOperationNotAllowed
	CommandArgumentError isCommandArgumentError_CommandArgumentError `protobuf_oneof:"command_argument_error"`
}

func (x *CommandArgumentError) Reset() {
	*x = CommandArgumentError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandArgumentError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandArgumentError) ProtoMessage() {}

func (x *CommandArgumentError) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandArgumentError.ProtoReflect.Descriptor instead.
func (*CommandArgumentError) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{106}
}

func (m *CommandArgumentError) GetCommandArgumentError() isCommandArgumentError_CommandArgumentError {
	if m != nil {
		return m.CommandArgumentError
	}
	return nil
}

func (x *CommandArgumentError) GetTypeMismatch() *emptypb.Empty {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_TypeMismatch); ok {
		return x.TypeMismatch
	}
	return nil
}

func (x *CommandArgumentError) GetInvalidBcsBytes() *emptypb.Empty {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_InvalidBcsBytes); ok {
		return x.InvalidBcsBytes
	}
	return nil
}

func (x *CommandArgumentError) GetInvalidUsageOfPureArg() *emptypb.Empty {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_InvalidUsageOfPureArg); ok {
		return x.InvalidUsageOfPureArg
	}
	return nil
}

func (x *CommandArgumentError) GetInvalidArgumentToPrivateEntryFunction() *emptypb.Empty {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_InvalidArgumentToPrivateEntryFunction); ok {
		return x.InvalidArgumentToPrivateEntryFunction
	}
	return nil
}

func (x *CommandArgumentError) GetIndexOutOfBounds() *CommandArgumentError_IndexOutOfBounds {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_IndexOutOfBounds_); ok {
		return x.IndexOutOfBounds
	}
	return nil
}

func (x *CommandArgumentError) GetSecondaryIndexOutOfBounds() *CommandArgumentError_SecondaryIndexOutOfBounds {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_SecondaryIndexOutOfBounds_); ok {
		return x.SecondaryIndexOutOfBounds
	}
	return nil
}

func (x *CommandArgumentError) GetInvalidResultArity() *CommandArgumentError_InvalidResultArity {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_InvalidResultArity_); ok {
		return x.InvalidResultArity
	}
	return nil
}

func (x *CommandArgumentError) GetInvalidGasCoinUsage() *emptypb.Empty {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_InvalidGasCoinUsage); ok {
		return x.InvalidGasCoinUsage
	}
	return nil
}

func (x *CommandArgumentError) GetInvalidValueUsage() *emptypb.Empty {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_InvalidValueUsage); ok {
		return x.InvalidValueUsage
	}
	return nil
}

func (x *CommandArgumentError) GetInvalidObjectByValue() *emptypb.Empty {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_InvalidObjectByValue); ok {
		return x.InvalidObjectByValue
	}
	return nil
}

func (x *CommandArgumentError) GetInvalidObjectByMutRef() *emptypb.Empty {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_InvalidObjectByMutRef); ok {
		return x.InvalidObjectByMutRef
	}
	return nil
}

func (x *CommandArgumentError) GetSharedObjectOperationNotAllowed() *emptypb.Empty {
	if x, ok := x.GetCommandArgumentError().(*CommandArgumentError_SharedObjectOperationNotAllowed); ok {
		return x.SharedObjectOperationNotAllowed
	}
	return nil
}

type isCommandArgumentError_CommandArgumentError interface {
	isCommandArgumentError_CommandArgumentError()
}

type CommandArgumentError_TypeMismatch struct {
	TypeMismatch *emptypb.Empty `protobuf:"bytes,1,opt,name=type_mismatch,json=typeMismatch,proto3,oneof"`
}

type CommandArgumentError_InvalidBcsBytes struct {
	InvalidBcsBytes *emptypb.Empty `protobuf:"bytes,2,opt,name=invalid_bcs_bytes,json=invalidBcsBytes,proto3,oneof"`
}

type CommandArgumentError_InvalidUsageOfPureArg struct {
	InvalidUsageOfPureArg *emptypb.Empty `protobuf:"bytes,3,opt,name=invalid_usage_of_pure_arg,json=invalidUsageOfPureArg,proto3,oneof"`
}

type CommandArgumentError_InvalidArgumentToPrivateEntryFunction struct {
	InvalidArgumentToPrivateEntryFunction *emptypb.Empty `protobuf:"bytes,4,opt,name=invalid_argument_to_private_entry_function,json=invalidArgumentToPrivateEntryFunction,proto3,oneof"`
}

type CommandArgumentError_IndexOutOfBounds_ struct {
	IndexOutOfBounds *CommandArgumentError_IndexOutOfBounds `protobuf:"bytes,5,opt,name=index_out_of_bounds,json=indexOutOfBounds,proto3,oneof"`
}

type CommandArgumentError_SecondaryIndexOutOfBounds_ struct {
	SecondaryIndexOutOfBounds *CommandArgumentError_SecondaryIndexOutOfBounds `protobuf:"bytes,6,opt,name=secondary_index_out_of_bounds,json=secondaryIndexOutOfBounds,proto3,oneof"`
}

type CommandArgumentError_InvalidResultArity_ struct {
	InvalidResultArity *CommandArgumentError_InvalidResultArity `protobuf:"bytes,7,opt,name=invalid_result_arity,json=invalidResultArity,proto3,oneof"`
}

type CommandArgumentError_InvalidGasCoinUsage struct {
	InvalidGasCoinUsage *emptypb.Empty `protobuf:"bytes,8,opt,name=invalid_gas_coin_usage,json=invalidGasCoinUsage,proto3,oneof"`
}

type CommandArgumentError_InvalidValueUsage struct {
	InvalidValueUsage *emptypb.Empty `protobuf:"bytes,9,opt,name=invalid_value_usage,json=invalidValueUsage,proto3,oneof"`
}

type CommandArgumentError_InvalidObjectByValue struct {
	InvalidObjectByValue *emptypb.Empty `protobuf:"bytes,10,opt,name=invalid_object_by_value,json=invalidObjectByValue,proto3,oneof"`
}

type CommandArgumentError_InvalidObjectByMutRef struct {
	InvalidObjectByMutRef *emptypb.Empty `protobuf:"bytes,11,opt,name=invalid_object_by_mut_ref,json=invalidObjectByMutRef,proto3,oneof"`
}

type CommandArgumentError_SharedObjectOperationNotAllowed struct {
	SharedObjectOperationNotAllowed *emptypb.Empty `protobuf:"bytes,12,opt,name=shared_object_operation_not_allowed,json=sharedObjectOperationNotAllowed,proto3,oneof"`
}

func (*CommandArgumentError_TypeMismatch) isCommandArgumentError_CommandArgumentError() {}

func (*CommandArgumentError_InvalidBcsBytes) isCommandArgumentError_CommandArgumentError() {}

func (*CommandArgumentError_InvalidUsageOfPureArg) isCommandArgumentError_CommandArgumentError() {}

func (*CommandArgumentError_InvalidArgumentToPrivateEntryFunction) isCommandArgumentError_CommandArgumentError() {
}

func (*CommandArgumentError_IndexOutOfBounds_) isCommandArgumentError_CommandArgumentError() {}

func (*CommandArgumentError_SecondaryIndexOutOfBounds_) isCommandArgumentError_CommandArgumentError() {
}

func (*CommandArgumentError_InvalidResultArity_) isCommandArgumentError_CommandArgumentError() {}

func (*CommandArgumentError_InvalidGasCoinUsage) isCommandArgumentError_CommandArgumentError() {}

func (*CommandArgumentError_InvalidValueUsage) isCommandArgumentError_CommandArgumentError() {}

func (*CommandArgumentError_InvalidObjectByValue) isCommandArgumentError_CommandArgumentError() {}

func (*CommandArgumentError_InvalidObjectByMutRef) isCommandArgumentError_CommandArgumentError() {}

func (*CommandArgumentError_SharedObjectOperationNotAllowed) isCommandArgumentError_CommandArgumentError() {
}

type TypeArgumentError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TypeArgumentError:
	//
	//	*TypeArgumentError_TypeNotFound
	//	*TypeArgumentError_ConstraintNotSatisfied
	TypeArgumentError isTypeArgumentError_TypeArgumentError `protobuf_oneof:"type_argument_error"`
}

func (x *TypeArgumentError) Reset() {
	*x = TypeArgumentError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeArgumentError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeArgumentError) ProtoMessage() {}

func (x *TypeArgumentError) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeArgumentError.ProtoReflect.Descriptor instead.
func (*TypeArgumentError) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{107}
}

func (m *TypeArgumentError) GetTypeArgumentError() isTypeArgumentError_TypeArgumentError {
	if m != nil {
		return m.TypeArgumentError
	}
	return nil
}

func (x *TypeArgumentError) GetTypeNotFound() *emptypb.Empty {
	if x, ok := x.GetTypeArgumentError().(*TypeArgumentError_TypeNotFound); ok {
		return x.TypeNotFound
	}
	return nil
}

func (x *TypeArgumentError) GetConstraintNotSatisfied() *emptypb.Empty {
	if x, ok := x.GetTypeArgumentError().(*TypeArgumentError_ConstraintNotSatisfied); ok {
		return x.ConstraintNotSatisfied
	}
	return nil
}

type isTypeArgumentError_TypeArgumentError interface {
	isTypeArgumentError_TypeArgumentError()
}

type TypeArgumentError_TypeNotFound struct {
	TypeNotFound *emptypb.Empty `protobuf:"bytes,1,opt,name=type_not_found,json=typeNotFound,proto3,oneof"`
}

type TypeArgumentError_ConstraintNotSatisfied struct {
	ConstraintNotSatisfied *emptypb.Empty `protobuf:"bytes,2,opt,name=constraint_not_satisfied,json=constraintNotSatisfied,proto3,oneof"`
}

func (*TypeArgumentError_TypeNotFound) isTypeArgumentError_TypeArgumentError() {}

func (*TypeArgumentError_ConstraintNotSatisfied) isTypeArgumentError_TypeArgumentError() {}

type PackageUpgradeError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to PackageUpgradeError:
	//
	//	*PackageUpgradeError_UnableToFetchPackage_
	//	*PackageUpgradeError_NotAPackage_
	//	*PackageUpgradeError_IncompatibleUpgrade
	//	*PackageUpgradeError_DigestDoesNotMatch_
	//	*PackageUpgradeError_UnknownUpgradePolicy_
	//	*PackageUpgradeError_PackageIdDoesNotMatch
	PackageUpgradeError isPackageUpgradeError_PackageUpgradeError `protobuf_oneof:"package_upgrade_error"`
}

func (x *PackageUpgradeError) Reset() {
	*x = PackageUpgradeError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageUpgradeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageUpgradeError) ProtoMessage() {}

func (x *PackageUpgradeError) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageUpgradeError.ProtoReflect.Descriptor instead.
func (*PackageUpgradeError) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{108}
}

func (m *PackageUpgradeError) GetPackageUpgradeError() isPackageUpgradeError_PackageUpgradeError {
	if m != nil {
		return m.PackageUpgradeError
	}
	return nil
}

func (x *PackageUpgradeError) GetUnableToFetchPackage() *PackageUpgradeError_UnableToFetchPackage {
	if x, ok := x.GetPackageUpgradeError().(*PackageUpgradeError_UnableToFetchPackage_); ok {
		return x.UnableToFetchPackage
	}
	return nil
}

func (x *PackageUpgradeError) GetNotAPackage() *PackageUpgradeError_NotAPackage {
	if x, ok := x.GetPackageUpgradeError().(*PackageUpgradeError_NotAPackage_); ok {
		return x.NotAPackage
	}
	return nil
}

func (x *PackageUpgradeError) GetIncompatibleUpgrade() *emptypb.Empty {
	if x, ok := x.GetPackageUpgradeError().(*PackageUpgradeError_IncompatibleUpgrade); ok {
		return x.IncompatibleUpgrade
	}
	return nil
}

func (x *PackageUpgradeError) GetDigestDoesNotMatch() *PackageUpgradeError_DigestDoesNotMatch {
	if x, ok := x.GetPackageUpgradeError().(*PackageUpgradeError_DigestDoesNotMatch_); ok {
		return x.DigestDoesNotMatch
	}
	return nil
}

func (x *PackageUpgradeError) GetUnknownUpgradePolicy() *PackageUpgradeError_UnknownUpgradePolicy {
	if x, ok := x.GetPackageUpgradeError().(*PackageUpgradeError_UnknownUpgradePolicy_); ok {
		return x.UnknownUpgradePolicy
	}
	return nil
}

func (x *PackageUpgradeError) GetPackageIdDoesNotMatch() *PackageUpgradeError_PackageIDDoesNotMatch {
	if x, ok := x.GetPackageUpgradeError().(*PackageUpgradeError_PackageIdDoesNotMatch); ok {
		return x.PackageIdDoesNotMatch
	}
	return nil
}

type isPackageUpgradeError_PackageUpgradeError interface {
	isPackageUpgradeError_PackageUpgradeError()
}

type PackageUpgradeError_UnableToFetchPackage_ struct {
	UnableToFetchPackage *PackageUpgradeError_UnableToFetchPackage `protobuf:"bytes,1,opt,name=unable_to_fetch_package,json=unableToFetchPackage,proto3,oneof"`
}

type PackageUpgradeError_NotAPackage_ struct {
	NotAPackage *PackageUpgradeError_NotAPackage `protobuf:"bytes,2,opt,name=not_a_package,json=notAPackage,proto3,oneof"`
}

type PackageUpgradeError_IncompatibleUpgrade struct {
	IncompatibleUpgrade *emptypb.Empty `protobuf:"bytes,3,opt,name=incompatible_upgrade,json=incompatibleUpgrade,proto3,oneof"`
}

type PackageUpgradeError_DigestDoesNotMatch_ struct {
	DigestDoesNotMatch *PackageUpgradeError_DigestDoesNotMatch `protobuf:"bytes,4,opt,name=digest_does_not_match,json=digestDoesNotMatch,proto3,oneof"`
}

type PackageUpgradeError_UnknownUpgradePolicy_ struct {
	UnknownUpgradePolicy *PackageUpgradeError_UnknownUpgradePolicy `protobuf:"bytes,5,opt,name=unknown_upgrade_policy,json=unknownUpgradePolicy,proto3,oneof"`
}

type PackageUpgradeError_PackageIdDoesNotMatch struct {
	PackageIdDoesNotMatch *PackageUpgradeError_PackageIDDoesNotMatch `protobuf:"bytes,6,opt,name=package_id_does_not_match,json=packageIdDoesNotMatch,proto3,oneof"`
}

func (*PackageUpgradeError_UnableToFetchPackage_) isPackageUpgradeError_PackageUpgradeError() {}

func (*PackageUpgradeError_NotAPackage_) isPackageUpgradeError_PackageUpgradeError() {}

func (*PackageUpgradeError_IncompatibleUpgrade) isPackageUpgradeError_PackageUpgradeError() {}

func (*PackageUpgradeError_DigestDoesNotMatch_) isPackageUpgradeError_PackageUpgradeError() {}

func (*PackageUpgradeError_UnknownUpgradePolicy_) isPackageUpgradeError_PackageUpgradeError() {}

func (*PackageUpgradeError_PackageIdDoesNotMatch) isPackageUpgradeError_PackageUpgradeError() {}

type ModuleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ModuleId) Reset() {
	*x = ModuleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleId) ProtoMessage() {}

func (x *ModuleId) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleId.ProtoReflect.Descriptor instead.
func (*ModuleId) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{109}
}

func (x *ModuleId) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ModuleId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TransactionBlockEffectsModifiedAtVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId       *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	SequenceNumber uint64    `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *TransactionBlockEffectsModifiedAtVersions) Reset() {
	*x = TransactionBlockEffectsModifiedAtVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBlockEffectsModifiedAtVersions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBlockEffectsModifiedAtVersions) ProtoMessage() {}

func (x *TransactionBlockEffectsModifiedAtVersions) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBlockEffectsModifiedAtVersions.ProtoReflect.Descriptor instead.
func (*TransactionBlockEffectsModifiedAtVersions) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{110}
}

func (x *TransactionBlockEffectsModifiedAtVersions) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

func (x *TransactionBlockEffectsModifiedAtVersions) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type ObjectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ObjectType:
	//
	//	*ObjectType_Package
	//	*ObjectType_Struct
	ObjectType isObjectType_ObjectType `protobuf_oneof:"object_type"`
}

func (x *ObjectType) Reset() {
	*x = ObjectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectType) ProtoMessage() {}

func (x *ObjectType) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectType.ProtoReflect.Descriptor instead.
func (*ObjectType) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{111}
}

func (m *ObjectType) GetObjectType() isObjectType_ObjectType {
	if m != nil {
		return m.ObjectType
	}
	return nil
}

func (x *ObjectType) GetPackage() *emptypb.Empty {
	if x, ok := x.GetObjectType().(*ObjectType_Package); ok {
		return x.Package
	}
	return nil
}

func (x *ObjectType) GetStruct() *MoveObjectType {
	if x, ok := x.GetObjectType().(*ObjectType_Struct); ok {
		return x.Struct
	}
	return nil
}

type isObjectType_ObjectType interface {
	isObjectType_ObjectType()
}

type ObjectType_Package struct {
	// Move package containing one or more bytecode modules
	Package *emptypb.Empty `protobuf:"bytes,1,opt,name=package,proto3,oneof"`
}

type ObjectType_Struct struct {
	// A Move struct of the given type
	Struct *MoveObjectType `protobuf:"bytes,2,opt,name=struct,proto3,oneof"`
}

func (*ObjectType_Package) isObjectType_ObjectType() {}

func (*ObjectType_Struct) isObjectType_ObjectType() {}

type MoveObjectType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MoveObjectType:
	//
	//	*MoveObjectType_Other
	//	*MoveObjectType_GasCoin
	//	*MoveObjectType_StakedSui
	//	*MoveObjectType_Coin
	MoveObjectType isMoveObjectType_MoveObjectType `protobuf_oneof:"move_object_type"`
}

func (x *MoveObjectType) Reset() {
	*x = MoveObjectType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveObjectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveObjectType) ProtoMessage() {}

func (x *MoveObjectType) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveObjectType.ProtoReflect.Descriptor instead.
func (*MoveObjectType) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{112}
}

func (m *MoveObjectType) GetMoveObjectType() isMoveObjectType_MoveObjectType {
	if m != nil {
		return m.MoveObjectType
	}
	return nil
}

func (x *MoveObjectType) GetOther() *StructTag {
	if x, ok := x.GetMoveObjectType().(*MoveObjectType_Other); ok {
		return x.Other
	}
	return nil
}

func (x *MoveObjectType) GetGasCoin() *emptypb.Empty {
	if x, ok := x.GetMoveObjectType().(*MoveObjectType_GasCoin); ok {
		return x.GasCoin
	}
	return nil
}

func (x *MoveObjectType) GetStakedSui() *emptypb.Empty {
	if x, ok := x.GetMoveObjectType().(*MoveObjectType_StakedSui); ok {
		return x.StakedSui
	}
	return nil
}

func (x *MoveObjectType) GetCoin() *TypeTag {
	if x, ok := x.GetMoveObjectType().(*MoveObjectType_Coin); ok {
		return x.Coin
	}
	return nil
}

type isMoveObjectType_MoveObjectType interface {
	isMoveObjectType_MoveObjectType()
}

type MoveObjectType_Other struct {
	// A type that is not `0x2::coin::Coin<T>`
	Other *StructTag `protobuf:"bytes,1,opt,name=other,proto3,oneof"`
}

type MoveObjectType_GasCoin struct {
	// A SUI coin (i.e., `0x2::coin::Coin<0x2::sui::SUI>`)
	GasCoin *emptypb.Empty `protobuf:"bytes,2,opt,name=gas_coin,json=gasCoin,proto3,oneof"`
}

type MoveObjectType_StakedSui struct {
	// A record of a staked SUI coin (i.e., `0x3::staking_pool::StakedSui`)
	StakedSui *emptypb.Empty `protobuf:"bytes,3,opt,name=staked_sui,json=stakedSui,proto3,oneof"`
}

type MoveObjectType_Coin struct {
	// A non-SUI coin type (i.e., `0x2::coin::Coin<T> where T != 0x2::sui::SUI`)
	Coin *TypeTag `protobuf:"bytes,4,opt,name=coin,proto3,oneof"`
}

func (*MoveObjectType_Other) isMoveObjectType_MoveObjectType() {}

func (*MoveObjectType_GasCoin) isMoveObjectType_MoveObjectType() {}

func (*MoveObjectType_StakedSui) isMoveObjectType_MoveObjectType() {}

func (*MoveObjectType_Coin) isMoveObjectType_MoveObjectType() {}

type TypeOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName string    `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	StructName string    `protobuf:"bytes,2,opt,name=struct_name,json=structName,proto3" json:"struct_name,omitempty"`
	Package    *ObjectID `protobuf:"bytes,3,opt,name=package,proto3" json:"package,omitempty"`
}

func (x *TypeOrigin) Reset() {
	*x = TypeOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeOrigin) ProtoMessage() {}

func (x *TypeOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeOrigin.ProtoReflect.Descriptor instead.
func (*TypeOrigin) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{113}
}

func (x *TypeOrigin) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *TypeOrigin) GetStructName() string {
	if x != nil {
		return x.StructName
	}
	return ""
}

func (x *TypeOrigin) GetPackage() *ObjectID {
	if x != nil {
		return x.Package
	}
	return nil
}

type UpgradeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradedId      *ObjectID `protobuf:"bytes,1,opt,name=upgraded_id,json=upgradedId,proto3" json:"upgraded_id,omitempty"`
	UpgradedVersion uint64    `protobuf:"varint,2,opt,name=upgraded_version,json=upgradedVersion,proto3" json:"upgraded_version,omitempty"`
}

func (x *UpgradeInfo) Reset() {
	*x = UpgradeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeInfo) ProtoMessage() {}

func (x *UpgradeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeInfo.ProtoReflect.Descriptor instead.
func (*UpgradeInfo) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{114}
}

func (x *UpgradeInfo) GetUpgradedId() *ObjectID {
	if x != nil {
		return x.UpgradedId
	}
	return nil
}

func (x *UpgradeInfo) GetUpgradedVersion() uint64 {
	if x != nil {
		return x.UpgradedVersion
	}
	return 0
}

type GenesisObject_RawObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data  *Data  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Owner *Owner `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *GenesisObject_RawObject) Reset() {
	*x = GenesisObject_RawObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisObject_RawObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisObject_RawObject) ProtoMessage() {}

func (x *GenesisObject_RawObject) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisObject_RawObject.ProtoReflect.Descriptor instead.
func (*GenesisObject_RawObject) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{65, 0}
}

func (x *GenesisObject_RawObject) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GenesisObject_RawObject) GetOwner() *Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

type ExecutionFailureStatus_MoveObjectTooBig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectSize    uint64 `protobuf:"varint,1,opt,name=object_size,json=objectSize,proto3" json:"object_size,omitempty"`
	MaxObjectSize uint64 `protobuf:"varint,2,opt,name=max_object_size,json=maxObjectSize,proto3" json:"max_object_size,omitempty"`
}

func (x *ExecutionFailureStatus_MoveObjectTooBig) Reset() {
	*x = ExecutionFailureStatus_MoveObjectTooBig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_MoveObjectTooBig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_MoveObjectTooBig) ProtoMessage() {}

func (x *ExecutionFailureStatus_MoveObjectTooBig) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_MoveObjectTooBig.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_MoveObjectTooBig) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 0}
}

func (x *ExecutionFailureStatus_MoveObjectTooBig) GetObjectSize() uint64 {
	if x != nil {
		return x.ObjectSize
	}
	return 0
}

func (x *ExecutionFailureStatus_MoveObjectTooBig) GetMaxObjectSize() uint64 {
	if x != nil {
		return x.MaxObjectSize
	}
	return 0
}

type ExecutionFailureStatus_MovePackageTooBig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectSize    uint64 `protobuf:"varint,1,opt,name=object_size,json=objectSize,proto3" json:"object_size,omitempty"`
	MaxObjectSize uint64 `protobuf:"varint,2,opt,name=max_object_size,json=maxObjectSize,proto3" json:"max_object_size,omitempty"`
}

func (x *ExecutionFailureStatus_MovePackageTooBig) Reset() {
	*x = ExecutionFailureStatus_MovePackageTooBig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_MovePackageTooBig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_MovePackageTooBig) ProtoMessage() {}

func (x *ExecutionFailureStatus_MovePackageTooBig) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_MovePackageTooBig.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_MovePackageTooBig) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 1}
}

func (x *ExecutionFailureStatus_MovePackageTooBig) GetObjectSize() uint64 {
	if x != nil {
		return x.ObjectSize
	}
	return 0
}

func (x *ExecutionFailureStatus_MovePackageTooBig) GetMaxObjectSize() uint64 {
	if x != nil {
		return x.MaxObjectSize
	}
	return 0
}

type ExecutionFailureStatus_CircularObjectOwnership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Object *ObjectID `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *ExecutionFailureStatus_CircularObjectOwnership) Reset() {
	*x = ExecutionFailureStatus_CircularObjectOwnership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_CircularObjectOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_CircularObjectOwnership) ProtoMessage() {}

func (x *ExecutionFailureStatus_CircularObjectOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_CircularObjectOwnership.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_CircularObjectOwnership) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 2}
}

func (x *ExecutionFailureStatus_CircularObjectOwnership) GetObject() *ObjectID {
	if x != nil {
		return x.Object
	}
	return nil
}

type ExecutionFailureStatus_MoveLocationOpt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoveLocation *ExecutionFailureStatus_MoveLocation `protobuf:"bytes,1,opt,name=move_location,json=moveLocation,proto3,oneof" json:"move_location,omitempty"`
}

func (x *ExecutionFailureStatus_MoveLocationOpt) Reset() {
	*x = ExecutionFailureStatus_MoveLocationOpt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_MoveLocationOpt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_MoveLocationOpt) ProtoMessage() {}

func (x *ExecutionFailureStatus_MoveLocationOpt) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_MoveLocationOpt.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_MoveLocationOpt) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 3}
}

func (x *ExecutionFailureStatus_MoveLocationOpt) GetMoveLocation() *ExecutionFailureStatus_MoveLocation {
	if x != nil {
		return x.MoveLocation
	}
	return nil
}

type ExecutionFailureStatus_MoveAbort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MoveLocation *ExecutionFailureStatus_MoveLocation `protobuf:"bytes,1,opt,name=move_location,json=moveLocation,proto3" json:"move_location,omitempty"`
	AbortCode    uint64                               `protobuf:"varint,2,opt,name=abort_code,json=abortCode,proto3" json:"abort_code,omitempty"`
}

func (x *ExecutionFailureStatus_MoveAbort) Reset() {
	*x = ExecutionFailureStatus_MoveAbort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_MoveAbort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_MoveAbort) ProtoMessage() {}

func (x *ExecutionFailureStatus_MoveAbort) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_MoveAbort.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_MoveAbort) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 4}
}

func (x *ExecutionFailureStatus_MoveAbort) GetMoveLocation() *ExecutionFailureStatus_MoveLocation {
	if x != nil {
		return x.MoveLocation
	}
	return nil
}

func (x *ExecutionFailureStatus_MoveAbort) GetAbortCode() uint64 {
	if x != nil {
		return x.AbortCode
	}
	return 0
}

type ExecutionFailureStatus_MoveLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module       *ModuleId `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Function     uint32    `protobuf:"varint,2,opt,name=function,proto3" json:"function,omitempty"`
	Instruction  uint32    `protobuf:"varint,3,opt,name=instruction,proto3" json:"instruction,omitempty"`
	FunctionName *string   `protobuf:"bytes,4,opt,name=function_name,json=functionName,proto3,oneof" json:"function_name,omitempty"`
}

func (x *ExecutionFailureStatus_MoveLocation) Reset() {
	*x = ExecutionFailureStatus_MoveLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_MoveLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_MoveLocation) ProtoMessage() {}

func (x *ExecutionFailureStatus_MoveLocation) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_MoveLocation.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_MoveLocation) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 5}
}

func (x *ExecutionFailureStatus_MoveLocation) GetModule() *ModuleId {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *ExecutionFailureStatus_MoveLocation) GetFunction() uint32 {
	if x != nil {
		return x.Function
	}
	return 0
}

func (x *ExecutionFailureStatus_MoveLocation) GetInstruction() uint32 {
	if x != nil {
		return x.Instruction
	}
	return 0
}

func (x *ExecutionFailureStatus_MoveLocation) GetFunctionName() string {
	if x != nil && x.FunctionName != nil {
		return *x.FunctionName
	}
	return ""
}

type ExecutionFailureStatus_CommandArgumentError_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgIdx uint32                `protobuf:"varint,1,opt,name=arg_idx,json=argIdx,proto3" json:"arg_idx,omitempty"`
	Kind   *CommandArgumentError `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ExecutionFailureStatus_CommandArgumentError_) Reset() {
	*x = ExecutionFailureStatus_CommandArgumentError_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_CommandArgumentError_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_CommandArgumentError_) ProtoMessage() {}

func (x *ExecutionFailureStatus_CommandArgumentError_) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_CommandArgumentError_.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_CommandArgumentError_) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 6}
}

func (x *ExecutionFailureStatus_CommandArgumentError_) GetArgIdx() uint32 {
	if x != nil {
		return x.ArgIdx
	}
	return 0
}

func (x *ExecutionFailureStatus_CommandArgumentError_) GetKind() *CommandArgumentError {
	if x != nil {
		return x.Kind
	}
	return nil
}

type ExecutionFailureStatus_TypeArgumentError_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgumentIdx uint32             `protobuf:"varint,1,opt,name=argument_idx,json=argumentIdx,proto3" json:"argument_idx,omitempty"`
	Kind        *TypeArgumentError `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ExecutionFailureStatus_TypeArgumentError_) Reset() {
	*x = ExecutionFailureStatus_TypeArgumentError_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_TypeArgumentError_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_TypeArgumentError_) ProtoMessage() {}

func (x *ExecutionFailureStatus_TypeArgumentError_) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_TypeArgumentError_.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_TypeArgumentError_) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 7}
}

func (x *ExecutionFailureStatus_TypeArgumentError_) GetArgumentIdx() uint32 {
	if x != nil {
		return x.ArgumentIdx
	}
	return 0
}

func (x *ExecutionFailureStatus_TypeArgumentError_) GetKind() *TypeArgumentError {
	if x != nil {
		return x.Kind
	}
	return nil
}

type ExecutionFailureStatus_UnusedValueWithoutDrop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultIdx    uint32 `protobuf:"varint,1,opt,name=result_idx,json=resultIdx,proto3" json:"result_idx,omitempty"`
	SecondaryIdx uint32 `protobuf:"varint,2,opt,name=secondary_idx,json=secondaryIdx,proto3" json:"secondary_idx,omitempty"`
}

func (x *ExecutionFailureStatus_UnusedValueWithoutDrop) Reset() {
	*x = ExecutionFailureStatus_UnusedValueWithoutDrop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_UnusedValueWithoutDrop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_UnusedValueWithoutDrop) ProtoMessage() {}

func (x *ExecutionFailureStatus_UnusedValueWithoutDrop) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_UnusedValueWithoutDrop.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_UnusedValueWithoutDrop) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 8}
}

func (x *ExecutionFailureStatus_UnusedValueWithoutDrop) GetResultIdx() uint32 {
	if x != nil {
		return x.ResultIdx
	}
	return 0
}

func (x *ExecutionFailureStatus_UnusedValueWithoutDrop) GetSecondaryIdx() uint32 {
	if x != nil {
		return x.SecondaryIdx
	}
	return 0
}

type ExecutionFailureStatus_InvalidPublicFunctionReturnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx uint32 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
}

func (x *ExecutionFailureStatus_InvalidPublicFunctionReturnType) Reset() {
	*x = ExecutionFailureStatus_InvalidPublicFunctionReturnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_InvalidPublicFunctionReturnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_InvalidPublicFunctionReturnType) ProtoMessage() {}

func (x *ExecutionFailureStatus_InvalidPublicFunctionReturnType) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_InvalidPublicFunctionReturnType.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_InvalidPublicFunctionReturnType) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 9}
}

func (x *ExecutionFailureStatus_InvalidPublicFunctionReturnType) GetIdx() uint32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

type ExecutionFailureStatus_EffectsTooLarge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentSize uint64 `protobuf:"varint,1,opt,name=current_size,json=currentSize,proto3" json:"current_size,omitempty"`
	MaxSize     uint64 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (x *ExecutionFailureStatus_EffectsTooLarge) Reset() {
	*x = ExecutionFailureStatus_EffectsTooLarge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_EffectsTooLarge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_EffectsTooLarge) ProtoMessage() {}

func (x *ExecutionFailureStatus_EffectsTooLarge) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_EffectsTooLarge.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_EffectsTooLarge) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 10}
}

func (x *ExecutionFailureStatus_EffectsTooLarge) GetCurrentSize() uint64 {
	if x != nil {
		return x.CurrentSize
	}
	return 0
}

func (x *ExecutionFailureStatus_EffectsTooLarge) GetMaxSize() uint64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type ExecutionFailureStatus_PackageUpgradeError_ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpgradeError *PackageUpgradeError `protobuf:"bytes,1,opt,name=upgrade_error,json=upgradeError,proto3" json:"upgrade_error,omitempty"`
}

func (x *ExecutionFailureStatus_PackageUpgradeError_) Reset() {
	*x = ExecutionFailureStatus_PackageUpgradeError_{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_PackageUpgradeError_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_PackageUpgradeError_) ProtoMessage() {}

func (x *ExecutionFailureStatus_PackageUpgradeError_) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_PackageUpgradeError_.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_PackageUpgradeError_) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 11}
}

func (x *ExecutionFailureStatus_PackageUpgradeError_) GetUpgradeError() *PackageUpgradeError {
	if x != nil {
		return x.UpgradeError
	}
	return nil
}

type ExecutionFailureStatus_WrittenObjectsTooLarge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentSize uint64 `protobuf:"varint,1,opt,name=current_size,json=currentSize,proto3" json:"current_size,omitempty"`
	MaxSize     uint64 `protobuf:"varint,2,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
}

func (x *ExecutionFailureStatus_WrittenObjectsTooLarge) Reset() {
	*x = ExecutionFailureStatus_WrittenObjectsTooLarge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionFailureStatus_WrittenObjectsTooLarge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionFailureStatus_WrittenObjectsTooLarge) ProtoMessage() {}

func (x *ExecutionFailureStatus_WrittenObjectsTooLarge) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionFailureStatus_WrittenObjectsTooLarge.ProtoReflect.Descriptor instead.
func (*ExecutionFailureStatus_WrittenObjectsTooLarge) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{105, 12}
}

func (x *ExecutionFailureStatus_WrittenObjectsTooLarge) GetCurrentSize() uint64 {
	if x != nil {
		return x.CurrentSize
	}
	return 0
}

func (x *ExecutionFailureStatus_WrittenObjectsTooLarge) GetMaxSize() uint64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

type CommandArgumentError_IndexOutOfBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx uint32 `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
}

func (x *CommandArgumentError_IndexOutOfBounds) Reset() {
	*x = CommandArgumentError_IndexOutOfBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandArgumentError_IndexOutOfBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandArgumentError_IndexOutOfBounds) ProtoMessage() {}

func (x *CommandArgumentError_IndexOutOfBounds) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandArgumentError_IndexOutOfBounds.ProtoReflect.Descriptor instead.
func (*CommandArgumentError_IndexOutOfBounds) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{106, 0}
}

func (x *CommandArgumentError_IndexOutOfBounds) GetIdx() uint32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

type CommandArgumentError_SecondaryIndexOutOfBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultIdx    uint32 `protobuf:"varint,1,opt,name=result_idx,json=resultIdx,proto3" json:"result_idx,omitempty"`
	SecondaryIdx uint32 `protobuf:"varint,2,opt,name=secondary_idx,json=secondaryIdx,proto3" json:"secondary_idx,omitempty"`
}

func (x *CommandArgumentError_SecondaryIndexOutOfBounds) Reset() {
	*x = CommandArgumentError_SecondaryIndexOutOfBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandArgumentError_SecondaryIndexOutOfBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandArgumentError_SecondaryIndexOutOfBounds) ProtoMessage() {}

func (x *CommandArgumentError_SecondaryIndexOutOfBounds) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandArgumentError_SecondaryIndexOutOfBounds.ProtoReflect.Descriptor instead.
func (*CommandArgumentError_SecondaryIndexOutOfBounds) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{106, 1}
}

func (x *CommandArgumentError_SecondaryIndexOutOfBounds) GetResultIdx() uint32 {
	if x != nil {
		return x.ResultIdx
	}
	return 0
}

func (x *CommandArgumentError_SecondaryIndexOutOfBounds) GetSecondaryIdx() uint32 {
	if x != nil {
		return x.SecondaryIdx
	}
	return 0
}

type CommandArgumentError_InvalidResultArity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultIdx uint32 `protobuf:"varint,1,opt,name=result_idx,json=resultIdx,proto3" json:"result_idx,omitempty"`
}

func (x *CommandArgumentError_InvalidResultArity) Reset() {
	*x = CommandArgumentError_InvalidResultArity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandArgumentError_InvalidResultArity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandArgumentError_InvalidResultArity) ProtoMessage() {}

func (x *CommandArgumentError_InvalidResultArity) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandArgumentError_InvalidResultArity.ProtoReflect.Descriptor instead.
func (*CommandArgumentError_InvalidResultArity) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{106, 2}
}

func (x *CommandArgumentError_InvalidResultArity) GetResultIdx() uint32 {
	if x != nil {
		return x.ResultIdx
	}
	return 0
}

type PackageUpgradeError_UnableToFetchPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId *ObjectID `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
}

func (x *PackageUpgradeError_UnableToFetchPackage) Reset() {
	*x = PackageUpgradeError_UnableToFetchPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageUpgradeError_UnableToFetchPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageUpgradeError_UnableToFetchPackage) ProtoMessage() {}

func (x *PackageUpgradeError_UnableToFetchPackage) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageUpgradeError_UnableToFetchPackage.ProtoReflect.Descriptor instead.
func (*PackageUpgradeError_UnableToFetchPackage) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{108, 0}
}

func (x *PackageUpgradeError_UnableToFetchPackage) GetPackageId() *ObjectID {
	if x != nil {
		return x.PackageId
	}
	return nil
}

type PackageUpgradeError_NotAPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId *ObjectID `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *PackageUpgradeError_NotAPackage) Reset() {
	*x = PackageUpgradeError_NotAPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageUpgradeError_NotAPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageUpgradeError_NotAPackage) ProtoMessage() {}

func (x *PackageUpgradeError_NotAPackage) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageUpgradeError_NotAPackage.ProtoReflect.Descriptor instead.
func (*PackageUpgradeError_NotAPackage) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{108, 1}
}

func (x *PackageUpgradeError_NotAPackage) GetObjectId() *ObjectID {
	if x != nil {
		return x.ObjectId
	}
	return nil
}

type PackageUpgradeError_DigestDoesNotMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *PackageUpgradeError_DigestDoesNotMatch) Reset() {
	*x = PackageUpgradeError_DigestDoesNotMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageUpgradeError_DigestDoesNotMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageUpgradeError_DigestDoesNotMatch) ProtoMessage() {}

func (x *PackageUpgradeError_DigestDoesNotMatch) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageUpgradeError_DigestDoesNotMatch.ProtoReflect.Descriptor instead.
func (*PackageUpgradeError_DigestDoesNotMatch) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{108, 2}
}

func (x *PackageUpgradeError_DigestDoesNotMatch) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

type PackageUpgradeError_UnknownUpgradePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy uint32 `protobuf:"varint,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *PackageUpgradeError_UnknownUpgradePolicy) Reset() {
	*x = PackageUpgradeError_UnknownUpgradePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageUpgradeError_UnknownUpgradePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageUpgradeError_UnknownUpgradePolicy) ProtoMessage() {}

func (x *PackageUpgradeError_UnknownUpgradePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageUpgradeError_UnknownUpgradePolicy.ProtoReflect.Descriptor instead.
func (*PackageUpgradeError_UnknownUpgradePolicy) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{108, 3}
}

func (x *PackageUpgradeError_UnknownUpgradePolicy) GetPolicy() uint32 {
	if x != nil {
		return x.Policy
	}
	return 0
}

type PackageUpgradeError_PackageIDDoesNotMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId *ObjectID `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	TicketId  *ObjectID `protobuf:"bytes,2,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
}

func (x *PackageUpgradeError_PackageIDDoesNotMatch) Reset() {
	*x = PackageUpgradeError_PackageIDDoesNotMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sf_sui_type_v1_type_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageUpgradeError_PackageIDDoesNotMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageUpgradeError_PackageIDDoesNotMatch) ProtoMessage() {}

func (x *PackageUpgradeError_PackageIDDoesNotMatch) ProtoReflect() protoreflect.Message {
	mi := &file_sf_sui_type_v1_type_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageUpgradeError_PackageIDDoesNotMatch.ProtoReflect.Descriptor instead.
func (*PackageUpgradeError_PackageIDDoesNotMatch) Descriptor() ([]byte, []int) {
	return file_sf_sui_type_v1_type_proto_rawDescGZIP(), []int{108, 4}
}

func (x *PackageUpgradeError_PackageIDDoesNotMatch) GetPackageId() *ObjectID {
	if x != nil {
		return x.PackageId
	}
	return nil
}

func (x *PackageUpgradeError_PackageIDDoesNotMatch) GetTicketId() *ObjectID {
	if x != nil {
		return x.TicketId
	}
	return nil
}

var File_sf_sui_type_v1_type_proto protoreflect.FileDescriptor

var file_sf_sui_type_v1_type_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x66, 0x2f, 0x73, 0x75, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x03, 0x0a, 0x0e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d,
	0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x74,
	0x78, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x09, 0x74, 0x78, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x9b, 0x05, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4b, 0x0a, 0x10, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x0e, 0x67, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x01, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x5f, 0x74, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x54, 0x78, 0x4e,
	0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc2,
	0x01, 0x0a, 0x0e, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6e, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x46, 0x65, 0x65, 0x22, 0x94, 0x05, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44,
	0x0a, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x52, 0x07, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x74, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x54, 0x78, 0x4e, 0x75, 0x6d, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x03, 0x0a, 0x0c, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07,
	0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x75, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x93, 0x01,
	0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xa7,
	0x02, 0x0a, 0x07, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x52,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xb4, 0x01, 0x0a, 0x07, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfc, 0x01, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x52, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7c, 0x0a, 0x0d, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x02, 0x76, 0x30, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x02, 0x76, 0x30,
	0x42, 0x10, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x03,
	0x73, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x03, 0x73, 0x75, 0x69, 0x12, 0x32, 0x0a, 0x07, 0x6e, 0x61, 0x72, 0x77,
	0x68, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x61, 0x72, 0x77, 0x68, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x22, 0xa7,
	0x05, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x43,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x12, 0x47,
	0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54, 0x0a, 0x19,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6f, 0x66, 0x5f, 0x70,
	0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x4f, 0x66, 0x50, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0d,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x11, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x02, 0x76,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x31, 0x48, 0x00, 0x52,
	0x02, 0x76, 0x31, 0x42, 0x09, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe4,
	0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x56, 0x31, 0x12, 0x36, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x67, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x06, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x55, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x78,
	0x12, 0x43, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x68, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6c, 0x6f, 0x67,
	0x75, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x63, 0x0a, 0x18, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x65,
	0x6e, 0x64, 0x4f, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x6c, 0x6f, 0x67, 0x75, 0x65, 0x5f, 0x76, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x56, 0x32, 0x48, 0x00, 0x52, 0x19,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x56, 0x32, 0x42, 0x12, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xaf, 0x01,
	0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x56, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22,
	0xcd, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a,
	0x25, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x21, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x62, 0x6a, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x87, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x1d, 0x65, 0x6e, 0x64,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x19,
	0x65, 0x6e, 0x64, 0x4f, 0x66, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0xce, 0x03, 0x0a, 0x19, 0x45, 0x6e,
	0x64, 0x4f, 0x66, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x56, 0x0a, 0x1a,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x18, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x48, 0x00, 0x52, 0x18, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x12, 0x50, 0x0a, 0x17, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x15, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x16, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x13, 0x64,
	0x65, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6a, 0x77, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x77, 0x6b, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x77, 0x6b, 0x73, 0x12, 0x56, 0x0a, 0x28, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x24, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x7c, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x77, 0x6b, 0x12, 0x2f,
	0x0a, 0x06, 0x6a, 0x77, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4a, 0x77, 0x6b, 0x49, 0x64, 0x52, 0x05, 0x6a, 0x77, 0x6b, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x03, 0x6a, 0x77, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x57, 0x4b, 0x52, 0x03, 0x6a, 0x77, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22,
	0x2b, 0x0a, 0x05, 0x4a, 0x77, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x03,
	0x4a, 0x57, 0x4b, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x6c, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x56, 0x0a,
	0x28, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6f,
	0x62, 0x6a, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x24, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x62,
	0x6a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x03, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x74, 0x78, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x35, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x73, 0x63, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x73, 0x22, 0xc2, 0x03, 0x0a, 0x07, 0x54, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x78, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x18, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x0c, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x44, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x09, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x22, 0x7d, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x35, 0x0a, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6c, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x62, 0x63, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x49, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xf6, 0x03,
	0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x09, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x6f, 0x76,
	0x65, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68,
	0x61, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xf5, 0x02, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x48, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0c, 0x6c,
	0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x77, 0x0a, 0x10, 0x4c, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2d, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x10, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x63, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x62, 0x63, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x22, 0x72, 0x0a, 0x10, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x10, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xd2, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x78, 0x5f, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x78, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf8, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x14, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x35, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x94, 0x01, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x36, 0x0a,
	0x03, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x50, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x52, 0x12, 0x6e,
	0x65, 0x78, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x54, 0x0a, 0x11, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x1b, 0x45,
	0x43, 0x4d, 0x48, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x43, 0x4d, 0x48, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x65, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17,
	0x45, 0x43, 0x4d, 0x48, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x31, 0x0a, 0x17, 0x45, 0x43, 0x4d, 0x48, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x71, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x02,
	0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x56, 0x31, 0x48, 0x00, 0x52, 0x02, 0x76, 0x31, 0x42, 0x1c, 0x0a, 0x1a, 0x73, 0x75, 0x69,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x56, 0x31, 0x12, 0x49, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x67, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x03, 0x0a,
	0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x07, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x68, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00, 0x52, 0x17,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1c, 0x0a, 0x1a, 0x73, 0x75, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x85,
	0x01, 0x0a, 0x07, 0x47, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22,
	0xd9, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x22, 0x50, 0x0a, 0x12, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xd8, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x4b, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x61, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x68, 0x0a, 0x09,
	0x52, 0x61, 0x77, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x33, 0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x75, 0x0a,
	0x17, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x52, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x07,
	0x43, 0x61, 0x6c, 0x6c, 0x41, 0x72, 0x67, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x72, 0x67, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x61, 0x72, 0x67, 0x22, 0xf5, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x69, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x72, 0x67, 0x12, 0x4d, 0x0a, 0x13, 0x69, 0x6d, 0x6d, 0x5f, 0x6f, 0x72, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x48, 0x00, 0x52, 0x10, 0x69, 0x6d, 0x6d, 0x4f, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x73, 0x75,
	0x69, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x22, 0x98, 0x01, 0x0a,
	0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xa1, 0x04, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x12, 0x28, 0x0a, 0x02, 0x75, 0x38, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x02, 0x75, 0x38, 0x12, 0x2a, 0x0a, 0x03, 0x75,
	0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x03, 0x75, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x31, 0x32, 0x38, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x04, 0x75, 0x31, 0x32, 0x38, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x31, 0x36,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x03, 0x75, 0x31, 0x36, 0x12, 0x2a, 0x0a, 0x03, 0x75, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x03, 0x75, 0x33,
	0x32, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x32, 0x35, 0x36, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x75, 0x32, 0x35, 0x36, 0x42,
	0x0a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x22, 0x40, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x95, 0x01,
	0x0a, 0x09, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x8b, 0x04, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x49, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x53, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x50, 0x61, 0x69, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x3d, 0x0a,
	0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x07,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x6d, 0x61,
	0x6b, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x56, 0x65,
	0x63, 0x50, 0x61, 0x69, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x6b, 0x65, 0x4d, 0x6f, 0x76,
	0x65, 0x56, 0x65, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x69, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x22, 0x79, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x61, 0x69, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x03,
	0x74, 0x77, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x74, 0x77, 0x6f, 0x22, 0x74,
	0x0a, 0x0e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x30, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x6f,
	0x6e, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x74, 0x77, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x03, 0x74, 0x77, 0x6f, 0x22, 0x74, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x50, 0x61, 0x69, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x74, 0x77, 0x6f, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x74, 0x77, 0x6f, 0x22, 0x6a, 0x0a, 0x0e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x35, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x7e, 0x0a, 0x0f, 0x4d, 0x61, 0x6b, 0x65,
	0x4d, 0x6f, 0x76, 0x65, 0x56, 0x65, 0x63, 0x50, 0x61, 0x69, 0x72, 0x12, 0x31, 0x0a, 0x03, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x03, 0x74, 0x77, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x03, 0x74, 0x77, 0x6f,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x6e, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x03,
	0x74, 0x77, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x03, 0x74, 0x77, 0x6f, 0x12, 0x31, 0x0a, 0x05, 0x74,
	0x68, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x05, 0x74, 0x68, 0x72, 0x65, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x66, 0x6f,
	0x75, 0x72, 0x22, 0x85, 0x02, 0x0a, 0x17, 0x53, 0x75, 0x69, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x35,
	0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x61, 0x67, 0x52, 0x0d, 0x74,
	0x79, 0x70, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x53,
	0x75, 0x69, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x61,
	0x73, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x67, 0x61, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x12,
	0x16, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x43, 0x0a, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x69,
	0x72, 0x4f, 0x66, 0x55, 0x33, 0x32, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x75, 0x69, 0x5f, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x09, 0x50, 0x61, 0x69, 0x72, 0x4f,
	0x66, 0x55, 0x33, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6f, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x77, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x77, 0x6f, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x56, 0x31, 0x48, 0x00,
	0x52, 0x02, 0x76, 0x31, 0x12, 0x3e, 0x0a, 0x02, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x56, 0x32, 0x48, 0x00,
	0x52, 0x02, 0x76, 0x32, 0x42, 0x1b, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x22, 0xc1, 0x07, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x56, 0x31, 0x12,
	0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x12, 0x3c, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x73, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x6e, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x41, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x43, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x07, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f,
	0x0a, 0x09, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x52, 0x09, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x16, 0x75, 0x6e, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x5f, 0x74, 0x68, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x14, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x54, 0x68, 0x65, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x07, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x09, 0x67, 0x61, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xaa, 0x05, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x56, 0x32, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73,
	0x43, 0x6f, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x67, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x67, 0x61, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x0e, 0x67, 0x61, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x61, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x18, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x16, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x61, 0x75,
	0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x61, 0x75, 0x78, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x67, 0x61, 0x73, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x61, 0x75, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x55, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x55, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d,
	0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0c, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x56, 0x32, 0x12,
	0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52,
	0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x07, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x13,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4f, 0x75, 0x74, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x69, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x49, 0x44, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x69,
	0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x08,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x22, 0x62, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x0c, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x5d,
	0x0a, 0x0d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x7c, 0x0a,
	0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x12,
	0x2e, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x06, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x07,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x92, 0x24, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x43, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x61, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x47, 0x61, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x49, 0x0a, 0x13,
	0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x56, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x19, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x79, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x16, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74,
	0x59, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x13,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x6f, 0x5f,
	0x62, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x6f, 0x42, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x14, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x62, 0x69,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6f, 0x42, 0x69, 0x67, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x12, 0x7f, 0x0a, 0x19, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x48,
	0x00, 0x52, 0x17, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x54, 0x0a, 0x19, 0x69, 0x6e,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x4c, 0x0a, 0x15, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x69, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x5c,
	0x0a, 0x1e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x1a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f,
	0x6e, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x1b,
	0x73, 0x75, 0x69, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x18, 0x73, 0x75, 0x69,
	0x4d, 0x6f, 0x76, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x7c, 0x0a, 0x1c, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0a, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x70, 0x0a, 0x28, 0x76, 0x6d, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x24, 0x76, 0x6d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x44, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x16, 0x76,
	0x6d, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x14, 0x76, 0x6d, 0x49, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x12, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x0e, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x69, 0x73,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x73, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x48, 0x0a, 0x13, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x74, 0x79, 0x70,
	0x65, 0x41, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x55,
	0x0a, 0x1a, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x17, 0x6e, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x61, 0x72, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x6e, 0x0a, 0x13, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x48,
	0x00, 0x52, 0x11, 0x74, 0x79, 0x70, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x7d, 0x0a, 0x19, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x16, 0x75, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x44,
	0x72, 0x6f, 0x70, 0x12, 0x99, 0x01, 0x0a, 0x23, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x1f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x50, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x67, 0x0a, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x6f,
	0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73,
	0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x54,
	0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x22, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x1f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x69, 0x0a, 0x24, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x21, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x44, 0x6f, 0x77, 0x6e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x74, 0x0a, 0x15,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x48, 0x00, 0x52, 0x13, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x7d, 0x0a, 0x19, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x54,
	0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x48, 0x00, 0x52, 0x16, 0x77, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x47, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x1e, 0x73, 0x75,
	0x69, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x75,
	0x69, 0x4d, 0x6f, 0x76, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x66, 0x0a, 0x23, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x1f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x12, 0x4a, 0x0a, 0x14, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x12, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x1a, 0x5b, 0x0a,
	0x10, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6f, 0x42, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x5c, 0x0a, 0x11, 0x4d, 0x6f,
	0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f, 0x42, 0x69, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0x4e, 0x0a, 0x17, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x85, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x76,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x12, 0x60, 0x0a, 0x0d,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d,
	0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x87, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x5b,
	0x0a, 0x0d, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6d,
	0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x62, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0xbd, 0x01, 0x0a, 0x0c, 0x4d,
	0x6f, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x6d, 0x0a, 0x15, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x67, 0x49, 0x64, 0x78, 0x12, 0x3b, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x71, 0x0a, 0x12, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x78, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x1a, 0x5c, 0x0a, 0x16,
	0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x64, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x78, 0x1a, 0x33, 0x0a, 0x1f, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x78, 0x1a,
	0x4f, 0x0a, 0x0f, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x1a, 0x63, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x12, 0x4b, 0x0a, 0x0d, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x56, 0x0a, 0x16, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x1a, 0x0a,
	0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc3, 0x0a, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x44, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x63, 0x73,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42,
	0x63, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x75, 0x72, 0x65,
	0x5f, 0x61, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x66, 0x50, 0x75, 0x72, 0x65, 0x41, 0x72, 0x67, 0x12, 0x73, 0x0a, 0x2a, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x25, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x69, 0x0a, 0x13, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x75, 0x74, 0x4f,
	0x66, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4f, 0x75, 0x74, 0x4f, 0x66, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x1d,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x75, 0x74, 0x4f, 0x66,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x19, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x6e, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x72, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x67,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x13, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x17,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62,
	0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a,
	0x19, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x62, 0x79, 0x5f, 0x6d, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4d, 0x75, 0x74, 0x52, 0x65,
	0x66, 0x12, 0x66, 0x0a, 0x23, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x1a, 0x24, 0x0a, 0x10, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x78, 0x1a,
	0x5f, 0x0a, 0x19, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x78,
	0x1a, 0x33, 0x0a, 0x12, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x41, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x49, 0x64, 0x78, 0x42, 0x18, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0xbe, 0x01, 0x0a, 0x11, 0x54, 0x79, 0x70, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x52, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xb5, 0x08, 0x0a, 0x13, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x74, 0x0a, 0x17, 0x75, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x75, 0x69, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x2e, 0x55, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x14, 0x75, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x58,
	0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4e, 0x6f,
	0x74, 0x41, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x6f, 0x74,
	0x41, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x13, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x55, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x00, 0x52, 0x12, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x73, 0x0a, 0x16, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x48, 0x00, 0x52, 0x14, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x78, 0x0a, 0x19, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x6f, 0x65, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x44,
	0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x15, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x44, 0x6f, 0x65, 0x73, 0x4e, 0x6f, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x1a, 0x52, 0x0a, 0x14, 0x55, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x09, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x1a, 0x47, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x41,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x1a, 0x2c, 0x0a, 0x12, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x44, 0x6f, 0x65, 0x73, 0x4e,
	0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x0a, 0x14, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a,
	0x8d, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x44, 0x6f, 0x65,
	0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x42,
	0x17, 0x0a, 0x15, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x38, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x29, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54,
	0x61, 0x67, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x67,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x67, 0x61, 0x73, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x37, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x69, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x53, 0x75, 0x69, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x61, 0x67, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75, 0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x0b, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x75,
	0x69, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x52, 0x0a, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x70,
	0x6f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x2f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65,
	0x2d, 0x73, 0x75, 0x69, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x66, 0x2f, 0x73, 0x75, 0x69, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x73, 0x75, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sf_sui_type_v1_type_proto_rawDescOnce sync.Once
	file_sf_sui_type_v1_type_proto_rawDescData = file_sf_sui_type_v1_type_proto_rawDesc
)

func file_sf_sui_type_v1_type_proto_rawDescGZIP() []byte {
	file_sf_sui_type_v1_type_proto_rawDescOnce.Do(func() {
		file_sf_sui_type_v1_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_sf_sui_type_v1_type_proto_rawDescData)
	})
	return file_sf_sui_type_v1_type_proto_rawDescData
}

var file_sf_sui_type_v1_type_proto_msgTypes = make([]protoimpl.MessageInfo, 139)
var file_sf_sui_type_v1_type_proto_goTypes = []interface{}{
	(*CheckpointData)(nil),                            // 0: sui.checkpoint.v1.CheckpointData
	(*Checkpoint)(nil),                                // 1: sui.checkpoint.v1.Checkpoint
	(*GasCostSummary)(nil),                            // 2: sui.checkpoint.v1.GasCostSummary
	(*Transaction)(nil),                               // 3: sui.checkpoint.v1.Transaction
	(*GenericTransactionKind)(nil),                    // 4: sui.checkpoint.v1.GenericTransactionKind
	(*Event)(nil),                                     // 5: sui.checkpoint.v1.Event
	(*BalanceChange)(nil),                             // 6: sui.checkpoint.v1.BalanceChange
	(*ObjectChange)(nil),                              // 7: sui.checkpoint.v1.ObjectChange
	(*Published)(nil),                                 // 8: sui.checkpoint.v1.Published
	(*Transferred)(nil),                               // 9: sui.checkpoint.v1.Transferred
	(*Mutated)(nil),                                   // 10: sui.checkpoint.v1.Mutated
	(*Deleted)(nil),                                   // 11: sui.checkpoint.v1.Deleted
	(*Wrapped)(nil),                                   // 12: sui.checkpoint.v1.Wrapped
	(*Created)(nil),                                   // 13: sui.checkpoint.v1.Created
	(*SenderSignedTransaction)(nil),                   // 14: sui.checkpoint.v1.SenderSignedTransaction
	(*IntentMessage)(nil),                             // 15: sui.checkpoint.v1.IntentMessage
	(*Intent)(nil),                                    // 16: sui.checkpoint.v1.Intent
	(*IntentVersion)(nil),                             // 17: sui.checkpoint.v1.IntentVersion
	(*AppId)(nil),                                     // 18: sui.checkpoint.v1.AppId
	(*IntentScope)(nil),                               // 19: sui.checkpoint.v1.IntentScope
	(*TransactionData)(nil),                           // 20: sui.checkpoint.v1.TransactionData
	(*TransactionDataV1)(nil),                         // 21: sui.checkpoint.v1.TransactionDataV1
	(*TransactionExpiration)(nil),                     // 22: sui.checkpoint.v1.TransactionExpiration
	(*TransactionKind)(nil),                           // 23: sui.checkpoint.v1.TransactionKind
	(*ConsensusCommitPrologueV2)(nil),                 // 24: sui.checkpoint.v1.ConsensusCommitPrologueV2
	(*RandomnessStateUpdate)(nil),                     // 25: sui.checkpoint.v1.RandomnessStateUpdate
	(*EndOfEpochTransaction)(nil),                     // 26: sui.checkpoint.v1.EndOfEpochTransaction
	(*EndOfEpochTransactionKind)(nil),                 // 27: sui.checkpoint.v1.EndOfEpochTransactionKind
	(*AuthenticatorStateUpdate)(nil),                  // 28: sui.checkpoint.v1.AuthenticatorStateUpdate
	(*ActiveJwk)(nil),                                 // 29: sui.checkpoint.v1.ActiveJwk
	(*JwkId)(nil),                                     // 30: sui.checkpoint.v1.JwkId
	(*JWK)(nil),                                       // 31: sui.checkpoint.v1.JWK
	(*AuthenticatorStateExpire)(nil),                  // 32: sui.checkpoint.v1.AuthenticatorStateExpire
	(*IndexedEvent)(nil),                              // 33: sui.checkpoint.v1.IndexedEvent
	(*TxIndex)(nil),                                   // 34: sui.checkpoint.v1.TxIndex
	(*MoveCallOverview)(nil),                          // 35: sui.checkpoint.v1.MoveCallOverview
	(*StoredDisplay)(nil),                             // 36: sui.checkpoint.v1.StoredDisplay
	(*TransactionObjectChange)(nil),                   // 37: sui.checkpoint.v1.TransactionObjectChange
	(*IndexedObject)(nil),                             // 38: sui.checkpoint.v1.IndexedObject
	(*Object)(nil),                                    // 39: sui.checkpoint.v1.Object
	(*OwnerType)(nil),                                 // 40: sui.checkpoint.v1.OwnerType
	(*Data)(nil),                                      // 41: sui.checkpoint.v1.Data
	(*MoveObject)(nil),                                // 42: sui.checkpoint.v1.MoveObject
	(*MovePackage)(nil),                               // 43: sui.checkpoint.v1.MovePackage
	(*LinkageTablePair)(nil),                          // 44: sui.checkpoint.v1.LinkageTablePair
	(*DynamicFieldInfo)(nil),                          // 45: sui.checkpoint.v1.DynamicFieldInfo
	(*DynamicFieldName)(nil),                          // 46: sui.checkpoint.v1.DynamicFieldName
	(*DynamicFieldType)(nil),                          // 47: sui.checkpoint.v1.DynamicFieldType
	(*IndexedDeletedObject)(nil),                      // 48: sui.checkpoint.v1.IndexedDeletedObject
	(*IndexedPackage)(nil),                            // 49: sui.checkpoint.v1.IndexedPackage
	(*Value)(nil),                                     // 50: sui.checkpoint.v1.Value
	(*ValueMap)(nil),                                  // 51: sui.checkpoint.v1.ValueMap
	(*ListOfValues)(nil),                              // 52: sui.checkpoint.v1.ListOfValues
	(*EndOfEpochData)(nil),                            // 53: sui.checkpoint.v1.EndOfEpochData
	(*NextEpochCommittee)(nil),                        // 54: sui.checkpoint.v1.NextEpochCommittee
	(*CheckpointCommitment)(nil),                      // 55: sui.checkpoint.v1.CheckpointCommitment
	(*ECMHLiveObjectSetDigest)(nil),                   // 56: sui.checkpoint.v1.ECMHLiveObjectSetDigest
	(*TransactionBlock)(nil),                          // 57: sui.checkpoint.v1.TransactionBlock
	(*TransactionBlockData)(nil),                      // 58: sui.checkpoint.v1.TransactionBlockData
	(*TransactionBlockDataV1)(nil),                    // 59: sui.checkpoint.v1.TransactionBlockDataV1
	(*TransactionBlockKind)(nil),                      // 60: sui.checkpoint.v1.TransactionBlockKind
	(*GasData)(nil),                                   // 61: sui.checkpoint.v1.GasData
	(*ObjectRef)(nil),                                 // 62: sui.checkpoint.v1.ObjectRef
	(*ChangeEpoch)(nil),                               // 63: sui.checkpoint.v1.ChangeEpoch
	(*GenesisTransaction)(nil),                        // 64: sui.checkpoint.v1.GenesisTransaction
	(*GenesisObject)(nil),                             // 65: sui.checkpoint.v1.GenesisObject
	(*ObjectID)(nil),                                  // 66: sui.checkpoint.v1.ObjectID
	(*ConsensusCommitPrologue)(nil),                   // 67: sui.checkpoint.v1.ConsensusCommitPrologue
	(*ProgrammableTransaction)(nil),                   // 68: sui.checkpoint.v1.ProgrammableTransaction
	(*CallArg)(nil),                                   // 69: sui.checkpoint.v1.CallArg
	(*SuiObjectArg)(nil),                              // 70: sui.checkpoint.v1.SuiObjectArg
	(*SharedObject)(nil),                              // 71: sui.checkpoint.v1.SharedObject
	(*TypeTag)(nil),                                   // 72: sui.checkpoint.v1.TypeTag
	(*ListOfTypeTags)(nil),                            // 73: sui.checkpoint.v1.ListOfTypeTags
	(*StructTag)(nil),                                 // 74: sui.checkpoint.v1.StructTag
	(*Command)(nil),                                   // 75: sui.checkpoint.v1.Command
	(*TransferObjectsPair)(nil),                       // 76: sui.checkpoint.v1.TransferObjectsPair
	(*SplitCoinsPair)(nil),                            // 77: sui.checkpoint.v1.SplitCoinsPair
	(*MergeCoinsPair)(nil),                            // 78: sui.checkpoint.v1.MergeCoinsPair
	(*PublishCommand)(nil),                            // 79: sui.checkpoint.v1.PublishCommand
	(*ListOfObjects)(nil),                             // 80: sui.checkpoint.v1.ListOfObjects
	(*MakeMoveVecPair)(nil),                           // 81: sui.checkpoint.v1.MakeMoveVecPair
	(*UpgradeComand)(nil),                             // 82: sui.checkpoint.v1.UpgradeComand
	(*SuiProgrammableMoveCall)(nil),                   // 83: sui.checkpoint.v1.SuiProgrammableMoveCall
	(*SuiArgument)(nil),                               // 84: sui.checkpoint.v1.SuiArgument
	(*PairOfU32)(nil),                                 // 85: sui.checkpoint.v1.PairOfU32
	(*TransactionBlockEffects)(nil),                   // 86: sui.checkpoint.v1.TransactionBlockEffects
	(*TransactionBlockEffectsV1)(nil),                 // 87: sui.checkpoint.v1.TransactionBlockEffectsV1
	(*TransactionBlockEffectsV2)(nil),                 // 88: sui.checkpoint.v1.TransactionBlockEffectsV2
	(*UnchangedSharedObject)(nil),                     // 89: sui.checkpoint.v1.UnchangedSharedObject
	(*UnchangedSharedKind)(nil),                       // 90: sui.checkpoint.v1.UnchangedSharedKind
	(*ChangedObjectV2)(nil),                           // 91: sui.checkpoint.v1.ChangedObjectV2
	(*EffectsObjectChange)(nil),                       // 92: sui.checkpoint.v1.EffectsObjectChange
	(*IDOperation)(nil),                               // 93: sui.checkpoint.v1.IDOperation
	(*ObjectIn)(nil),                                  // 94: sui.checkpoint.v1.ObjectIn
	(*ObjectOut)(nil),                                 // 95: sui.checkpoint.v1.ObjectOut
	(*ObjectWrite)(nil),                               // 96: sui.checkpoint.v1.ObjectWrite
	(*PackageWrite)(nil),                              // 97: sui.checkpoint.v1.PackageWrite
	(*ObjectInExist)(nil),                             // 98: sui.checkpoint.v1.ObjectInExist
	(*VersionDigest)(nil),                             // 99: sui.checkpoint.v1.VersionDigest
	(*OwnedObjectRef)(nil),                            // 100: sui.checkpoint.v1.OwnedObjectRef
	(*Owner)(nil),                                     // 101: sui.checkpoint.v1.Owner
	(*Shared)(nil),                                    // 102: sui.checkpoint.v1.Shared
	(*ExecutionStatus)(nil),                           // 103: sui.checkpoint.v1.ExecutionStatus
	(*Failure)(nil),                                   // 104: sui.checkpoint.v1.Failure
	(*ExecutionFailureStatus)(nil),                    // 105: sui.checkpoint.v1.ExecutionFailureStatus
	(*CommandArgumentError)(nil),                      // 106: sui.checkpoint.v1.CommandArgumentError
	(*TypeArgumentError)(nil),                         // 107: sui.checkpoint.v1.TypeArgumentError
	(*PackageUpgradeError)(nil),                       // 108: sui.checkpoint.v1.PackageUpgradeError
	(*ModuleId)(nil),                                  // 109: sui.checkpoint.v1.ModuleId
	(*TransactionBlockEffectsModifiedAtVersions)(nil), // 110: sui.checkpoint.v1.TransactionBlockEffectsModifiedAtVersions
	(*ObjectType)(nil),                                // 111: sui.checkpoint.v1.ObjectType
	(*MoveObjectType)(nil),                            // 112: sui.checkpoint.v1.MoveObjectType
	(*TypeOrigin)(nil),                                // 113: sui.checkpoint.v1.TypeOrigin
	(*UpgradeInfo)(nil),                               // 114: sui.checkpoint.v1.UpgradeInfo
	nil,                                               // 115: sui.checkpoint.v1.MovePackage.ModuleMapEntry
	nil,                                               // 116: sui.checkpoint.v1.ValueMap.MapEntry
	(*GenesisObject_RawObject)(nil),                   // 117: sui.checkpoint.v1.GenesisObject.RawObject
	(*ExecutionFailureStatus_MoveObjectTooBig)(nil),   // 118: sui.checkpoint.v1.ExecutionFailureStatus.MoveObjectTooBig
	(*ExecutionFailureStatus_MovePackageTooBig)(nil),  // 119: sui.checkpoint.v1.ExecutionFailureStatus.MovePackageTooBig
	(*ExecutionFailureStatus_CircularObjectOwnership)(nil),         // 120: sui.checkpoint.v1.ExecutionFailureStatus.CircularObjectOwnership
	(*ExecutionFailureStatus_MoveLocationOpt)(nil),                 // 121: sui.checkpoint.v1.ExecutionFailureStatus.MoveLocationOpt
	(*ExecutionFailureStatus_MoveAbort)(nil),                       // 122: sui.checkpoint.v1.ExecutionFailureStatus.MoveAbort
	(*ExecutionFailureStatus_MoveLocation)(nil),                    // 123: sui.checkpoint.v1.ExecutionFailureStatus.MoveLocation
	(*ExecutionFailureStatus_CommandArgumentError_)(nil),           // 124: sui.checkpoint.v1.ExecutionFailureStatus.CommandArgumentError_
	(*ExecutionFailureStatus_TypeArgumentError_)(nil),              // 125: sui.checkpoint.v1.ExecutionFailureStatus.TypeArgumentError_
	(*ExecutionFailureStatus_UnusedValueWithoutDrop)(nil),          // 126: sui.checkpoint.v1.ExecutionFailureStatus.UnusedValueWithoutDrop
	(*ExecutionFailureStatus_InvalidPublicFunctionReturnType)(nil), // 127: sui.checkpoint.v1.ExecutionFailureStatus.InvalidPublicFunctionReturnType
	(*ExecutionFailureStatus_EffectsTooLarge)(nil),                 // 128: sui.checkpoint.v1.ExecutionFailureStatus.EffectsTooLarge
	(*ExecutionFailureStatus_PackageUpgradeError_)(nil),            // 129: sui.checkpoint.v1.ExecutionFailureStatus.PackageUpgradeError_
	(*ExecutionFailureStatus_WrittenObjectsTooLarge)(nil),          // 130: sui.checkpoint.v1.ExecutionFailureStatus.WrittenObjectsTooLarge
	(*CommandArgumentError_IndexOutOfBounds)(nil),                  // 131: sui.checkpoint.v1.CommandArgumentError.IndexOutOfBounds
	(*CommandArgumentError_SecondaryIndexOutOfBounds)(nil),         // 132: sui.checkpoint.v1.CommandArgumentError.SecondaryIndexOutOfBounds
	(*CommandArgumentError_InvalidResultArity)(nil),                // 133: sui.checkpoint.v1.CommandArgumentError.InvalidResultArity
	(*PackageUpgradeError_UnableToFetchPackage)(nil),               // 134: sui.checkpoint.v1.PackageUpgradeError.UnableToFetchPackage
	(*PackageUpgradeError_NotAPackage)(nil),                        // 135: sui.checkpoint.v1.PackageUpgradeError.NotAPackage
	(*PackageUpgradeError_DigestDoesNotMatch)(nil),                 // 136: sui.checkpoint.v1.PackageUpgradeError.DigestDoesNotMatch
	(*PackageUpgradeError_UnknownUpgradePolicy)(nil),               // 137: sui.checkpoint.v1.PackageUpgradeError.UnknownUpgradePolicy
	(*PackageUpgradeError_PackageIDDoesNotMatch)(nil),              // 138: sui.checkpoint.v1.PackageUpgradeError.PackageIDDoesNotMatch
	(*emptypb.Empty)(nil),                                          // 139: google.protobuf.Empty
}
var file_sf_sui_type_v1_type_proto_depIdxs = []int32{
	1,   // 0: sui.checkpoint.v1.CheckpointData.checkpoint:type_name -> sui.checkpoint.v1.Checkpoint
	3,   // 1: sui.checkpoint.v1.CheckpointData.transactions:type_name -> sui.checkpoint.v1.Transaction
	33,  // 2: sui.checkpoint.v1.CheckpointData.events:type_name -> sui.checkpoint.v1.IndexedEvent
	37,  // 3: sui.checkpoint.v1.CheckpointData.object_change:type_name -> sui.checkpoint.v1.TransactionObjectChange
	34,  // 4: sui.checkpoint.v1.CheckpointData.tx_indices:type_name -> sui.checkpoint.v1.TxIndex
	36,  // 5: sui.checkpoint.v1.CheckpointData.display_updates:type_name -> sui.checkpoint.v1.StoredDisplay
	49,  // 6: sui.checkpoint.v1.CheckpointData.packages:type_name -> sui.checkpoint.v1.IndexedPackage
	2,   // 7: sui.checkpoint.v1.Checkpoint.gas_cost_summary:type_name -> sui.checkpoint.v1.GasCostSummary
	53,  // 8: sui.checkpoint.v1.Checkpoint.end_of_epoch_data:type_name -> sui.checkpoint.v1.EndOfEpochData
	55,  // 9: sui.checkpoint.v1.Checkpoint.checkpoint_commitments:type_name -> sui.checkpoint.v1.CheckpointCommitment
	14,  // 10: sui.checkpoint.v1.Transaction.sender_signed_data:type_name -> sui.checkpoint.v1.SenderSignedTransaction
	86,  // 11: sui.checkpoint.v1.Transaction.effects:type_name -> sui.checkpoint.v1.TransactionBlockEffects
	7,   // 12: sui.checkpoint.v1.Transaction.object_changes:type_name -> sui.checkpoint.v1.ObjectChange
	6,   // 13: sui.checkpoint.v1.Transaction.balance_change:type_name -> sui.checkpoint.v1.BalanceChange
	5,   // 14: sui.checkpoint.v1.Transaction.events:type_name -> sui.checkpoint.v1.Event
	4,   // 15: sui.checkpoint.v1.Transaction.transaction_kind:type_name -> sui.checkpoint.v1.GenericTransactionKind
	139, // 16: sui.checkpoint.v1.GenericTransactionKind.system_transaction:type_name -> google.protobuf.Empty
	139, // 17: sui.checkpoint.v1.GenericTransactionKind.programmable_transaction:type_name -> google.protobuf.Empty
	66,  // 18: sui.checkpoint.v1.Event.package_id:type_name -> sui.checkpoint.v1.ObjectID
	74,  // 19: sui.checkpoint.v1.Event.type:type_name -> sui.checkpoint.v1.StructTag
	101, // 20: sui.checkpoint.v1.BalanceChange.owner:type_name -> sui.checkpoint.v1.Owner
	72,  // 21: sui.checkpoint.v1.BalanceChange.coin_type:type_name -> sui.checkpoint.v1.TypeTag
	8,   // 22: sui.checkpoint.v1.ObjectChange.published:type_name -> sui.checkpoint.v1.Published
	9,   // 23: sui.checkpoint.v1.ObjectChange.transferred:type_name -> sui.checkpoint.v1.Transferred
	10,  // 24: sui.checkpoint.v1.ObjectChange.mutated:type_name -> sui.checkpoint.v1.Mutated
	11,  // 25: sui.checkpoint.v1.ObjectChange.deleted:type_name -> sui.checkpoint.v1.Deleted
	12,  // 26: sui.checkpoint.v1.ObjectChange.wrapped:type_name -> sui.checkpoint.v1.Wrapped
	13,  // 27: sui.checkpoint.v1.ObjectChange.created:type_name -> sui.checkpoint.v1.Created
	66,  // 28: sui.checkpoint.v1.Published.package_id:type_name -> sui.checkpoint.v1.ObjectID
	101, // 29: sui.checkpoint.v1.Transferred.recipient:type_name -> sui.checkpoint.v1.Owner
	74,  // 30: sui.checkpoint.v1.Transferred.object_type:type_name -> sui.checkpoint.v1.StructTag
	66,  // 31: sui.checkpoint.v1.Transferred.object_id:type_name -> sui.checkpoint.v1.ObjectID
	101, // 32: sui.checkpoint.v1.Mutated.owner:type_name -> sui.checkpoint.v1.Owner
	74,  // 33: sui.checkpoint.v1.Mutated.object_type:type_name -> sui.checkpoint.v1.StructTag
	66,  // 34: sui.checkpoint.v1.Mutated.object_id:type_name -> sui.checkpoint.v1.ObjectID
	74,  // 35: sui.checkpoint.v1.Deleted.object_type:type_name -> sui.checkpoint.v1.StructTag
	66,  // 36: sui.checkpoint.v1.Deleted.object_id:type_name -> sui.checkpoint.v1.ObjectID
	74,  // 37: sui.checkpoint.v1.Wrapped.object_type:type_name -> sui.checkpoint.v1.StructTag
	66,  // 38: sui.checkpoint.v1.Wrapped.object_id:type_name -> sui.checkpoint.v1.ObjectID
	101, // 39: sui.checkpoint.v1.Created.owner:type_name -> sui.checkpoint.v1.Owner
	74,  // 40: sui.checkpoint.v1.Created.object_type:type_name -> sui.checkpoint.v1.StructTag
	66,  // 41: sui.checkpoint.v1.Created.object_id:type_name -> sui.checkpoint.v1.ObjectID
	15,  // 42: sui.checkpoint.v1.SenderSignedTransaction.intent_message:type_name -> sui.checkpoint.v1.IntentMessage
	16,  // 43: sui.checkpoint.v1.IntentMessage.intent:type_name -> sui.checkpoint.v1.Intent
	20,  // 44: sui.checkpoint.v1.IntentMessage.value:type_name -> sui.checkpoint.v1.TransactionData
	19,  // 45: sui.checkpoint.v1.Intent.scope:type_name -> sui.checkpoint.v1.IntentScope
	17,  // 46: sui.checkpoint.v1.Intent.version:type_name -> sui.checkpoint.v1.IntentVersion
	18,  // 47: sui.checkpoint.v1.Intent.app_id:type_name -> sui.checkpoint.v1.AppId
	139, // 48: sui.checkpoint.v1.IntentVersion.v0:type_name -> google.protobuf.Empty
	139, // 49: sui.checkpoint.v1.AppId.sui:type_name -> google.protobuf.Empty
	139, // 50: sui.checkpoint.v1.AppId.narwhal:type_name -> google.protobuf.Empty
	139, // 51: sui.checkpoint.v1.AppId.consensus:type_name -> google.protobuf.Empty
	139, // 52: sui.checkpoint.v1.IntentScope.transaction_data:type_name -> google.protobuf.Empty
	139, // 53: sui.checkpoint.v1.IntentScope.transaction_effects:type_name -> google.protobuf.Empty
	139, // 54: sui.checkpoint.v1.IntentScope.checkpoint_summary:type_name -> google.protobuf.Empty
	139, // 55: sui.checkpoint.v1.IntentScope.personal_message:type_name -> google.protobuf.Empty
	139, // 56: sui.checkpoint.v1.IntentScope.sender_signed_transaction:type_name -> google.protobuf.Empty
	139, // 57: sui.checkpoint.v1.IntentScope.proof_of_possession:type_name -> google.protobuf.Empty
	139, // 58: sui.checkpoint.v1.IntentScope.header_digest:type_name -> google.protobuf.Empty
	139, // 59: sui.checkpoint.v1.IntentScope.bridge_event_unused:type_name -> google.protobuf.Empty
	139, // 60: sui.checkpoint.v1.IntentScope.consensus_block:type_name -> google.protobuf.Empty
	21,  // 61: sui.checkpoint.v1.TransactionData.v1:type_name -> sui.checkpoint.v1.TransactionDataV1
	23,  // 62: sui.checkpoint.v1.TransactionDataV1.kind:type_name -> sui.checkpoint.v1.TransactionKind
	61,  // 63: sui.checkpoint.v1.TransactionDataV1.gas_data:type_name -> sui.checkpoint.v1.GasData
	22,  // 64: sui.checkpoint.v1.TransactionDataV1.expiration:type_name -> sui.checkpoint.v1.TransactionExpiration
	139, // 65: sui.checkpoint.v1.TransactionExpiration.none:type_name -> google.protobuf.Empty
	68,  // 66: sui.checkpoint.v1.TransactionKind.programmable_tx:type_name -> sui.checkpoint.v1.ProgrammableTransaction
	63,  // 67: sui.checkpoint.v1.TransactionKind.change_epoch:type_name -> sui.checkpoint.v1.ChangeEpoch
	64,  // 68: sui.checkpoint.v1.TransactionKind.genesis:type_name -> sui.checkpoint.v1.GenesisTransaction
	67,  // 69: sui.checkpoint.v1.TransactionKind.consensus_commit_prologue:type_name -> sui.checkpoint.v1.ConsensusCommitPrologue
	28,  // 70: sui.checkpoint.v1.TransactionKind.authenticator_state_update:type_name -> sui.checkpoint.v1.AuthenticatorStateUpdate
	26,  // 71: sui.checkpoint.v1.TransactionKind.end_od_epoch_transaction:type_name -> sui.checkpoint.v1.EndOfEpochTransaction
	25,  // 72: sui.checkpoint.v1.TransactionKind.randomness_state_update:type_name -> sui.checkpoint.v1.RandomnessStateUpdate
	24,  // 73: sui.checkpoint.v1.TransactionKind.consensus_commit_prologue_v2:type_name -> sui.checkpoint.v1.ConsensusCommitPrologueV2
	27,  // 74: sui.checkpoint.v1.EndOfEpochTransaction.end_of_epoch_transaction_kind:type_name -> sui.checkpoint.v1.EndOfEpochTransactionKind
	63,  // 75: sui.checkpoint.v1.EndOfEpochTransactionKind.change_epoch:type_name -> sui.checkpoint.v1.ChangeEpoch
	139, // 76: sui.checkpoint.v1.EndOfEpochTransactionKind.authenticator_state_create:type_name -> google.protobuf.Empty
	32,  // 77: sui.checkpoint.v1.EndOfEpochTransactionKind.authenticator_state_expire:type_name -> sui.checkpoint.v1.AuthenticatorStateExpire
	139, // 78: sui.checkpoint.v1.EndOfEpochTransactionKind.randomness_state_create:type_name -> google.protobuf.Empty
	139, // 79: sui.checkpoint.v1.EndOfEpochTransactionKind.deny_list_state_create:type_name -> google.protobuf.Empty
	29,  // 80: sui.checkpoint.v1.AuthenticatorStateUpdate.new_active_jwks:type_name -> sui.checkpoint.v1.ActiveJwk
	30,  // 81: sui.checkpoint.v1.ActiveJwk.jwk_id:type_name -> sui.checkpoint.v1.JwkId
	31,  // 82: sui.checkpoint.v1.ActiveJwk.jwk:type_name -> sui.checkpoint.v1.JWK
	66,  // 83: sui.checkpoint.v1.IndexedEvent.package:type_name -> sui.checkpoint.v1.ObjectID
	66,  // 84: sui.checkpoint.v1.TxIndex.input_objects:type_name -> sui.checkpoint.v1.ObjectID
	66,  // 85: sui.checkpoint.v1.TxIndex.changed_objects:type_name -> sui.checkpoint.v1.ObjectID
	35,  // 86: sui.checkpoint.v1.TxIndex.move_calls:type_name -> sui.checkpoint.v1.MoveCallOverview
	66,  // 87: sui.checkpoint.v1.MoveCallOverview.package:type_name -> sui.checkpoint.v1.ObjectID
	38,  // 88: sui.checkpoint.v1.TransactionObjectChange.changed_objects:type_name -> sui.checkpoint.v1.IndexedObject
	48,  // 89: sui.checkpoint.v1.TransactionObjectChange.deleted_objects:type_name -> sui.checkpoint.v1.IndexedDeletedObject
	66,  // 90: sui.checkpoint.v1.IndexedObject.object_id:type_name -> sui.checkpoint.v1.ObjectID
	40,  // 91: sui.checkpoint.v1.IndexedObject.owner_type:type_name -> sui.checkpoint.v1.OwnerType
	39,  // 92: sui.checkpoint.v1.IndexedObject.object:type_name -> sui.checkpoint.v1.Object
	41,  // 93: sui.checkpoint.v1.Object.data:type_name -> sui.checkpoint.v1.Data
	101, // 94: sui.checkpoint.v1.Object.owner:type_name -> sui.checkpoint.v1.Owner
	139, // 95: sui.checkpoint.v1.OwnerType.immutable:type_name -> google.protobuf.Empty
	139, // 96: sui.checkpoint.v1.OwnerType.address:type_name -> google.protobuf.Empty
	139, // 97: sui.checkpoint.v1.OwnerType.object:type_name -> google.protobuf.Empty
	139, // 98: sui.checkpoint.v1.OwnerType.shared:type_name -> google.protobuf.Empty
	42,  // 99: sui.checkpoint.v1.Data.move:type_name -> sui.checkpoint.v1.MoveObject
	43,  // 100: sui.checkpoint.v1.Data.package:type_name -> sui.checkpoint.v1.MovePackage
	112, // 101: sui.checkpoint.v1.MoveObject.type:type_name -> sui.checkpoint.v1.MoveObjectType
	66,  // 102: sui.checkpoint.v1.MovePackage.id:type_name -> sui.checkpoint.v1.ObjectID
	115, // 103: sui.checkpoint.v1.MovePackage.module_map:type_name -> sui.checkpoint.v1.MovePackage.ModuleMapEntry
	113, // 104: sui.checkpoint.v1.MovePackage.type_origin_table:type_name -> sui.checkpoint.v1.TypeOrigin
	44,  // 105: sui.checkpoint.v1.MovePackage.linkage_table:type_name -> sui.checkpoint.v1.LinkageTablePair
	66,  // 106: sui.checkpoint.v1.LinkageTablePair.key:type_name -> sui.checkpoint.v1.ObjectID
	114, // 107: sui.checkpoint.v1.LinkageTablePair.value:type_name -> sui.checkpoint.v1.UpgradeInfo
	46,  // 108: sui.checkpoint.v1.DynamicFieldInfo.name:type_name -> sui.checkpoint.v1.DynamicFieldName
	47,  // 109: sui.checkpoint.v1.DynamicFieldInfo.type:type_name -> sui.checkpoint.v1.DynamicFieldType
	66,  // 110: sui.checkpoint.v1.DynamicFieldInfo.object_id:type_name -> sui.checkpoint.v1.ObjectID
	72,  // 111: sui.checkpoint.v1.DynamicFieldName.type:type_name -> sui.checkpoint.v1.TypeTag
	50,  // 112: sui.checkpoint.v1.DynamicFieldName.value:type_name -> sui.checkpoint.v1.Value
	139, // 113: sui.checkpoint.v1.DynamicFieldType.dynamic_field:type_name -> google.protobuf.Empty
	139, // 114: sui.checkpoint.v1.DynamicFieldType.dynamic_object:type_name -> google.protobuf.Empty
	66,  // 115: sui.checkpoint.v1.IndexedDeletedObject.object_id:type_name -> sui.checkpoint.v1.ObjectID
	66,  // 116: sui.checkpoint.v1.IndexedPackage.package_id:type_name -> sui.checkpoint.v1.ObjectID
	43,  // 117: sui.checkpoint.v1.IndexedPackage.move_package:type_name -> sui.checkpoint.v1.MovePackage
	139, // 118: sui.checkpoint.v1.Value.null:type_name -> google.protobuf.Empty
	52,  // 119: sui.checkpoint.v1.Value.array:type_name -> sui.checkpoint.v1.ListOfValues
	51,  // 120: sui.checkpoint.v1.Value.object:type_name -> sui.checkpoint.v1.ValueMap
	116, // 121: sui.checkpoint.v1.ValueMap.map:type_name -> sui.checkpoint.v1.ValueMap.MapEntry
	50,  // 122: sui.checkpoint.v1.ListOfValues.list:type_name -> sui.checkpoint.v1.Value
	54,  // 123: sui.checkpoint.v1.EndOfEpochData.next_epoch_committee:type_name -> sui.checkpoint.v1.NextEpochCommittee
	55,  // 124: sui.checkpoint.v1.EndOfEpochData.epoch_commitments:type_name -> sui.checkpoint.v1.CheckpointCommitment
	56,  // 125: sui.checkpoint.v1.CheckpointCommitment.ECMH_live_object_set_digest:type_name -> sui.checkpoint.v1.ECMHLiveObjectSetDigest
	58,  // 126: sui.checkpoint.v1.TransactionBlock.data:type_name -> sui.checkpoint.v1.TransactionBlockData
	59,  // 127: sui.checkpoint.v1.TransactionBlockData.v1:type_name -> sui.checkpoint.v1.TransactionBlockDataV1
	60,  // 128: sui.checkpoint.v1.TransactionBlockDataV1.transaction:type_name -> sui.checkpoint.v1.TransactionBlockKind
	61,  // 129: sui.checkpoint.v1.TransactionBlockDataV1.gas_data:type_name -> sui.checkpoint.v1.GasData
	63,  // 130: sui.checkpoint.v1.TransactionBlockKind.change_epoch:type_name -> sui.checkpoint.v1.ChangeEpoch
	64,  // 131: sui.checkpoint.v1.TransactionBlockKind.genesis:type_name -> sui.checkpoint.v1.GenesisTransaction
	67,  // 132: sui.checkpoint.v1.TransactionBlockKind.consensus_commit_prologue:type_name -> sui.checkpoint.v1.ConsensusCommitPrologue
	68,  // 133: sui.checkpoint.v1.TransactionBlockKind.programmable_transaction:type_name -> sui.checkpoint.v1.ProgrammableTransaction
	62,  // 134: sui.checkpoint.v1.GasData.payment:type_name -> sui.checkpoint.v1.ObjectRef
	66,  // 135: sui.checkpoint.v1.ObjectRef.object_id:type_name -> sui.checkpoint.v1.ObjectID
	65,  // 136: sui.checkpoint.v1.GenesisTransaction.objects:type_name -> sui.checkpoint.v1.GenesisObject
	117, // 137: sui.checkpoint.v1.GenesisObject.raw_object:type_name -> sui.checkpoint.v1.GenesisObject.RawObject
	69,  // 138: sui.checkpoint.v1.ProgrammableTransaction.inputs:type_name -> sui.checkpoint.v1.CallArg
	75,  // 139: sui.checkpoint.v1.ProgrammableTransaction.commands:type_name -> sui.checkpoint.v1.Command
	70,  // 140: sui.checkpoint.v1.CallArg.object:type_name -> sui.checkpoint.v1.SuiObjectArg
	62,  // 141: sui.checkpoint.v1.SuiObjectArg.imm_or_owned_object:type_name -> sui.checkpoint.v1.ObjectRef
	71,  // 142: sui.checkpoint.v1.SuiObjectArg.shared_object:type_name -> sui.checkpoint.v1.SharedObject
	62,  // 143: sui.checkpoint.v1.SuiObjectArg.receiving:type_name -> sui.checkpoint.v1.ObjectRef
	66,  // 144: sui.checkpoint.v1.SharedObject.object_id:type_name -> sui.checkpoint.v1.ObjectID
	139, // 145: sui.checkpoint.v1.TypeTag.bool:type_name -> google.protobuf.Empty
	139, // 146: sui.checkpoint.v1.TypeTag.u8:type_name -> google.protobuf.Empty
	139, // 147: sui.checkpoint.v1.TypeTag.u64:type_name -> google.protobuf.Empty
	139, // 148: sui.checkpoint.v1.TypeTag.u128:type_name -> google.protobuf.Empty
	139, // 149: sui.checkpoint.v1.TypeTag.address:type_name -> google.protobuf.Empty
	139, // 150: sui.checkpoint.v1.TypeTag.signer:type_name -> google.protobuf.Empty
	72,  // 151: sui.checkpoint.v1.TypeTag.vector:type_name -> sui.checkpoint.v1.TypeTag
	74,  // 152: sui.checkpoint.v1.TypeTag.struct:type_name -> sui.checkpoint.v1.StructTag
	139, // 153: sui.checkpoint.v1.TypeTag.u16:type_name -> google.protobuf.Empty
	139, // 154: sui.checkpoint.v1.TypeTag.u32:type_name -> google.protobuf.Empty
	139, // 155: sui.checkpoint.v1.TypeTag.u256:type_name -> google.protobuf.Empty
	72,  // 156: sui.checkpoint.v1.ListOfTypeTags.list:type_name -> sui.checkpoint.v1.TypeTag
	73,  // 157: sui.checkpoint.v1.StructTag.type_params:type_name -> sui.checkpoint.v1.ListOfTypeTags
	83,  // 158: sui.checkpoint.v1.Command.move_call:type_name -> sui.checkpoint.v1.SuiProgrammableMoveCall
	76,  // 159: sui.checkpoint.v1.Command.transfer_objects:type_name -> sui.checkpoint.v1.TransferObjectsPair
	77,  // 160: sui.checkpoint.v1.Command.split_coins:type_name -> sui.checkpoint.v1.SplitCoinsPair
	78,  // 161: sui.checkpoint.v1.Command.merge_coins:type_name -> sui.checkpoint.v1.MergeCoinsPair
	79,  // 162: sui.checkpoint.v1.Command.publish:type_name -> sui.checkpoint.v1.PublishCommand
	82,  // 163: sui.checkpoint.v1.Command.upgrade:type_name -> sui.checkpoint.v1.UpgradeComand
	81,  // 164: sui.checkpoint.v1.Command.make_move_vec:type_name -> sui.checkpoint.v1.MakeMoveVecPair
	84,  // 165: sui.checkpoint.v1.TransferObjectsPair.one:type_name -> sui.checkpoint.v1.SuiArgument
	84,  // 166: sui.checkpoint.v1.TransferObjectsPair.two:type_name -> sui.checkpoint.v1.SuiArgument
	84,  // 167: sui.checkpoint.v1.SplitCoinsPair.one:type_name -> sui.checkpoint.v1.SuiArgument
	84,  // 168: sui.checkpoint.v1.SplitCoinsPair.two:type_name -> sui.checkpoint.v1.SuiArgument
	84,  // 169: sui.checkpoint.v1.MergeCoinsPair.one:type_name -> sui.checkpoint.v1.SuiArgument
	84,  // 170: sui.checkpoint.v1.MergeCoinsPair.two:type_name -> sui.checkpoint.v1.SuiArgument
	66,  // 171: sui.checkpoint.v1.PublishCommand.package:type_name -> sui.checkpoint.v1.ObjectID
	66,  // 172: sui.checkpoint.v1.ListOfObjects.list:type_name -> sui.checkpoint.v1.ObjectID
	72,  // 173: sui.checkpoint.v1.MakeMoveVecPair.one:type_name -> sui.checkpoint.v1.TypeTag
	84,  // 174: sui.checkpoint.v1.MakeMoveVecPair.two:type_name -> sui.checkpoint.v1.SuiArgument
	66,  // 175: sui.checkpoint.v1.UpgradeComand.two:type_name -> sui.checkpoint.v1.ObjectID
	66,  // 176: sui.checkpoint.v1.UpgradeComand.three:type_name -> sui.checkpoint.v1.ObjectID
	84,  // 177: sui.checkpoint.v1.UpgradeComand.four:type_name -> sui.checkpoint.v1.SuiArgument
	66,  // 178: sui.checkpoint.v1.SuiProgrammableMoveCall.package:type_name -> sui.checkpoint.v1.ObjectID
	72,  // 179: sui.checkpoint.v1.SuiProgrammableMoveCall.type_arguments:type_name -> sui.checkpoint.v1.TypeTag
	84,  // 180: sui.checkpoint.v1.SuiProgrammableMoveCall.arguments:type_name -> sui.checkpoint.v1.SuiArgument
	139, // 181: sui.checkpoint.v1.SuiArgument.gas_coin:type_name -> google.protobuf.Empty
	85,  // 182: sui.checkpoint.v1.SuiArgument.nested_result:type_name -> sui.checkpoint.v1.PairOfU32
	87,  // 183: sui.checkpoint.v1.TransactionBlockEffects.v1:type_name -> sui.checkpoint.v1.TransactionBlockEffectsV1
	88,  // 184: sui.checkpoint.v1.TransactionBlockEffects.v2:type_name -> sui.checkpoint.v1.TransactionBlockEffectsV2
	103, // 185: sui.checkpoint.v1.TransactionBlockEffectsV1.status:type_name -> sui.checkpoint.v1.ExecutionStatus
	2,   // 186: sui.checkpoint.v1.TransactionBlockEffectsV1.gas_used:type_name -> sui.checkpoint.v1.GasCostSummary
	110, // 187: sui.checkpoint.v1.TransactionBlockEffectsV1.modified_at_versions:type_name -> sui.checkpoint.v1.TransactionBlockEffectsModifiedAtVersions
	62,  // 188: sui.checkpoint.v1.TransactionBlockEffectsV1.shared_objects:type_name -> sui.checkpoint.v1.ObjectRef
	100, // 189: sui.checkpoint.v1.TransactionBlockEffectsV1.created:type_name -> sui.checkpoint.v1.OwnedObjectRef
	100, // 190: sui.checkpoint.v1.TransactionBlockEffectsV1.mutated:type_name -> sui.checkpoint.v1.OwnedObjectRef
	100, // 191: sui.checkpoint.v1.TransactionBlockEffectsV1.unwrapped:type_name -> sui.checkpoint.v1.OwnedObjectRef
	62,  // 192: sui.checkpoint.v1.TransactionBlockEffectsV1.deleted:type_name -> sui.checkpoint.v1.ObjectRef
	62,  // 193: sui.checkpoint.v1.TransactionBlockEffectsV1.unwrapped_then_deleted:type_name -> sui.checkpoint.v1.ObjectRef
	62,  // 194: sui.checkpoint.v1.TransactionBlockEffectsV1.wrapped:type_name -> sui.checkpoint.v1.ObjectRef
	100, // 195: sui.checkpoint.v1.TransactionBlockEffectsV1.gas_object:type_name -> sui.checkpoint.v1.OwnedObjectRef
	103, // 196: sui.checkpoint.v1.TransactionBlockEffectsV2.status:type_name -> sui.checkpoint.v1.ExecutionStatus
	2,   // 197: sui.checkpoint.v1.TransactionBlockEffectsV2.gas_used:type_name -> sui.checkpoint.v1.GasCostSummary
	91,  // 198: sui.checkpoint.v1.TransactionBlockEffectsV2.changed_objects:type_name -> sui.checkpoint.v1.ChangedObjectV2
	89,  // 199: sui.checkpoint.v1.TransactionBlockEffectsV2.unchanged_shared_objects:type_name -> sui.checkpoint.v1.UnchangedSharedObject
	66,  // 200: sui.checkpoint.v1.UnchangedSharedObject.object_id:type_name -> sui.checkpoint.v1.ObjectID
	90,  // 201: sui.checkpoint.v1.UnchangedSharedObject.kind:type_name -> sui.checkpoint.v1.UnchangedSharedKind
	99,  // 202: sui.checkpoint.v1.UnchangedSharedKind.read_only_root:type_name -> sui.checkpoint.v1.VersionDigest
	66,  // 203: sui.checkpoint.v1.ChangedObjectV2.object_id:type_name -> sui.checkpoint.v1.ObjectID
	92,  // 204: sui.checkpoint.v1.ChangedObjectV2.effects:type_name -> sui.checkpoint.v1.EffectsObjectChange
	94,  // 205: sui.checkpoint.v1.EffectsObjectChange.input_state:type_name -> sui.checkpoint.v1.ObjectIn
	95,  // 206: sui.checkpoint.v1.EffectsObjectChange.output_state:type_name -> sui.checkpoint.v1.ObjectOut
	93,  // 207: sui.checkpoint.v1.EffectsObjectChange.id_operation:type_name -> sui.checkpoint.v1.IDOperation
	139, // 208: sui.checkpoint.v1.IDOperation.none:type_name -> google.protobuf.Empty
	139, // 209: sui.checkpoint.v1.IDOperation.created:type_name -> google.protobuf.Empty
	139, // 210: sui.checkpoint.v1.IDOperation.deleted:type_name -> google.protobuf.Empty
	139, // 211: sui.checkpoint.v1.ObjectIn.not_exist:type_name -> google.protobuf.Empty
	98,  // 212: sui.checkpoint.v1.ObjectIn.exist:type_name -> sui.checkpoint.v1.ObjectInExist
	139, // 213: sui.checkpoint.v1.ObjectOut.not_exist:type_name -> google.protobuf.Empty
	96,  // 214: sui.checkpoint.v1.ObjectOut.object_write:type_name -> sui.checkpoint.v1.ObjectWrite
	97,  // 215: sui.checkpoint.v1.ObjectOut.package_write:type_name -> sui.checkpoint.v1.PackageWrite
	101, // 216: sui.checkpoint.v1.ObjectWrite.owner:type_name -> sui.checkpoint.v1.Owner
	99,  // 217: sui.checkpoint.v1.PackageWrite.version_digest:type_name -> sui.checkpoint.v1.VersionDigest
	99,  // 218: sui.checkpoint.v1.ObjectInExist.version_digest:type_name -> sui.checkpoint.v1.VersionDigest
	101, // 219: sui.checkpoint.v1.ObjectInExist.owner:type_name -> sui.checkpoint.v1.Owner
	101, // 220: sui.checkpoint.v1.OwnedObjectRef.owner:type_name -> sui.checkpoint.v1.Owner
	62,  // 221: sui.checkpoint.v1.OwnedObjectRef.reference:type_name -> sui.checkpoint.v1.ObjectRef
	102, // 222: sui.checkpoint.v1.Owner.shared:type_name -> sui.checkpoint.v1.Shared
	139, // 223: sui.checkpoint.v1.Owner.immutable:type_name -> google.protobuf.Empty
	139, // 224: sui.checkpoint.v1.ExecutionStatus.success:type_name -> google.protobuf.Empty
	104, // 225: sui.checkpoint.v1.ExecutionStatus.failure:type_name -> sui.checkpoint.v1.Failure
	105, // 226: sui.checkpoint.v1.Failure.error:type_name -> sui.checkpoint.v1.ExecutionFailureStatus
	139, // 227: sui.checkpoint.v1.ExecutionFailureStatus.insufficient_gas:type_name -> google.protobuf.Empty
	139, // 228: sui.checkpoint.v1.ExecutionFailureStatus.invalid_gas_object:type_name -> google.protobuf.Empty
	139, // 229: sui.checkpoint.v1.ExecutionFailureStatus.invariant_violation:type_name -> google.protobuf.Empty
	139, // 230: sui.checkpoint.v1.ExecutionFailureStatus.feature_not_yet_supported:type_name -> google.protobuf.Empty
	118, // 231: sui.checkpoint.v1.ExecutionFailureStatus.move_object_too_big:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.MoveObjectTooBig
	119, // 232: sui.checkpoint.v1.ExecutionFailureStatus.move_package_too_big:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.MovePackageTooBig
	120, // 233: sui.checkpoint.v1.ExecutionFailureStatus.circular_object_ownership:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.CircularObjectOwnership
	139, // 234: sui.checkpoint.v1.ExecutionFailureStatus.insufficient_coin_balance:type_name -> google.protobuf.Empty
	139, // 235: sui.checkpoint.v1.ExecutionFailureStatus.coin_balance_overflow:type_name -> google.protobuf.Empty
	139, // 236: sui.checkpoint.v1.ExecutionFailureStatus.publish_error_non_zero_address:type_name -> google.protobuf.Empty
	139, // 237: sui.checkpoint.v1.ExecutionFailureStatus.sui_move_verification_error:type_name -> google.protobuf.Empty
	121, // 238: sui.checkpoint.v1.ExecutionFailureStatus.move_primitive_runtime_error:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.MoveLocationOpt
	122, // 239: sui.checkpoint.v1.ExecutionFailureStatus.move_abort:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.MoveAbort
	139, // 240: sui.checkpoint.v1.ExecutionFailureStatus.vm_verification_or_deserialization_error:type_name -> google.protobuf.Empty
	139, // 241: sui.checkpoint.v1.ExecutionFailureStatus.vm_invariant_violation:type_name -> google.protobuf.Empty
	139, // 242: sui.checkpoint.v1.ExecutionFailureStatus.function_not_found:type_name -> google.protobuf.Empty
	139, // 243: sui.checkpoint.v1.ExecutionFailureStatus.arity_mismatch:type_name -> google.protobuf.Empty
	139, // 244: sui.checkpoint.v1.ExecutionFailureStatus.type_arity_mismatch:type_name -> google.protobuf.Empty
	139, // 245: sui.checkpoint.v1.ExecutionFailureStatus.non_entry_function_invoked:type_name -> google.protobuf.Empty
	124, // 246: sui.checkpoint.v1.ExecutionFailureStatus.command_arg_error:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.CommandArgumentError_
	125, // 247: sui.checkpoint.v1.ExecutionFailureStatus.type_argument_error:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.TypeArgumentError_
	126, // 248: sui.checkpoint.v1.ExecutionFailureStatus.unused_value_without_drop:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.UnusedValueWithoutDrop
	127, // 249: sui.checkpoint.v1.ExecutionFailureStatus.invalid_public_function_return_type:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.InvalidPublicFunctionReturnType
	139, // 250: sui.checkpoint.v1.ExecutionFailureStatus.invalid_transfer_object:type_name -> google.protobuf.Empty
	128, // 251: sui.checkpoint.v1.ExecutionFailureStatus.effects_too_large:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.EffectsTooLarge
	139, // 252: sui.checkpoint.v1.ExecutionFailureStatus.publish_upgrade_missing_dependency:type_name -> google.protobuf.Empty
	139, // 253: sui.checkpoint.v1.ExecutionFailureStatus.publish_upgrade_dependency_downgrade:type_name -> google.protobuf.Empty
	129, // 254: sui.checkpoint.v1.ExecutionFailureStatus.package_upgrade_error:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.PackageUpgradeError_
	130, // 255: sui.checkpoint.v1.ExecutionFailureStatus.written_objects_too_large:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.WrittenObjectsTooLarge
	139, // 256: sui.checkpoint.v1.ExecutionFailureStatus.certificate_denied:type_name -> google.protobuf.Empty
	139, // 257: sui.checkpoint.v1.ExecutionFailureStatus.sui_move_verification_timedout:type_name -> google.protobuf.Empty
	139, // 258: sui.checkpoint.v1.ExecutionFailureStatus.shared_object_operation_not_allowed:type_name -> google.protobuf.Empty
	139, // 259: sui.checkpoint.v1.ExecutionFailureStatus.Input_object_deleted:type_name -> google.protobuf.Empty
	139, // 260: sui.checkpoint.v1.CommandArgumentError.type_mismatch:type_name -> google.protobuf.Empty
	139, // 261: sui.checkpoint.v1.CommandArgumentError.invalid_bcs_bytes:type_name -> google.protobuf.Empty
	139, // 262: sui.checkpoint.v1.CommandArgumentError.invalid_usage_of_pure_arg:type_name -> google.protobuf.Empty
	139, // 263: sui.checkpoint.v1.CommandArgumentError.invalid_argument_to_private_entry_function:type_name -> google.protobuf.Empty
	131, // 264: sui.checkpoint.v1.CommandArgumentError.index_out_of_bounds:type_name -> sui.checkpoint.v1.CommandArgumentError.IndexOutOfBounds
	132, // 265: sui.checkpoint.v1.CommandArgumentError.secondary_index_out_of_bounds:type_name -> sui.checkpoint.v1.CommandArgumentError.SecondaryIndexOutOfBounds
	133, // 266: sui.checkpoint.v1.CommandArgumentError.invalid_result_arity:type_name -> sui.checkpoint.v1.CommandArgumentError.InvalidResultArity
	139, // 267: sui.checkpoint.v1.CommandArgumentError.invalid_gas_coin_usage:type_name -> google.protobuf.Empty
	139, // 268: sui.checkpoint.v1.CommandArgumentError.invalid_value_usage:type_name -> google.protobuf.Empty
	139, // 269: sui.checkpoint.v1.CommandArgumentError.invalid_object_by_value:type_name -> google.protobuf.Empty
	139, // 270: sui.checkpoint.v1.CommandArgumentError.invalid_object_by_mut_ref:type_name -> google.protobuf.Empty
	139, // 271: sui.checkpoint.v1.CommandArgumentError.shared_object_operation_not_allowed:type_name -> google.protobuf.Empty
	139, // 272: sui.checkpoint.v1.TypeArgumentError.type_not_found:type_name -> google.protobuf.Empty
	139, // 273: sui.checkpoint.v1.TypeArgumentError.constraint_not_satisfied:type_name -> google.protobuf.Empty
	134, // 274: sui.checkpoint.v1.PackageUpgradeError.unable_to_fetch_package:type_name -> sui.checkpoint.v1.PackageUpgradeError.UnableToFetchPackage
	135, // 275: sui.checkpoint.v1.PackageUpgradeError.not_a_package:type_name -> sui.checkpoint.v1.PackageUpgradeError.NotAPackage
	139, // 276: sui.checkpoint.v1.PackageUpgradeError.incompatible_upgrade:type_name -> google.protobuf.Empty
	136, // 277: sui.checkpoint.v1.PackageUpgradeError.digest_does_not_match:type_name -> sui.checkpoint.v1.PackageUpgradeError.DigestDoesNotMatch
	137, // 278: sui.checkpoint.v1.PackageUpgradeError.unknown_upgrade_policy:type_name -> sui.checkpoint.v1.PackageUpgradeError.UnknownUpgradePolicy
	138, // 279: sui.checkpoint.v1.PackageUpgradeError.package_id_does_not_match:type_name -> sui.checkpoint.v1.PackageUpgradeError.PackageIDDoesNotMatch
	66,  // 280: sui.checkpoint.v1.TransactionBlockEffectsModifiedAtVersions.object_id:type_name -> sui.checkpoint.v1.ObjectID
	139, // 281: sui.checkpoint.v1.ObjectType.package:type_name -> google.protobuf.Empty
	112, // 282: sui.checkpoint.v1.ObjectType.struct:type_name -> sui.checkpoint.v1.MoveObjectType
	74,  // 283: sui.checkpoint.v1.MoveObjectType.other:type_name -> sui.checkpoint.v1.StructTag
	139, // 284: sui.checkpoint.v1.MoveObjectType.gas_coin:type_name -> google.protobuf.Empty
	139, // 285: sui.checkpoint.v1.MoveObjectType.staked_sui:type_name -> google.protobuf.Empty
	72,  // 286: sui.checkpoint.v1.MoveObjectType.coin:type_name -> sui.checkpoint.v1.TypeTag
	66,  // 287: sui.checkpoint.v1.TypeOrigin.package:type_name -> sui.checkpoint.v1.ObjectID
	66,  // 288: sui.checkpoint.v1.UpgradeInfo.upgraded_id:type_name -> sui.checkpoint.v1.ObjectID
	50,  // 289: sui.checkpoint.v1.ValueMap.MapEntry.value:type_name -> sui.checkpoint.v1.Value
	41,  // 290: sui.checkpoint.v1.GenesisObject.RawObject.data:type_name -> sui.checkpoint.v1.Data
	101, // 291: sui.checkpoint.v1.GenesisObject.RawObject.owner:type_name -> sui.checkpoint.v1.Owner
	66,  // 292: sui.checkpoint.v1.ExecutionFailureStatus.CircularObjectOwnership.object:type_name -> sui.checkpoint.v1.ObjectID
	123, // 293: sui.checkpoint.v1.ExecutionFailureStatus.MoveLocationOpt.move_location:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.MoveLocation
	123, // 294: sui.checkpoint.v1.ExecutionFailureStatus.MoveAbort.move_location:type_name -> sui.checkpoint.v1.ExecutionFailureStatus.MoveLocation
	109, // 295: sui.checkpoint.v1.ExecutionFailureStatus.MoveLocation.module:type_name -> sui.checkpoint.v1.ModuleId
	106, // 296: sui.checkpoint.v1.ExecutionFailureStatus.CommandArgumentError_.kind:type_name -> sui.checkpoint.v1.CommandArgumentError
	107, // 297: sui.checkpoint.v1.ExecutionFailureStatus.TypeArgumentError_.kind:type_name -> sui.checkpoint.v1.TypeArgumentError
	108, // 298: sui.checkpoint.v1.ExecutionFailureStatus.PackageUpgradeError_.upgrade_error:type_name -> sui.checkpoint.v1.PackageUpgradeError
	66,  // 299: sui.checkpoint.v1.PackageUpgradeError.UnableToFetchPackage.package_id:type_name -> sui.checkpoint.v1.ObjectID
	66,  // 300: sui.checkpoint.v1.PackageUpgradeError.NotAPackage.object_id:type_name -> sui.checkpoint.v1.ObjectID
	66,  // 301: sui.checkpoint.v1.PackageUpgradeError.PackageIDDoesNotMatch.package_id:type_name -> sui.checkpoint.v1.ObjectID
	66,  // 302: sui.checkpoint.v1.PackageUpgradeError.PackageIDDoesNotMatch.ticket_id:type_name -> sui.checkpoint.v1.ObjectID
	303, // [303:303] is the sub-list for method output_type
	303, // [303:303] is the sub-list for method input_type
	303, // [303:303] is the sub-list for extension type_name
	303, // [303:303] is the sub-list for extension extendee
	0,   // [0:303] is the sub-list for field type_name
}

func init() { file_sf_sui_type_v1_type_proto_init() }
func file_sf_sui_type_v1_type_proto_init() {
	if File_sf_sui_type_v1_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sf_sui_type_v1_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Checkpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasCostSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericTransactionKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Published); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transferred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mutated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wrapped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Created); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SenderSignedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntentMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Intent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntentVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntentScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionDataV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionExpiration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusCommitPrologueV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandomnessStateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndOfEpochTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndOfEpochTransactionKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatorStateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveJwk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwkId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWK); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticatorStateExpire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveCallOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoredDisplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionObjectChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkageTablePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicFieldInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicFieldName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicFieldType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexedDeletedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexedPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndOfEpochData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextEpochCommittee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckpointCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECMHLiveObjectSetDigest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBlockDataV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBlockKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEpoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusCommitPrologue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgrammableTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiObjectArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfTypeTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferObjectsPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitCoinsPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeCoinsPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfObjects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeMoveVecPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeComand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiProgrammableMoveCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuiArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairOfU32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBlockEffects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBlockEffectsV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBlockEffectsV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnchangedSharedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnchangedSharedKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangedObjectV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectsObjectChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageWrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectInExist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionDigest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnedObjectRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Owner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shared); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandArgumentError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeArgumentError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageUpgradeError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBlockEffectsModifiedAtVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveObjectType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisObject_RawObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_MoveObjectTooBig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_MovePackageTooBig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_CircularObjectOwnership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_MoveLocationOpt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_MoveAbort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_MoveLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_CommandArgumentError_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_TypeArgumentError_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_UnusedValueWithoutDrop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_InvalidPublicFunctionReturnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_EffectsTooLarge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_PackageUpgradeError_); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionFailureStatus_WrittenObjectsTooLarge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandArgumentError_IndexOutOfBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandArgumentError_SecondaryIndexOutOfBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandArgumentError_InvalidResultArity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageUpgradeError_UnableToFetchPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageUpgradeError_NotAPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageUpgradeError_DigestDoesNotMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageUpgradeError_UnknownUpgradePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sf_sui_type_v1_type_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageUpgradeError_PackageIDDoesNotMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sf_sui_type_v1_type_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_sf_sui_type_v1_type_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*GenericTransactionKind_SystemTransaction)(nil),
		(*GenericTransactionKind_ProgrammableTransaction)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ObjectChange_Published)(nil),
		(*ObjectChange_Transferred)(nil),
		(*ObjectChange_Mutated)(nil),
		(*ObjectChange_Deleted)(nil),
		(*ObjectChange_Wrapped)(nil),
		(*ObjectChange_Created)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*IntentVersion_V0)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*AppId_Sui)(nil),
		(*AppId_Narwhal)(nil),
		(*AppId_Consensus)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*IntentScope_TransactionData)(nil),
		(*IntentScope_TransactionEffects)(nil),
		(*IntentScope_CheckpointSummary)(nil),
		(*IntentScope_PersonalMessage)(nil),
		(*IntentScope_SenderSignedTransaction)(nil),
		(*IntentScope_ProofOfPossession)(nil),
		(*IntentScope_HeaderDigest)(nil),
		(*IntentScope_BridgeEventUnused)(nil),
		(*IntentScope_ConsensusBlock)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*TransactionData_V1)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*TransactionExpiration_None)(nil),
		(*TransactionExpiration_Epoch)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*TransactionKind_ProgrammableTx)(nil),
		(*TransactionKind_ChangeEpoch)(nil),
		(*TransactionKind_Genesis)(nil),
		(*TransactionKind_ConsensusCommitPrologue)(nil),
		(*TransactionKind_AuthenticatorStateUpdate)(nil),
		(*TransactionKind_EndOdEpochTransaction)(nil),
		(*TransactionKind_RandomnessStateUpdate)(nil),
		(*TransactionKind_ConsensusCommitPrologueV2)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*EndOfEpochTransactionKind_ChangeEpoch)(nil),
		(*EndOfEpochTransactionKind_AuthenticatorStateCreate)(nil),
		(*EndOfEpochTransactionKind_AuthenticatorStateExpire)(nil),
		(*EndOfEpochTransactionKind_RandomnessStateCreate)(nil),
		(*EndOfEpochTransactionKind_DenyListStateCreate)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_sf_sui_type_v1_type_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*OwnerType_Immutable)(nil),
		(*OwnerType_Address)(nil),
		(*OwnerType_Object)(nil),
		(*OwnerType_Shared)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*Data_Move)(nil),
		(*Data_Package)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*DynamicFieldType_DynamicField)(nil),
		(*DynamicFieldType_DynamicObject)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*Value_Null)(nil),
		(*Value_Bool)(nil),
		(*Value_Number)(nil),
		(*Value_String_)(nil),
		(*Value_Array)(nil),
		(*Value_Object)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*CheckpointCommitment_ECMHLiveObjectSetDigest)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*TransactionBlockData_V1)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*TransactionBlockKind_ChangeEpoch)(nil),
		(*TransactionBlockKind_Genesis)(nil),
		(*TransactionBlockKind_ConsensusCommitPrologue)(nil),
		(*TransactionBlockKind_ProgrammableTransaction)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*GenesisObject_RawObject_)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[69].OneofWrappers = []interface{}{
		(*CallArg_Object)(nil),
		(*CallArg_Pure)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[70].OneofWrappers = []interface{}{
		(*SuiObjectArg_ImmOrOwnedObject)(nil),
		(*SuiObjectArg_SharedObject)(nil),
		(*SuiObjectArg_Receiving)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*TypeTag_Bool)(nil),
		(*TypeTag_U8)(nil),
		(*TypeTag_U64)(nil),
		(*TypeTag_U128)(nil),
		(*TypeTag_Address)(nil),
		(*TypeTag_Signer)(nil),
		(*TypeTag_Vector)(nil),
		(*TypeTag_Struct)(nil),
		(*TypeTag_U16)(nil),
		(*TypeTag_U32)(nil),
		(*TypeTag_U256)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[75].OneofWrappers = []interface{}{
		(*Command_MoveCall)(nil),
		(*Command_TransferObjects)(nil),
		(*Command_SplitCoins)(nil),
		(*Command_MergeCoins)(nil),
		(*Command_Publish)(nil),
		(*Command_Upgrade)(nil),
		(*Command_MakeMoveVec)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[81].OneofWrappers = []interface{}{}
	file_sf_sui_type_v1_type_proto_msgTypes[84].OneofWrappers = []interface{}{
		(*SuiArgument_GasCoin)(nil),
		(*SuiArgument_Input)(nil),
		(*SuiArgument_Result)(nil),
		(*SuiArgument_NestedResult)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[86].OneofWrappers = []interface{}{
		(*TransactionBlockEffects_V1)(nil),
		(*TransactionBlockEffects_V2)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[87].OneofWrappers = []interface{}{}
	file_sf_sui_type_v1_type_proto_msgTypes[88].OneofWrappers = []interface{}{}
	file_sf_sui_type_v1_type_proto_msgTypes[90].OneofWrappers = []interface{}{
		(*UnchangedSharedKind_ReadOnlyRoot)(nil),
		(*UnchangedSharedKind_MutateDeleted)(nil),
		(*UnchangedSharedKind_ReadDeleted)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[93].OneofWrappers = []interface{}{
		(*IDOperation_None)(nil),
		(*IDOperation_Created)(nil),
		(*IDOperation_Deleted)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[94].OneofWrappers = []interface{}{
		(*ObjectIn_NotExist)(nil),
		(*ObjectIn_Exist)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[95].OneofWrappers = []interface{}{
		(*ObjectOut_NotExist)(nil),
		(*ObjectOut_ObjectWrite)(nil),
		(*ObjectOut_PackageWrite)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[101].OneofWrappers = []interface{}{
		(*Owner_AddressOwner)(nil),
		(*Owner_ObjectOwner)(nil),
		(*Owner_Shared)(nil),
		(*Owner_Immutable)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[103].OneofWrappers = []interface{}{
		(*ExecutionStatus_Success)(nil),
		(*ExecutionStatus_Failure)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[104].OneofWrappers = []interface{}{}
	file_sf_sui_type_v1_type_proto_msgTypes[105].OneofWrappers = []interface{}{
		(*ExecutionFailureStatus_InsufficientGas)(nil),
		(*ExecutionFailureStatus_InvalidGasObject)(nil),
		(*ExecutionFailureStatus_InvariantViolation)(nil),
		(*ExecutionFailureStatus_FeatureNotYetSupported)(nil),
		(*ExecutionFailureStatus_MoveObjectTooBig_)(nil),
		(*ExecutionFailureStatus_MovePackageTooBig_)(nil),
		(*ExecutionFailureStatus_CircularObjectOwnership_)(nil),
		(*ExecutionFailureStatus_InsufficientCoinBalance)(nil),
		(*ExecutionFailureStatus_CoinBalanceOverflow)(nil),
		(*ExecutionFailureStatus_PublishErrorNonZeroAddress)(nil),
		(*ExecutionFailureStatus_SuiMoveVerificationError)(nil),
		(*ExecutionFailureStatus_MovePrimitiveRuntimeError)(nil),
		(*ExecutionFailureStatus_MoveAbort_)(nil),
		(*ExecutionFailureStatus_VmVerificationOrDeserializationError)(nil),
		(*ExecutionFailureStatus_VmInvariantViolation)(nil),
		(*ExecutionFailureStatus_FunctionNotFound)(nil),
		(*ExecutionFailureStatus_ArityMismatch)(nil),
		(*ExecutionFailureStatus_TypeArityMismatch)(nil),
		(*ExecutionFailureStatus_NonEntryFunctionInvoked)(nil),
		(*ExecutionFailureStatus_CommandArgError)(nil),
		(*ExecutionFailureStatus_TypeArgumentError)(nil),
		(*ExecutionFailureStatus_UnusedValueWithoutDrop_)(nil),
		(*ExecutionFailureStatus_InvalidPublicFunctionReturnType_)(nil),
		(*ExecutionFailureStatus_InvalidTransferObject)(nil),
		(*ExecutionFailureStatus_EffectsTooLarge_)(nil),
		(*ExecutionFailureStatus_PublishUpgradeMissingDependency)(nil),
		(*ExecutionFailureStatus_PublishUpgradeDependencyDowngrade)(nil),
		(*ExecutionFailureStatus_PackageUpgradeError)(nil),
		(*ExecutionFailureStatus_WrittenObjectsTooLarge_)(nil),
		(*ExecutionFailureStatus_CertificateDenied)(nil),
		(*ExecutionFailureStatus_SuiMoveVerificationTimedout)(nil),
		(*ExecutionFailureStatus_SharedObjectOperationNotAllowed)(nil),
		(*ExecutionFailureStatus_InputObjectDeleted)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[106].OneofWrappers = []interface{}{
		(*CommandArgumentError_TypeMismatch)(nil),
		(*CommandArgumentError_InvalidBcsBytes)(nil),
		(*CommandArgumentError_InvalidUsageOfPureArg)(nil),
		(*CommandArgumentError_InvalidArgumentToPrivateEntryFunction)(nil),
		(*CommandArgumentError_IndexOutOfBounds_)(nil),
		(*CommandArgumentError_SecondaryIndexOutOfBounds_)(nil),
		(*CommandArgumentError_InvalidResultArity_)(nil),
		(*CommandArgumentError_InvalidGasCoinUsage)(nil),
		(*CommandArgumentError_InvalidValueUsage)(nil),
		(*CommandArgumentError_InvalidObjectByValue)(nil),
		(*CommandArgumentError_InvalidObjectByMutRef)(nil),
		(*CommandArgumentError_SharedObjectOperationNotAllowed)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[107].OneofWrappers = []interface{}{
		(*TypeArgumentError_TypeNotFound)(nil),
		(*TypeArgumentError_ConstraintNotSatisfied)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[108].OneofWrappers = []interface{}{
		(*PackageUpgradeError_UnableToFetchPackage_)(nil),
		(*PackageUpgradeError_NotAPackage_)(nil),
		(*PackageUpgradeError_IncompatibleUpgrade)(nil),
		(*PackageUpgradeError_DigestDoesNotMatch_)(nil),
		(*PackageUpgradeError_UnknownUpgradePolicy_)(nil),
		(*PackageUpgradeError_PackageIdDoesNotMatch)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[111].OneofWrappers = []interface{}{
		(*ObjectType_Package)(nil),
		(*ObjectType_Struct)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[112].OneofWrappers = []interface{}{
		(*MoveObjectType_Other)(nil),
		(*MoveObjectType_GasCoin)(nil),
		(*MoveObjectType_StakedSui)(nil),
		(*MoveObjectType_Coin)(nil),
	}
	file_sf_sui_type_v1_type_proto_msgTypes[121].OneofWrappers = []interface{}{}
	file_sf_sui_type_v1_type_proto_msgTypes[123].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sf_sui_type_v1_type_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   139,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sf_sui_type_v1_type_proto_goTypes,
		DependencyIndexes: file_sf_sui_type_v1_type_proto_depIdxs,
		MessageInfos:      file_sf_sui_type_v1_type_proto_msgTypes,
	}.Build()
	File_sf_sui_type_v1_type_proto = out.File
	file_sf_sui_type_v1_type_proto_rawDesc = nil
	file_sf_sui_type_v1_type_proto_goTypes = nil
	file_sf_sui_type_v1_type_proto_depIdxs = nil
}
